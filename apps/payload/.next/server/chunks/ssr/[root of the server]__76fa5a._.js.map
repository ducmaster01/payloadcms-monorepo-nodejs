{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/payload/src/collections/Users.ts"],"sourcesContent":["import type { CollectionConfig } from 'payload'\n\nexport const Users: CollectionConfig = {\n  slug: 'users',\n  admin: {\n    useAsTitle: 'email',\n  },\n  auth: true,\n  fields: [\n    // Email added by default\n    // Add more fields as needed\n  ],\n}\n"],"names":[],"mappings":";;;AAEO,MAAM,QAA0B;IACrC,MAAM;IACN,OAAO;QACL,YAAY;IACd;IACA,MAAM;IACN,QAAQ,EAGP;AACH"}},
    {"offset": {"line": 34, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 40, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/payload/src/collections/Media.ts"],"sourcesContent":["import type { CollectionConfig } from 'payload'\n\nexport const Media: CollectionConfig = {\n  slug: 'media',\n  access: {\n    read: () => true,\n  },\n  fields: [\n    {\n      name: 'alt',\n      type: 'text',\n      required: true,\n    },\n  ],\n  upload: true,\n}\n"],"names":[],"mappings":";;;AAEO,MAAM,QAA0B;IACrC,MAAM;IACN,QAAQ;QACN,MAAM,IAAM;IACd;IACA,QAAQ;QACN;YACE,MAAM;YACN,MAAM;YACN,UAAU;QACZ;KACD;IACD,QAAQ;AACV"}},
    {"offset": {"line": 57, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 271, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/payload/src/payload.config.ts"],"sourcesContent":["import { lexicalEditor } from '@payloadcms/richtext-lexical'\nimport path from 'path'\nimport { buildConfig } from 'payload'\nimport { fileURLToPath } from 'url'\nimport sharp from 'sharp'\n\nimport { Users } from './collections/Users'\nimport { Media } from './collections/Media'\nimport { postgresAdapter } from '@payloadcms/db-postgres'\n\nconst filename = fileURLToPath(import.meta.url)\nconst dirname = path.dirname(filename)\n\nexport default buildConfig({\n  admin: {\n    user: Users.slug,\n    importMap: {\n      baseDir: path.resolve(dirname),\n    },\n  },\n  collections: [\n    Users,\n    Media,\n    {\n      slug: 'posts',\n      fields: [\n        {\n          name: 'title',\n          label: 'Title',\n          type: 'text',\n          required: true,\n        },\n      ],\n    },\n  ],\n  editor: lexicalEditor(),\n  secret: process.env.PAYLOAD_SECRET || '',\n  typescript: {\n    outputFile: path.resolve(dirname, 'payload-types.ts'),\n  },\n  async onInit(payload) {\n    const { totalDocs: postsCount } = await payload.count({ collection: 'posts' })\n\n    if (!postsCount) {\n      await payload.create({ collection: 'posts', data: { title: 'Post 1' } })\n    }\n  },\n  db: postgresAdapter({\n    pool: {\n      connectionString: process.env.DATABASE_URI || '',\n    },\n  }),\n  sharp,\n  plugins: [],\n})\n"],"names":[],"mappings":";;;AACA;AAEA;AACA;AAEA;AACA;AACA;AANA;AAFA;AAQA;;;;;;;;;;;;;;AAEA,MAAM,WAAW,CAAA,GAAA,+FAAA,CAAA,gBAAa,AAAD,EAAE,8BAAY,GAAG;AAC9C,MAAM,UAAU,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC;uCAEd,CAAA,GAAA,wWAAA,CAAA,cAAW,AAAD,EAAE;IACzB,OAAO;QACL,MAAM,sIAAA,CAAA,QAAK,CAAC,IAAI;QAChB,WAAW;YACT,SAAS,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC;QACxB;IACF;IACA,aAAa;QACX,sIAAA,CAAA,QAAK;QACL,sIAAA,CAAA,QAAK;QACL;YACE,MAAM;YACN,QAAQ;gBACN;oBACE,MAAM;oBACN,OAAO;oBACP,MAAM;oBACN,UAAU;gBACZ;aACD;QACH;KACD;IACD,QAAQ,CAAA,GAAA,gSAAA,CAAA,gBAAa,AAAD;IACpB,QAAQ,QAAQ,GAAG,CAAC,cAAc,IAAI;IACtC,YAAY;QACV,YAAY,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,SAAS;IACpC;IACA,MAAM,QAAO,OAAO;QAClB,MAAM,EAAE,WAAW,UAAU,EAAE,GAAG,MAAM,QAAQ,KAAK,CAAC;YAAE,YAAY;QAAQ;QAE5E,IAAI,CAAC,YAAY;YACf,MAAM,QAAQ,MAAM,CAAC;gBAAE,YAAY;gBAAS,MAAM;oBAAE,OAAO;gBAAS;YAAE;QACxE;IACF;IACA,IAAI,CAAA,GAAA,yXAAA,CAAA,kBAAe,AAAD,EAAE;QAClB,MAAM;YACJ,kBAAkB,QAAQ,GAAG,CAAC,YAAY,IAAI;QAChD;IACF;IACA,OAAA,mGAAA,CAAA,UAAK;IACL,SAAS,EAAE;AACb"}},
    {"offset": {"line": 346, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 408, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/payload/src/app/%28payload%29/admin/importMap.js"],"sourcesContent":["export const importMap = {}\n"],"names":[],"mappings":";;;AAAO,MAAM,YAAY,CAAC"}},
    {"offset": {"line": 412, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 418, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/payload/src/app/%28payload%29/layout.tsx"],"sourcesContent":["/* THIS FILE WAS GENERATED AUTOMATICALLY BY PAYLOAD. */\n/* DO NOT MODIFY IT BECAUSE IT COULD BE REWRITTEN AT ANY TIME. */\nimport config from '@payload-config'\nimport '@payloadcms/next/css'\nimport type { ServerFunctionClient } from 'payload'\nimport { handleServerFunctions, RootLayout } from '@payloadcms/next/layouts'\nimport React from 'react'\n\nimport { importMap } from './admin/importMap.js'\nimport './custom.scss'\n\ntype Args = {\n  children: React.ReactNode\n}\n\nconst serverFunction: ServerFunctionClient = async function (args) {\n  'use server'\n  return handleServerFunctions({\n    ...args,\n    config,\n    importMap,\n  })\n}\n\nconst Layout = ({ children }: Args) => (\n  <RootLayout config={config} importMap={importMap} serverFunction={serverFunction}>\n    {children}\n  </RootLayout>\n)\n\nexport default Layout\n"],"names":[],"mappings":"AAAA,qDAAqD,GACrD,+DAA+D;;;;;;;AAC/D;AAGA;AAGA;AAHA;AAAA;;;;;;;;;MAU6C,uCAMzC,GANyC,wBAAA,eAAvC,eAAuD,IAAI;IAE/D,OAAO,CAAA,GAAA,qYAAA,CAAA,wBAAqB,AAAD,EAAE;QAC3B,GAAG,IAAI;QACP,QAAA,mIAAA,CAAA,UAAM;QACN,WAAA,0JAAA,CAAA,YAAS;IACX;AACF;AAPA,MAAM,iBAAuC,mYAAA;AAS7C,MAAM,SAAS,CAAC,EAAE,QAAQ,EAAQ,iBAChC,kYAAC,2XAAA,CAAA,aAAU;QAAC,QAAQ,mIAAA,CAAA,UAAM;QAAE,WAAW,0JAAA,CAAA,YAAS;QAAE,gBAAgB;kBAC/D;;;;;;uCAIU"}},
    {"offset": {"line": 457, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}