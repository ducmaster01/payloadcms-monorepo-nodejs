{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/auth/defaultAccess.ts"],"sourcesContent":["import type { PayloadRequest } from '../types/index.js'\n\nexport default ({ req: { user } }: { req: PayloadRequest }): boolean => Boolean(user)\n"],"names":["req","user","Boolean"],"mappings":";;;uCAEe,CAAC,EAAEA,KAAK,EAAEC,IAAI,EAAE,EAA2B,GAAcC,QAAQD,KAAI,EAAC","ignoreList":[0]}},
    {"offset": {"line": 12, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 18, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/auth/cookies.ts"],"sourcesContent":["import type { SanitizedCollectionConfig } from './../collections/config/types.js'\n\ntype CookieOptions = {\n  domain?: string\n  expires?: Date\n  httpOnly?: boolean\n  maxAge?: number\n  name: string\n  path?: string\n  returnCookieAsObject: boolean\n  sameSite?: 'Lax' | 'None' | 'Strict'\n  secure?: boolean\n  value?: string\n}\n\ntype CookieObject = {\n  domain?: string\n  expires?: string\n  httpOnly?: boolean\n  maxAge?: number\n  name: string\n  path?: string\n  sameSite?: 'Lax' | 'None' | 'Strict'\n  secure?: boolean\n  value: string | undefined\n}\n\nexport const generateCookie = <ReturnCookieAsObject = boolean>(\n  args: CookieOptions,\n): ReturnCookieAsObject extends true ? CookieObject : string => {\n  const {\n    name,\n    domain,\n    expires,\n    httpOnly,\n    maxAge,\n    path,\n    returnCookieAsObject,\n    sameSite,\n    secure: secureArg,\n    value,\n  } = args\n\n  let cookieString = `${name}=${value || ''}`\n  const cookieObject: CookieObject = {\n    name,\n    value,\n  }\n\n  const secure = secureArg || sameSite === 'None'\n\n  if (expires) {\n    if (returnCookieAsObject) {\n      cookieObject.expires = expires.toUTCString()\n    } else {\n      cookieString += `; Expires=${expires.toUTCString()}`\n    }\n  }\n\n  if (maxAge) {\n    if (returnCookieAsObject) {\n      cookieObject.maxAge = maxAge\n    } else {\n      cookieString += `; Max-Age=${maxAge.toString()}`\n    }\n  }\n\n  if (domain) {\n    if (returnCookieAsObject) {\n      cookieObject.domain = domain\n    } else {\n      cookieString += `; Domain=${domain}`\n    }\n  }\n\n  if (path) {\n    if (returnCookieAsObject) {\n      cookieObject.path = path\n    } else {\n      cookieString += `; Path=${path}`\n    }\n  }\n\n  if (secure) {\n    if (returnCookieAsObject) {\n      cookieObject.secure = secure\n    } else {\n      cookieString += `; Secure=${secure}`\n    }\n  }\n\n  if (httpOnly) {\n    if (returnCookieAsObject) {\n      cookieObject.httpOnly = httpOnly\n    } else {\n      cookieString += `; HttpOnly=${httpOnly}`\n    }\n  }\n\n  if (sameSite) {\n    if (returnCookieAsObject) {\n      cookieObject.sameSite = sameSite\n    } else {\n      cookieString += `; SameSite=${sameSite}`\n    }\n  }\n\n  return (returnCookieAsObject ? cookieObject : cookieString) as ReturnCookieAsObject extends true\n    ? CookieObject\n    : string\n}\ntype GetCookieExpirationArgs = {\n  /*\n    The number of seconds until the cookie expires\n    @default 7200 seconds (2 hours)\n  */\n  seconds: number\n}\nexport const getCookieExpiration = ({ seconds = 7200 }: GetCookieExpirationArgs) => {\n  const currentTime = new Date()\n  currentTime.setSeconds(currentTime.getSeconds() + seconds)\n  return currentTime\n}\n\ntype GeneratePayloadCookieArgs = {\n  /* The auth collection config */\n  collectionAuthConfig: SanitizedCollectionConfig['auth']\n  /* Prefix to scope the cookie */\n  cookiePrefix: string\n  /* The returnAs value */\n  returnCookieAsObject?: boolean\n  /* The token to be stored in the cookie */\n  token: string\n}\nexport const generatePayloadCookie = <T extends GeneratePayloadCookieArgs>({\n  collectionAuthConfig,\n  cookiePrefix,\n  returnCookieAsObject = false,\n  token,\n}: T): T['returnCookieAsObject'] extends true ? CookieObject : string => {\n  const sameSite =\n    typeof collectionAuthConfig.cookies.sameSite === 'string'\n      ? collectionAuthConfig.cookies.sameSite\n      : collectionAuthConfig.cookies.sameSite\n        ? 'Strict'\n        : undefined\n\n  return generateCookie<T['returnCookieAsObject']>({\n    name: `${cookiePrefix}-token`,\n    domain: collectionAuthConfig.cookies.domain ?? undefined,\n    expires: getCookieExpiration({ seconds: collectionAuthConfig.tokenExpiration }),\n    httpOnly: true,\n    path: '/',\n    returnCookieAsObject,\n    sameSite,\n    secure: collectionAuthConfig.cookies.secure,\n    value: token,\n  })\n}\n\nexport const generateExpiredPayloadCookie = <T extends Omit<GeneratePayloadCookieArgs, 'token'>>({\n  collectionAuthConfig,\n  cookiePrefix,\n  returnCookieAsObject = false,\n}: T): T['returnCookieAsObject'] extends true ? CookieObject : string => {\n  const sameSite =\n    typeof collectionAuthConfig.cookies.sameSite === 'string'\n      ? collectionAuthConfig.cookies.sameSite\n      : collectionAuthConfig.cookies.sameSite\n        ? 'Strict'\n        : undefined\n\n  const expires = new Date(Date.now() - 1000)\n\n  return generateCookie<T['returnCookieAsObject']>({\n    name: `${cookiePrefix}-token`,\n    domain: collectionAuthConfig.cookies.domain ?? undefined,\n    expires,\n    httpOnly: true,\n    path: '/',\n    returnCookieAsObject,\n    sameSite,\n    secure: collectionAuthConfig.cookies.secure,\n  })\n}\n\nexport const parseCookies = (headers: Request['headers']): Map<string, string> => {\n  const cookieMap = new Map<string, string>()\n  const cookie = headers.get('Cookie')\n\n  if (cookie) {\n    cookie.split(';').forEach((cookie) => {\n      const parts = cookie.split('=')\n      const key = parts.shift()?.trim()\n      const encodedValue = parts.join('=')\n\n      try {\n        const decodedValue = decodeURI(encodedValue)\n        cookieMap.set(key, decodedValue)\n      } catch (ignore) {\n        return null\n      }\n    })\n  }\n\n  return cookieMap\n}\n"],"names":["generateCookie","args","name","domain","expires","httpOnly","maxAge","path","returnCookieAsObject","sameSite","secure","secureArg","value","cookieString","cookieObject","toUTCString","toString","getCookieExpiration","seconds","currentTime","Date","setSeconds","getSeconds","generatePayloadCookie","collectionAuthConfig","cookiePrefix","token","cookies","undefined","tokenExpiration","generateExpiredPayloadCookie","now","parseCookies","headers","cookieMap","Map","cookie","get","split","forEach","parts","key","shift","trim","encodedValue","join","decodedValue","decodeURI","set","ignore"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 137, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/auth/getLoginOptions.ts"],"sourcesContent":["import type { Auth } from './types.js'\n\nexport const getLoginOptions = (\n  loginWithUsername: Auth['loginWithUsername'],\n): {\n  canLoginWithEmail: boolean\n  canLoginWithUsername: boolean\n} => {\n  return {\n    canLoginWithEmail: !loginWithUsername || loginWithUsername.allowEmailLogin,\n    canLoginWithUsername: Boolean(loginWithUsername),\n  }\n}\n"],"names":["getLoginOptions","loginWithUsername","canLoginWithEmail","allowEmailLogin","canLoginWithUsername","Boolean"],"mappings":";;;AAEO,MAAMA,kBAAkB,CAC7BC;IAKA,OAAO;QACLC,mBAAmB,CAACD,qBAAqBA,kBAAkBE,eAAe;QAC1EC,sBAAsBC,QAAQJ;IAChC;AACF,EAAC","ignoreList":[0]}},
    {"offset": {"line": 152, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 158, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/auth/types.ts"],"sourcesContent":["import type { DeepRequired } from 'ts-essentials'\n\nimport type { CollectionSlug, GlobalSlug, Payload } from '../index.js'\nimport type { PayloadRequest, Where } from '../types/index.js'\n\n/**\n * A permission object that can be used to determine if a user has access to a specific operation.\n */\nexport type Permission = {\n  permission: boolean\n  where?: Where\n}\n\nexport type FieldsPermissions = {\n  [fieldName: string]: FieldPermissions\n}\n\nexport type BlockPermissions = {\n  create: Permission\n  fields: FieldsPermissions\n  read: Permission\n  update: Permission\n}\n\nexport type SanitizedBlockPermissions =\n  | {\n      fields: SanitizedFieldsPermissions\n    }\n  | true\n\nexport type BlocksPermissions = {\n  [blockSlug: string]: BlockPermissions\n}\n\nexport type SanitizedBlocksPermissions =\n  | {\n      [blockSlug: string]: SanitizedBlockPermissions\n    }\n  | true\n\nexport type FieldPermissions = {\n  blocks?: BlocksPermissions\n  create: Permission\n  fields?: FieldsPermissions\n  read: Permission\n  update: Permission\n}\n\nexport type SanitizedFieldPermissions =\n  | {\n      blocks?: SanitizedBlocksPermissions\n      create: true\n      fields?: SanitizedFieldsPermissions\n      read: true\n      update: true\n    }\n  | true\n\nexport type SanitizedFieldsPermissions =\n  | {\n      [fieldName: string]: SanitizedFieldPermissions\n    }\n  | true\n\nexport type CollectionPermission = {\n  create: Permission\n  delete: Permission\n  fields: FieldsPermissions\n  read: Permission\n  readVersions?: Permission\n  update: Permission\n}\n\nexport type SanitizedCollectionPermission = {\n  create?: true\n  delete?: true\n  fields: SanitizedFieldsPermissions\n  read?: true\n  readVersions?: true\n  update?: true\n}\n\nexport type GlobalPermission = {\n  fields: FieldsPermissions\n  read: Permission\n  readVersions?: Permission\n  update: Permission\n}\n\nexport type SanitizedGlobalPermission = {\n  fields: SanitizedFieldsPermissions\n  read?: true\n  readVersions?: true\n  update?: true\n}\n\nexport type DocumentPermissions = CollectionPermission | GlobalPermission\n\nexport type SanitizedDocumentPermissions = SanitizedCollectionPermission | SanitizedGlobalPermission\n\nexport type Permissions = {\n  canAccessAdmin: boolean\n  collections?: Record<CollectionSlug, CollectionPermission>\n  globals?: Record<GlobalSlug, GlobalPermission>\n}\n\nexport type SanitizedPermissions = {\n  canAccessAdmin?: boolean\n  collections?: {\n    [collectionSlug: string]: SanitizedCollectionPermission\n  }\n  globals?: {\n    [globalSlug: string]: SanitizedGlobalPermission\n  }\n}\n\ntype BaseUser = {\n  collection: string\n  email?: string\n  id: number | string\n  username?: string\n}\n\nexport type User = {\n  [key: string]: any\n} & BaseUser\n\n/**\n * `collection` is not available one the client. It's only available on the server (req.user)\n * On the client, you can access the collection via config.admin.user. Config can be accessed using the useConfig() hook\n */\nexport type ClientUser = {\n  [key: string]: any\n} & BaseUser\n\ntype GenerateVerifyEmailHTML<TUser = any> = (args: {\n  req: PayloadRequest\n  token: string\n  user: TUser\n}) => Promise<string> | string\n\ntype GenerateVerifyEmailSubject<TUser = any> = (args: {\n  req: PayloadRequest\n  token: string\n  user: TUser\n}) => Promise<string> | string\n\ntype GenerateForgotPasswordEmailHTML<TUser = any> = (args?: {\n  req?: PayloadRequest\n  token?: string\n  user?: TUser\n}) => Promise<string> | string\n\ntype GenerateForgotPasswordEmailSubject<TUser = any> = (args?: {\n  req?: PayloadRequest\n  token?: string\n  user?: TUser\n}) => Promise<string> | string\n\nexport type AuthStrategyFunctionArgs = {\n  headers: Request['headers']\n  isGraphQL?: boolean\n  payload: Payload\n}\n\nexport type AuthStrategyResult = {\n  responseHeaders?: Headers\n  user: null | User\n}\n\nexport type AuthStrategyFunction = (\n  args: AuthStrategyFunctionArgs,\n) => AuthStrategyResult | Promise<AuthStrategyResult>\nexport type AuthStrategy = {\n  authenticate: AuthStrategyFunction\n  name: string\n}\n\nexport type LoginWithUsernameOptions =\n  | {\n      allowEmailLogin?: false\n      requireEmail?: boolean\n      // If `allowEmailLogin` is false, `requireUsername` must be true (default: true)\n      requireUsername?: true\n    }\n  | {\n      allowEmailLogin?: true\n      requireEmail?: boolean\n      requireUsername?: boolean\n    }\n\nexport interface IncomingAuthType {\n  /**\n   * Set cookie options, including secure, sameSite, and domain. For advanced users.\n   */\n  cookies?: {\n    domain?: string\n    sameSite?: 'Lax' | 'None' | 'Strict' | boolean\n    secure?: boolean\n  }\n  /**\n   * How many levels deep a user document should be populated when creating the JWT and binding the user to the req. Defaults to 0 and should only be modified if absolutely necessary, as this will affect performance.\n   * @default 0\n   */\n  depth?: number\n  /**\n   * Advanced - disable Payload's built-in local auth strategy. Only use this property if you have replaced Payload's auth mechanisms with your own.\n   */\n  disableLocalStrategy?:\n    | {\n        /**\n         * Include auth fields on the collection even though the local strategy is disabled.\n         * Useful when you do not want the database or types to vary depending on the auth configuration.\n         */\n        enableFields?: true\n        optionalPassword?: true\n      }\n    | true\n  /**\n   * Customize the way that the forgotPassword operation functions.\n   * @link https://payloadcms.com/docs/authentication/email#forgot-password\n   */\n  forgotPassword?: {\n    /**\n     * The number of milliseconds that the forgot password token should be valid for.\n     * @default 3600000 // 1 hour\n     */\n    expiration?: number\n    generateEmailHTML?: GenerateForgotPasswordEmailHTML\n    generateEmailSubject?: GenerateForgotPasswordEmailSubject\n  }\n  /**\n   * Set the time (in milliseconds) that a user should be locked out if they fail authentication more times than maxLoginAttempts allows for.\n   */\n  lockTime?: number\n  /**\n   * Ability to allow users to login with username/password.\n   *\n   * @link https://payloadcms.com/docs/authentication/overview#login-with-username\n   */\n  loginWithUsername?: boolean | LoginWithUsernameOptions\n  /**\n   * Only allow a user to attempt logging in X amount of times. Automatically locks out a user from authenticating if this limit is passed. Set to 0 to disable.\n   */\n  maxLoginAttempts?: number\n  /***\n   * Set to true if you want to remove the token from the returned authentication API responses such as login or refresh.\n   */\n  removeTokenFromResponses?: true\n  /**\n   * Advanced - an array of custom authentification strategies to extend this collection's authentication with.\n   * @link https://payloadcms.com/docs/authentication/custom-strategies\n   */\n  strategies?: AuthStrategy[]\n  /**\n   * Controls how many seconds the token will be valid for. Default is 2 hours.\n   * @default 7200\n   * @link https://payloadcms.com/docs/authentication/overview#config-options\n   */\n  tokenExpiration?: number\n  /**\n   * Payload Authentication provides for API keys to be set on each user within an Authentication-enabled Collection.\n   * @default false\n   * @link https://payloadcms.com/docs/authentication/api-keys\n   */\n  useAPIKey?: boolean\n  /**\n   * Set to true or pass an object with verification options to require users to verify by email before they are allowed to log into your app.\n   * @link https://payloadcms.com/docs/authentication/email#email-verification\n   */\n  verify?:\n    | {\n        generateEmailHTML?: GenerateVerifyEmailHTML\n        generateEmailSubject?: GenerateVerifyEmailSubject\n      }\n    | boolean\n}\n\nexport type VerifyConfig = {\n  generateEmailHTML?: GenerateVerifyEmailHTML\n  generateEmailSubject?: GenerateVerifyEmailSubject\n}\n\nexport interface Auth\n  extends Omit<DeepRequired<IncomingAuthType>, 'forgotPassword' | 'loginWithUsername' | 'verify'> {\n  forgotPassword?: {\n    expiration?: number\n    generateEmailHTML?: GenerateForgotPasswordEmailHTML\n    generateEmailSubject?: GenerateForgotPasswordEmailSubject\n  }\n  loginWithUsername: false | LoginWithUsernameOptions\n  verify?: boolean | VerifyConfig\n}\n\nexport function hasWhereAccessResult(result: boolean | Where): result is Where {\n  return result && typeof result === 'object'\n}\n"],"names":["hasWhereAccessResult","result"],"mappings":";;;AAsSO,SAASA,qBAAqBC,MAAuB;IAC1D,OAAOA,UAAU,OAAOA,WAAW;AACrC","ignoreList":[0]}},
    {"offset": {"line": 164, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 170, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/auth/defaultUser.ts"],"sourcesContent":["import type { CollectionConfig } from '../collections/config/types.js'\n\nexport const defaultUserCollection: CollectionConfig = {\n  slug: 'users',\n  admin: {\n    useAsTitle: 'email',\n  },\n  auth: {\n    tokenExpiration: 7200,\n  },\n  fields: [],\n  labels: {\n    plural: ({ t }) => t('general:users'),\n    singular: ({ t }) => t('general:user'),\n  },\n}\n"],"names":["defaultUserCollection","slug","admin","useAsTitle","auth","tokenExpiration","fields","labels","plural","t","singular"],"mappings":";;;AAEO,MAAMA,wBAA0C;IACrDC,MAAM;IACNC,OAAO;QACLC,YAAY;IACd;IACAC,MAAM;QACJC,iBAAiB;IACnB;IACAC,QAAQ,EAAE;IACVC,QAAQ;QACNC,QAAQ,CAAC,EAAEC,CAAC,EAAE,GAAKA,EAAE;QACrBC,UAAU,CAAC,EAAED,CAAC,EAAE,GAAKA,EAAE;IACzB;AACF,EAAC","ignoreList":[0]}},
    {"offset": {"line": 187, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 193, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/auth/baseFields/apiKey.ts"],"sourcesContent":["import crypto from 'crypto'\n\nimport type { Field, FieldHook } from '../../fields/config/types.js'\n\nconst encryptKey: FieldHook = ({ req, value }) =>\n  value ? req.payload.encrypt(value as string) : null\nconst decryptKey: FieldHook = ({ req, value }) =>\n  value ? req.payload.decrypt(value as string) : undefined\n\nexport const apiKeyFields = [\n  {\n    name: 'enableAPIKey',\n    type: 'checkbox',\n    admin: {\n      components: {\n        Field: false,\n      },\n    },\n    label: ({ t }) => t('authentication:enableAPIKey'),\n  },\n  {\n    name: 'apiKey',\n    type: 'text',\n    admin: {\n      components: {\n        Field: false,\n      },\n    },\n    hooks: {\n      afterRead: [decryptKey],\n      beforeChange: [encryptKey],\n    },\n    label: ({ t }) => t('authentication:apiKey'),\n  },\n  {\n    name: 'apiKeyIndex',\n    type: 'text',\n    admin: {\n      disabled: true,\n    },\n    hidden: true,\n    hooks: {\n      beforeValidate: [\n        ({ data, req, value }) => {\n          if (data?.apiKey === false || data?.apiKey === null) {\n            return null\n          }\n          if (data?.enableAPIKey === false || data?.enableAPIKey === null) {\n            return null\n          }\n          if (data?.apiKey) {\n            return crypto\n              .createHmac('sha1', req.payload.secret)\n              .update(data.apiKey as string)\n              .digest('hex')\n          }\n          return value\n        },\n      ],\n    },\n  },\n] as Field[]\n"],"names":["crypto","encryptKey","req","value","payload","encrypt","decryptKey","decrypt","undefined","apiKeyFields","name","type","admin","components","Field","label","t","hooks","afterRead","beforeChange","disabled","hidden","beforeValidate","data","apiKey","enableAPIKey","createHmac","secret","update","digest"],"mappings":";;;AAAA,OAAOA,YAAY,SAAQ;;AAI3B,MAAMC,aAAwB,CAAC,EAAEC,GAAG,EAAEC,KAAK,EAAE,GAC3CA,QAAQD,IAAIE,OAAO,CAACC,OAAO,CAACF,SAAmB;AACjD,MAAMG,aAAwB,CAAC,EAAEJ,GAAG,EAAEC,KAAK,EAAE,GAC3CA,QAAQD,IAAIE,OAAO,CAACG,OAAO,CAACJ,SAAmBK;AAE1C,MAAMC,eAAe;IAC1B;QACEC,MAAM;QACNC,MAAM;QACNC,OAAO;YACLC,YAAY;gBACVC,OAAO;YACT;QACF;QACAC,OAAO,CAAC,EAAEC,CAAC,EAAE,GAAKA,EAAE;IACtB;IACA;QACEN,MAAM;QACNC,MAAM;QACNC,OAAO;YACLC,YAAY;gBACVC,OAAO;YACT;QACF;QACAG,OAAO;YACLC,WAAW;gBAACZ;aAAW;YACvBa,cAAc;gBAAClB;aAAW;QAC5B;QACAc,OAAO,CAAC,EAAEC,CAAC,EAAE,GAAKA,EAAE;IACtB;IACA;QACEN,MAAM;QACNC,MAAM;QACNC,OAAO;YACLQ,UAAU;QACZ;QACAC,QAAQ;QACRJ,OAAO;YACLK,gBAAgB;gBACd,CAAC,EAAEC,IAAI,EAAErB,GAAG,EAAEC,KAAK,EAAE;oBACnB,IAAIoB,MAAMC,WAAW,SAASD,MAAMC,WAAW,MAAM;wBACnD,OAAO;oBACT;oBACA,IAAID,MAAME,iBAAiB,SAASF,MAAME,iBAAiB,MAAM;wBAC/D,OAAO;oBACT;oBACA,IAAIF,MAAMC,QAAQ;wBAChB,6GAAOxB,UAAAA,CACJ0B,UAAU,CAAC,QAAQxB,IAAIE,OAAO,CAACuB,MAAM,EACrCC,MAAM,CAACL,KAAKC,MAAM,EAClBK,MAAM,CAAC;oBACZ;oBACA,OAAO1B;gBACT;aACD;QACH;IACF;CACD,CAAW","ignoreList":[0]}},
    {"offset": {"line": 254, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 260, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/auth/baseFields/email.ts"],"sourcesContent":["import type { EmailField } from '../../fields/config/types.js'\n\nimport { email } from '../../fields/validations.js'\n\nexport const emailFieldConfig: EmailField = {\n  name: 'email',\n  type: 'email',\n  admin: {\n    components: {\n      Field: false,\n    },\n  },\n  hooks: {\n    beforeChange: [\n      ({ value }) => {\n        if (value) {\n          return value.toLowerCase().trim()\n        }\n      },\n    ],\n  },\n  label: ({ t }) => t('general:email'),\n  required: true,\n  unique: true,\n  validate: email,\n}\n"],"names":["email","emailFieldConfig","name","type","admin","components","Field","hooks","beforeChange","value","toLowerCase","trim","label","t","required","unique","validate"],"mappings":";;;AAEA,SAASA,KAAK,QAAQ,8BAA6B;;AAE5C,MAAMC,mBAA+B;IAC1CC,MAAM;IACNC,MAAM;IACNC,OAAO;QACLC,YAAY;YACVC,OAAO;QACT;IACF;IACAC,OAAO;QACLC,cAAc;YACZ,CAAC,EAAEC,KAAK,EAAE;gBACR,IAAIA,OAAO;oBACT,OAAOA,MAAMC,WAAW,GAAGC,IAAI;gBACjC;YACF;SACD;IACH;IACAC,OAAO,CAAC,EAAEC,CAAC,EAAE,GAAKA,EAAE;IACpBC,UAAU;IACVC,QAAQ;IACRC,yXAAUhB,QAAAA;AACZ,EAAC","ignoreList":[0]}},
    {"offset": {"line": 287, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 293, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/auth/baseFields/username.ts"],"sourcesContent":["import type { TextField } from '../../fields/config/types.js'\n\nimport { username } from '../../fields/validations.js'\n\nexport const usernameFieldConfig: TextField = {\n  name: 'username',\n  type: 'text',\n  admin: {\n    components: {\n      Field: false,\n    },\n  },\n  hooks: {\n    beforeChange: [\n      ({ value }) => {\n        if (value) {\n          return value.toLowerCase().trim()\n        }\n      },\n    ],\n  },\n  label: ({ t }) => t('authentication:username'),\n  required: true,\n  unique: true,\n  validate: username,\n}\n"],"names":["username","usernameFieldConfig","name","type","admin","components","Field","hooks","beforeChange","value","toLowerCase","trim","label","t","required","unique","validate"],"mappings":";;;AAEA,SAASA,QAAQ,QAAQ,8BAA6B;;AAE/C,MAAMC,sBAAiC;IAC5CC,MAAM;IACNC,MAAM;IACNC,OAAO;QACLC,YAAY;YACVC,OAAO;QACT;IACF;IACAC,OAAO;QACLC,cAAc;YACZ,CAAC,EAAEC,KAAK,EAAE;gBACR,IAAIA,OAAO;oBACT,OAAOA,MAAMC,WAAW,GAAGC,IAAI;gBACjC;YACF;SACD;IACH;IACAC,OAAO,CAAC,EAAEC,CAAC,EAAE,GAAKA,EAAE;IACpBC,UAAU;IACVC,QAAQ;IACRC,yXAAUhB,WAAAA;AACZ,EAAC","ignoreList":[0]}},
    {"offset": {"line": 320, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 326, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/auth/baseFields/auth.ts"],"sourcesContent":["import type { Field } from '../../fields/config/types.js'\n\nexport const baseAuthFields: Field[] = [\n  {\n    name: 'resetPasswordToken',\n    type: 'text',\n    hidden: true,\n  },\n  {\n    name: 'resetPasswordExpiration',\n    type: 'date',\n    hidden: true,\n  },\n  {\n    name: 'salt',\n    type: 'text',\n    hidden: true,\n  },\n  {\n    name: 'hash',\n    type: 'text',\n    hidden: true,\n  },\n]\n"],"names":["baseAuthFields","name","type","hidden"],"mappings":";;;AAEO,MAAMA,iBAA0B;IACrC;QACEC,MAAM;QACNC,MAAM;QACNC,QAAQ;IACV;IACA;QACEF,MAAM;QACNC,MAAM;QACNC,QAAQ;IACV;IACA;QACEF,MAAM;QACNC,MAAM;QACNC,QAAQ;IACV;IACA;QACEF,MAAM;QACNC,MAAM;QACNC,QAAQ;IACV;CACD,CAAA","ignoreList":[0]}},
    {"offset": {"line": 351, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 357, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/auth/baseFields/verification.ts"],"sourcesContent":["import type { Field, FieldHook } from '../../fields/config/types.js'\n\nconst autoRemoveVerificationToken: FieldHook = ({ data, operation, originalDoc, value }) => {\n  // If a user manually sets `_verified` to true,\n  // and it was `false`, set _verificationToken to `null`.\n  // This is useful because the admin panel\n  // allows users to set `_verified` to true manually\n\n  if (operation === 'update') {\n    if (data?._verified === true && originalDoc?._verified === false) {\n      return null\n    }\n  }\n\n  return value\n}\n\nexport const verificationFields: Field[] = [\n  {\n    name: '_verified',\n    type: 'checkbox',\n    access: {\n      create: ({ req: { user } }) => Boolean(user),\n      read: ({ req: { user } }) => Boolean(user),\n      update: ({ req: { user } }) => Boolean(user),\n    },\n    admin: {\n      components: {\n        Field: false,\n      },\n    },\n    label: ({ t }) => t('authentication:verified'),\n  },\n  {\n    name: '_verificationToken',\n    type: 'text',\n    hidden: true,\n    hooks: {\n      beforeChange: [autoRemoveVerificationToken],\n    },\n  },\n] as Field[]\n"],"names":["autoRemoveVerificationToken","data","operation","originalDoc","value","_verified","verificationFields","name","type","access","create","req","user","Boolean","read","update","admin","components","Field","label","t","hidden","hooks","beforeChange"],"mappings":";;;AAEA,MAAMA,8BAAyC,CAAC,EAAEC,IAAI,EAAEC,SAAS,EAAEC,WAAW,EAAEC,KAAK,EAAE;IACrF,+CAA+C;IAC/C,wDAAwD;IACxD,yCAAyC;IACzC,mDAAmD;IAEnD,IAAIF,cAAc,UAAU;QAC1B,IAAID,MAAMI,cAAc,QAAQF,aAAaE,cAAc,OAAO;YAChE,OAAO;QACT;IACF;IAEA,OAAOD;AACT;AAEO,MAAME,qBAA8B;IACzC;QACEC,MAAM;QACNC,MAAM;QACNC,QAAQ;YACNC,QAAQ,CAAC,EAAEC,KAAK,EAAEC,IAAI,EAAE,EAAE,GAAKC,QAAQD;YACvCE,MAAM,CAAC,EAAEH,KAAK,EAAEC,IAAI,EAAE,EAAE,GAAKC,QAAQD;YACrCG,QAAQ,CAAC,EAAEJ,KAAK,EAAEC,IAAI,EAAE,EAAE,GAAKC,QAAQD;QACzC;QACAI,OAAO;YACLC,YAAY;gBACVC,OAAO;YACT;QACF;QACAC,OAAO,CAAC,EAAEC,CAAC,EAAE,GAAKA,EAAE;IACtB;IACA;QACEb,MAAM;QACNC,MAAM;QACNa,QAAQ;QACRC,OAAO;YACLC,cAAc;gBAACvB;aAA4B;QAC7C;IACF;CACD,CAAW","ignoreList":[0]}},
    {"offset": {"line": 399, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 405, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/auth/baseFields/accountLock.ts"],"sourcesContent":["import type { Field } from '../../fields/config/types.js'\n\nexport const accountLockFields: Field[] = [\n  {\n    name: 'loginAttempts',\n    type: 'number',\n    defaultValue: 0,\n    hidden: true,\n  },\n  {\n    name: 'lockUntil',\n    type: 'date',\n    hidden: true,\n  },\n] as Field[]\n"],"names":["accountLockFields","name","type","defaultValue","hidden"],"mappings":";;;AAEO,MAAMA,oBAA6B;IACxC;QACEC,MAAM;QACNC,MAAM;QACNC,cAAc;QACdC,QAAQ;IACV;IACA;QACEH,MAAM;QACNC,MAAM;QACNE,QAAQ;IACV;CACD,CAAW","ignoreList":[0]}},
    {"offset": {"line": 421, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 427, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/auth/getAuthFields.ts"],"sourcesContent":["import type { Field, TextField } from '../fields/config/types.js'\nimport type { IncomingAuthType } from './types.js'\n\nimport { accountLockFields } from './baseFields/accountLock.js'\nimport { apiKeyFields } from './baseFields/apiKey.js'\nimport { baseAuthFields } from './baseFields/auth.js'\nimport { emailFieldConfig } from './baseFields/email.js'\nimport { usernameFieldConfig } from './baseFields/username.js'\nimport { verificationFields } from './baseFields/verification.js'\n\nexport const getBaseAuthFields = (authConfig: IncomingAuthType): Field[] => {\n  const authFields: Field[] = []\n\n  if (authConfig.useAPIKey) {\n    authFields.push(...apiKeyFields)\n  }\n\n  if (\n    !authConfig.disableLocalStrategy ||\n    (typeof authConfig.disableLocalStrategy === 'object' &&\n      authConfig.disableLocalStrategy.enableFields)\n  ) {\n    const emailField = { ...emailFieldConfig }\n    let usernameField: TextField | undefined\n\n    if (authConfig.loginWithUsername) {\n      usernameField = { ...usernameFieldConfig }\n      if (typeof authConfig.loginWithUsername === 'object') {\n        if (authConfig.loginWithUsername.requireEmail === false) {\n          emailField.required = false\n        }\n        if (authConfig.loginWithUsername.requireUsername === false) {\n          usernameField.required = false\n        }\n        if (authConfig.loginWithUsername.allowEmailLogin === false) {\n          emailField.unique = false\n        }\n      }\n    }\n\n    authFields.push(emailField)\n    if (usernameField) {\n      authFields.push(usernameField)\n    }\n\n    authFields.push(...baseAuthFields)\n\n    if (authConfig.verify) {\n      authFields.push(...verificationFields)\n    }\n\n    if (authConfig?.maxLoginAttempts && authConfig.maxLoginAttempts > 0) {\n      authFields.push(...accountLockFields)\n    }\n  }\n\n  return authFields\n}\n"],"names":["accountLockFields","apiKeyFields","baseAuthFields","emailFieldConfig","usernameFieldConfig","verificationFields","getBaseAuthFields","authConfig","authFields","useAPIKey","push","disableLocalStrategy","enableFields","emailField","usernameField","loginWithUsername","requireEmail","required","requireUsername","allowEmailLogin","unique","verify","maxLoginAttempts"],"mappings":";;;AAIA,SAASC,YAAY,QAAQ,yBAAwB;AAErD,SAASE,gBAAgB,QAAQ,wBAAuB;AACxD,SAASC,mBAAmB,QAAQ,2BAA0B;AAF9D,SAASF,cAAc,QAAQ,uBAAsB;AAGrD,SAASG,kBAAkB,QAAQ,+BAA8B;AALjE,SAASL,iBAAiB,QAAQ,8BAA6B;;;;;;;AAOxD,MAAMM,oBAAoB,CAACC;IAChC,MAAMC,aAAsB,EAAE;IAE9B,IAAID,WAAWE,SAAS,EAAE;QACxBD,WAAWE,IAAI,0XAAIT,eAAAA;IACrB;IAEA,IACE,CAACM,WAAWI,oBAAoB,IAC/B,OAAOJ,WAAWI,oBAAoB,KAAK,YAC1CJ,WAAWI,oBAAoB,CAACC,YAAY,EAC9C;QACA,MAAMC,aAAa;YAAE,uXAAGV,oBAAgB;QAAC;QACzC,IAAIW;QAEJ,IAAIP,WAAWQ,iBAAiB,EAAE;YAChCD,gBAAgB;gBAAE,2XAAGV,sBAAmB;YAAC;YACzC,IAAI,OAAOG,WAAWQ,iBAAiB,KAAK,UAAU;gBACpD,IAAIR,WAAWQ,iBAAiB,CAACC,YAAY,KAAK,OAAO;oBACvDH,WAAWI,QAAQ,GAAG;gBACxB;gBACA,IAAIV,WAAWQ,iBAAiB,CAACG,eAAe,KAAK,OAAO;oBAC1DJ,cAAcG,QAAQ,GAAG;gBAC3B;gBACA,IAAIV,WAAWQ,iBAAiB,CAACI,eAAe,KAAK,OAAO;oBAC1DN,WAAWO,MAAM,GAAG;gBACtB;YACF;QACF;QAEAZ,WAAWE,IAAI,CAACG;QAChB,IAAIC,eAAe;YACjBN,WAAWE,IAAI,CAACI;QAClB;QAEAN,WAAWE,IAAI,wXAAIR,iBAAAA;QAEnB,IAAIK,WAAWc,MAAM,EAAE;YACrBb,WAAWE,IAAI,gYAAIL,qBAAAA;QACrB;QAEA,IAAIE,YAAYe,oBAAoBf,WAAWe,gBAAgB,GAAG,GAAG;YACnEd,WAAWE,IAAI,+XAAIV,oBAAAA;QACrB;IACF;IAEA,OAAOQ;AACT,EAAC","ignoreList":[0]}},
    {"offset": {"line": 482, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 488, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/auth/operations/local/index.ts"],"sourcesContent":["import { auth } from './auth.js'\nimport { forgotPassword } from './forgotPassword.js'\nimport { login } from './login.js'\nimport { resetPassword } from './resetPassword.js'\nimport { unlock } from './unlock.js'\nimport { verifyEmail } from './verifyEmail.js'\n\nexport { auth, forgotPassword, login, resetPassword, unlock, verifyEmail }\n"],"names":["auth","forgotPassword","login","resetPassword","unlock","verifyEmail"],"mappings":"","ignoreList":[0]}},
    {"offset": {"line": 497, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 511, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/auth/executeAuthStrategies.ts"],"sourcesContent":["import type { AuthStrategyFunctionArgs, AuthStrategyResult } from './index.js'\n\nexport const executeAuthStrategies = async (\n  args: AuthStrategyFunctionArgs,\n): Promise<AuthStrategyResult> => {\n  return args.payload.authStrategies.reduce(\n    async (accumulatorPromise, strategy) => {\n      const result: AuthStrategyResult = await accumulatorPromise\n      if (!result.user) {\n        return strategy.authenticate(args)\n      }\n      return result\n    },\n    Promise.resolve({ user: null }),\n  )\n}\n"],"names":["executeAuthStrategies","args","payload","authStrategies","reduce","accumulatorPromise","strategy","result","user","authenticate","Promise","resolve"],"mappings":";;;AAEO,MAAMA,wBAAwB,OACnCC;IAEA,OAAOA,KAAKC,OAAO,CAACC,cAAc,CAACC,MAAM,CACvC,OAAOC,oBAAoBC;QACzB,MAAMC,SAA6B,MAAMF;QACzC,IAAI,CAACE,OAAOC,IAAI,EAAE;YAChB,OAAOF,SAASG,YAAY,CAACR;QAC/B;QACA,OAAOM;IACT,GACAG,QAAQC,OAAO,CAAC;QAAEH,MAAM;IAAK;AAEjC,EAAC","ignoreList":[0]}},
    {"offset": {"line": 525, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 531, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/auth/getAccessResults.ts"],"sourcesContent":["import type { AllOperations, PayloadRequest } from '../types/index.js'\nimport type { Permissions, SanitizedPermissions } from './types.js'\n\nimport { getEntityPolicies } from '../utilities/getEntityPolicies.js'\nimport { sanitizePermissions } from '../utilities/sanitizePermissions.js'\n\ntype GetAccessResultsArgs = {\n  req: PayloadRequest\n}\nexport async function getAccessResults({\n  req,\n}: GetAccessResultsArgs): Promise<SanitizedPermissions> {\n  const results = {} as Permissions\n  const { payload, user } = req\n\n  const isLoggedIn = !!user\n  const userCollectionConfig =\n    user && user.collection\n      ? payload.config.collections.find((collection) => collection.slug === user.collection)\n      : null\n\n  if (userCollectionConfig && payload.config.admin.user === user?.collection) {\n    results.canAccessAdmin = userCollectionConfig.access.admin\n      ? await userCollectionConfig.access.admin({ req })\n      : isLoggedIn\n  } else {\n    results.canAccessAdmin = false\n  }\n\n  await Promise.all(\n    payload.config.collections.map(async (collection) => {\n      const collectionOperations: AllOperations[] = ['create', 'read', 'update', 'delete']\n\n      if (\n        collection.auth &&\n        typeof collection.auth.maxLoginAttempts !== 'undefined' &&\n        collection.auth.maxLoginAttempts !== 0\n      ) {\n        collectionOperations.push('unlock')\n      }\n\n      if (collection.versions) {\n        collectionOperations.push('readVersions')\n      }\n\n      const collectionPolicy = await getEntityPolicies({\n        type: 'collection',\n        entity: collection,\n        operations: collectionOperations,\n        req,\n      })\n      results.collections = {\n        ...results.collections,\n        [collection.slug]: collectionPolicy,\n      }\n    }),\n  )\n\n  await Promise.all(\n    payload.config.globals.map(async (global) => {\n      const globalOperations: AllOperations[] = ['read', 'update']\n\n      if (global.versions) {\n        globalOperations.push('readVersions')\n      }\n\n      const globalPolicy = await getEntityPolicies({\n        type: 'global',\n        entity: global,\n        operations: globalOperations,\n        req,\n      })\n      results.globals = {\n        ...results.globals,\n        [global.slug]: globalPolicy,\n      }\n    }),\n  )\n\n  return sanitizePermissions(results)\n}\n"],"names":["getEntityPolicies","sanitizePermissions","getAccessResults","req","results","payload","user","isLoggedIn","userCollectionConfig","collection","config","collections","find","slug","admin","canAccessAdmin","access","Promise","all","map","collectionOperations","auth","maxLoginAttempts","push","versions","collectionPolicy","type","entity","operations","globals","global","globalOperations","globalPolicy"],"mappings":";;;AAGA,SAASA,iBAAiB,QAAQ,oCAAmC;AACrE,SAASC,mBAAmB,QAAQ,sCAAqC;;;AAKlE,eAAeC,iBAAiB,EACrCC,GAAG,EACkB;IACrB,MAAMC,UAAU,CAAC;IACjB,MAAM,EAAEC,OAAO,EAAEC,IAAI,EAAE,GAAGH;IAE1B,MAAMI,aAAa,CAAC,CAACD;IACrB,MAAME,uBACJF,QAAQA,KAAKG,UAAU,GACnBJ,QAAQK,MAAM,CAACC,WAAW,CAACC,IAAI,CAAC,CAACH,aAAeA,WAAWI,IAAI,KAAKP,KAAKG,UAAU,IACnF;IAEN,IAAID,wBAAwBH,QAAQK,MAAM,CAACI,KAAK,CAACR,IAAI,KAAKA,MAAMG,YAAY;QAC1EL,QAAQW,cAAc,GAAGP,qBAAqBQ,MAAM,CAACF,KAAK,GACtD,MAAMN,qBAAqBQ,MAAM,CAACF,KAAK,CAAC;YAAEX;QAAI,KAC9CI;IACN,OAAO;QACLH,QAAQW,cAAc,GAAG;IAC3B;IAEA,MAAME,QAAQC,GAAG,CACfb,QAAQK,MAAM,CAACC,WAAW,CAACQ,GAAG,CAAC,OAAOV;QACpC,MAAMW,uBAAwC;YAAC;YAAU;YAAQ;YAAU;SAAS;QAEpF,IACEX,WAAWY,IAAI,IACf,OAAOZ,WAAWY,IAAI,CAACC,gBAAgB,KAAK,eAC5Cb,WAAWY,IAAI,CAACC,gBAAgB,KAAK,GACrC;YACAF,qBAAqBG,IAAI,CAAC;QAC5B;QAEA,IAAId,WAAWe,QAAQ,EAAE;YACvBJ,qBAAqBG,IAAI,CAAC;QAC5B;QAEA,MAAME,mBAAmB,kYAAMzB,oBAAAA,EAAkB;YAC/C0B,MAAM;YACNC,QAAQlB;YACRmB,YAAYR;YACZjB;QACF;QACAC,QAAQO,WAAW,GAAG;YACpB,GAAGP,QAAQO,WAAW;YACtB,CAACF,WAAWI,IAAI,CAAC,EAAEY;QACrB;IACF;IAGF,MAAMR,QAAQC,GAAG,CACfb,QAAQK,MAAM,CAACmB,OAAO,CAACV,GAAG,CAAC,OAAOW;QAChC,MAAMC,mBAAoC;YAAC;YAAQ;SAAS;QAE5D,IAAID,OAAON,QAAQ,EAAE;YACnBO,iBAAiBR,IAAI,CAAC;QACxB;QAEA,MAAMS,eAAe,kYAAMhC,oBAAAA,EAAkB;YAC3C0B,MAAM;YACNC,QAAQG;YACRF,YAAYG;YACZ5B;QACF;QACAC,QAAQyB,OAAO,GAAG;YAChB,GAAGzB,QAAQyB,OAAO;YAClB,CAACC,OAAOjB,IAAI,CAAC,EAAEmB;QACjB;IACF;IAGF,qYAAO/B,sBAAAA,EAAoBG;AAC7B","ignoreList":[0]}},
    {"offset": {"line": 595, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 601, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/auth/operations/auth.ts"],"sourcesContent":["import type { SanitizedPermissions, TypedUser } from '../../index.js'\nimport type { PayloadRequest } from '../../types/index.js'\n\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport { executeAuthStrategies } from '../executeAuthStrategies.js'\nimport { getAccessResults } from '../getAccessResults.js'\n\nexport type AuthArgs = {\n  headers: Request['headers']\n  req?: Omit<PayloadRequest, 'user'>\n}\n\nexport type AuthResult = {\n  permissions: SanitizedPermissions\n  responseHeaders?: Headers\n  user: null | TypedUser\n}\n\nexport const auth = async (args: Required<AuthArgs>): Promise<AuthResult> => {\n  const { headers } = args\n  const req = args.req as PayloadRequest\n  const { payload } = req\n\n  try {\n    const { responseHeaders, user } = await executeAuthStrategies({\n      headers,\n      payload,\n    })\n\n    req.user = user\n    req.responseHeaders = responseHeaders\n\n    const permissions = await getAccessResults({\n      req,\n    })\n\n    return {\n      permissions,\n      responseHeaders,\n      user,\n    }\n  } catch (error: unknown) {\n    await killTransaction(req)\n    throw error\n  }\n}\n"],"names":["killTransaction","executeAuthStrategies","getAccessResults","auth","args","headers","req","payload","responseHeaders","user","permissions","error"],"mappings":";;;AAIA,SAASC,qBAAqB,QAAQ,8BAA6B;AACnE,SAASC,gBAAgB,QAAQ,yBAAwB;AAFzD,SAASF,eAAe,QAAQ,qCAAoC;;;;AAe7D,MAAMG,OAAO,OAAOC;IACzB,MAAM,EAAEC,OAAO,EAAE,GAAGD;IACpB,MAAME,MAAMF,KAAKE,GAAG;IACpB,MAAM,EAAEC,OAAO,EAAE,GAAGD;IAEpB,IAAI;QACF,MAAM,EAAEE,eAAe,EAAEC,IAAI,EAAE,GAAG,iYAAMR,wBAAAA,EAAsB;YAC5DI;YACAE;QACF;QAEAD,IAAIG,IAAI,GAAGA;QACXH,IAAIE,eAAe,GAAGA;QAEtB,MAAME,cAAc,4XAAMR,mBAAAA,EAAiB;YACzCI;QACF;QAEA,OAAO;YACLI;YACAF;YACAC;QACF;IACF,EAAE,OAAOE,OAAgB;QACvB,gYAAMX,kBAAAA,EAAgBM;QACtB,MAAMK;IACR;AACF,EAAC","ignoreList":[0]}},
    {"offset": {"line": 634, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 640, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/auth/operations/local/auth.ts"],"sourcesContent":["import type { Payload } from '../../../index.js'\nimport type { AuthArgs, AuthResult } from '../auth.js'\n\nimport { createLocalReq } from '../../../utilities/createLocalReq.js'\nimport { auth as authOperation } from '../auth.js'\n\nexport const auth = async (payload: Payload, options: AuthArgs): Promise<AuthResult> => {\n  const { headers, req } = options\n\n  return await authOperation({\n    headers,\n    req: await createLocalReq({ req }, payload),\n  })\n}\n"],"names":["createLocalReq","auth","authOperation","payload","options","headers","req"],"mappings":";;;AAIA,SAASC,QAAQC,aAAa,QAAQ,aAAY;AADlD,SAASF,cAAc,QAAQ,uCAAsC;;;AAG9D,MAAMC,OAAO,OAAOE,SAAkBC;IAC3C,MAAM,EAAEC,OAAO,EAAEC,GAAG,EAAE,GAAGF;IAEzB,OAAO,8XAAMF,OAAAA,EAAc;QACzBG;QACAC,KAAK,+XAAMN,iBAAAA,EAAe;YAAEM;QAAI,GAAGH;IACrC;AACF,EAAC","ignoreList":[0]}},
    {"offset": {"line": 656, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 662, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/auth/operations/forgotPassword.ts"],"sourcesContent":["import crypto from 'crypto'\nimport httpStatus from 'http-status'\nimport { URL } from 'url'\n\nimport type {\n  AuthOperationsFromCollectionSlug,\n  Collection,\n} from '../../collections/config/types.js'\nimport type { CollectionSlug } from '../../index.js'\nimport type { PayloadRequest, Where } from '../../types/index.js'\n\nimport { buildAfterOperation } from '../../collections/operations/utils.js'\nimport { APIError } from '../../errors/index.js'\nimport { Forbidden } from '../../index.js'\nimport { commitTransaction } from '../../utilities/commitTransaction.js'\nimport { initTransaction } from '../../utilities/initTransaction.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport { getLoginOptions } from '../getLoginOptions.js'\n\nexport type Arguments<TSlug extends CollectionSlug> = {\n  collection: Collection\n  data: {\n    [key: string]: unknown\n  } & AuthOperationsFromCollectionSlug<TSlug>['forgotPassword']\n  disableEmail?: boolean\n  expiration?: number\n  req: PayloadRequest\n}\n\nexport type Result = string\n\nexport const forgotPasswordOperation = async <TSlug extends CollectionSlug>(\n  incomingArgs: Arguments<TSlug>,\n): Promise<null | string> => {\n  const loginWithUsername = incomingArgs.collection.config.auth.loginWithUsername\n  const { data } = incomingArgs\n\n  const { canLoginWithEmail, canLoginWithUsername } = getLoginOptions(loginWithUsername)\n\n  const sanitizedEmail =\n    (canLoginWithEmail && (incomingArgs.data.email || '').toLowerCase().trim()) || null\n  const sanitizedUsername =\n    'username' in data && typeof data?.username === 'string'\n      ? data.username.toLowerCase().trim()\n      : null\n\n  let args = incomingArgs\n\n  if (incomingArgs.collection.config.auth.disableLocalStrategy) {\n    throw new Forbidden(incomingArgs.req.t)\n  }\n  if (!sanitizedEmail && !sanitizedUsername) {\n    throw new APIError(\n      `Missing ${loginWithUsername ? 'username' : 'email'}.`,\n      httpStatus.BAD_REQUEST,\n    )\n  }\n\n  try {\n    const shouldCommit = await initTransaction(args.req)\n\n    // /////////////////////////////////////\n    // beforeOperation - Collection\n    // /////////////////////////////////////\n\n    await args.collection.config.hooks.beforeOperation.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      args =\n        (await hook({\n          args,\n          collection: args.collection?.config,\n          context: args.req.context,\n          operation: 'forgotPassword',\n          req: args.req,\n        })) || args\n    }, Promise.resolve())\n\n    const {\n      collection: { config: collectionConfig },\n      disableEmail,\n      expiration,\n      req: {\n        payload: { config, email },\n        payload,\n      },\n      req,\n    } = args\n\n    // /////////////////////////////////////\n    // Forget password\n    // /////////////////////////////////////\n\n    let token: string = crypto.randomBytes(20).toString('hex')\n    type UserDoc = {\n      email?: string\n      id: number | string\n      resetPasswordExpiration?: string\n      resetPasswordToken?: string\n    }\n\n    if (!sanitizedEmail && !sanitizedUsername) {\n      throw new APIError(\n        `Missing ${loginWithUsername ? 'username' : 'email'}.`,\n        httpStatus.BAD_REQUEST,\n      )\n    }\n\n    let whereConstraint: Where = {}\n\n    if (canLoginWithEmail && sanitizedEmail) {\n      whereConstraint = {\n        email: {\n          equals: sanitizedEmail,\n        },\n      }\n    } else if (canLoginWithUsername && sanitizedUsername) {\n      whereConstraint = {\n        username: {\n          equals: sanitizedUsername,\n        },\n      }\n    }\n\n    let user = await payload.db.findOne<UserDoc>({\n      collection: collectionConfig.slug,\n      req,\n      where: whereConstraint,\n    })\n\n    // We don't want to indicate specifically that an email was not found,\n    // as doing so could lead to the exposure of registered emails.\n    // Therefore, we prefer to fail silently.\n    if (!user) {\n      await commitTransaction(args.req)\n      return null\n    }\n\n    user.resetPasswordToken = token\n    user.resetPasswordExpiration = new Date(\n      Date.now() + (collectionConfig.auth?.forgotPassword?.expiration ?? expiration ?? 3600000),\n    ).toISOString()\n\n    user = await payload.update({\n      id: user.id,\n      collection: collectionConfig.slug,\n      data: user,\n      req,\n    })\n\n    if (!disableEmail && user.email) {\n      const protocol = new URL(req.url).protocol // includes the final :\n      const serverURL =\n        config.serverURL !== null && config.serverURL !== ''\n          ? config.serverURL\n          : `${protocol}//${req.headers.get('host')}`\n\n      let html = `${req.t('authentication:youAreReceivingResetPassword')}\n    <a href=\"${serverURL}${config.routes.admin}${config.admin.routes.reset}/${token}\">${serverURL}${config.routes.admin}${config.admin.routes.reset}/${token}</a>\n    ${req.t('authentication:youDidNotRequestPassword')}`\n\n      if (typeof collectionConfig.auth.forgotPassword?.generateEmailHTML === 'function') {\n        html = await collectionConfig.auth.forgotPassword.generateEmailHTML({\n          req,\n          token,\n          user,\n        })\n      }\n\n      let subject = req.t('authentication:resetYourPassword')\n\n      if (typeof collectionConfig.auth.forgotPassword?.generateEmailSubject === 'function') {\n        subject = await collectionConfig.auth.forgotPassword.generateEmailSubject({\n          req,\n          token,\n          user,\n        })\n      }\n\n      await email.sendEmail({\n        from: `\"${email.defaultFromName}\" <${email.defaultFromAddress}>`,\n        html,\n        subject,\n        to: user.email,\n      })\n    }\n\n    // /////////////////////////////////////\n    // afterForgotPassword - Collection\n    // /////////////////////////////////////\n\n    await collectionConfig.hooks.afterForgotPassword.reduce(async (priorHook, hook) => {\n      await priorHook\n      await hook({ args, collection: args.collection?.config, context: req.context })\n    }, Promise.resolve())\n\n    // /////////////////////////////////////\n    // afterOperation - Collection\n    // /////////////////////////////////////\n\n    token = await buildAfterOperation({\n      args,\n      collection: args.collection?.config,\n      operation: 'forgotPassword',\n      result: token,\n    })\n\n    if (shouldCommit) {\n      await commitTransaction(req)\n    }\n\n    return token\n  } catch (error: unknown) {\n    await killTransaction(args.req)\n    throw error\n  }\n}\n"],"names":["crypto","httpStatus","URL","buildAfterOperation","APIError","Forbidden","commitTransaction","initTransaction","killTransaction","getLoginOptions","forgotPasswordOperation","incomingArgs","loginWithUsername","collection","config","auth","data","canLoginWithEmail","canLoginWithUsername","sanitizedEmail","email","toLowerCase","trim","sanitizedUsername","username","args","disableLocalStrategy","req","t","BAD_REQUEST","shouldCommit","hooks","beforeOperation","reduce","priorHook","hook","context","operation","Promise","resolve","collectionConfig","disableEmail","expiration","payload","token","randomBytes","toString","whereConstraint","equals","user","db","findOne","slug","where","resetPasswordToken","resetPasswordExpiration","Date","now","forgotPassword","toISOString","update","id","protocol","url","serverURL","headers","get","html","routes","admin","reset","generateEmailHTML","subject","generateEmailSubject","sendEmail","from","defaultFromName","defaultFromAddress","to","afterForgotPassword","result","error"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 813, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 819, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/auth/operations/local/forgotPassword.ts"],"sourcesContent":["import type { CollectionSlug, Payload, RequestContext } from '../../../index.js'\nimport type { PayloadRequest } from '../../../types/index.js'\nimport type { Result } from '../forgotPassword.js'\n\nimport { APIError } from '../../../errors/index.js'\nimport { createLocalReq } from '../../../utilities/createLocalReq.js'\nimport { forgotPasswordOperation } from '../forgotPassword.js'\n\nexport type Options<T extends CollectionSlug> = {\n  collection: T\n  context?: RequestContext\n  data: {\n    email: string\n  }\n  disableEmail?: boolean\n  expiration?: number\n  req?: Partial<PayloadRequest>\n}\n\nasync function localForgotPassword<T extends CollectionSlug>(\n  payload: Payload,\n  options: Options<T>,\n): Promise<Result> {\n  const { collection: collectionSlug, data, disableEmail, expiration } = options\n\n  const collection = payload.collections[collectionSlug]\n\n  if (!collection) {\n    throw new APIError(\n      `The collection with slug ${String(\n        collectionSlug,\n      )} can't be found. Forgot Password Operation.`,\n    )\n  }\n\n  return forgotPasswordOperation({\n    collection,\n    data,\n    disableEmail,\n    expiration,\n    req: await createLocalReq(options, payload),\n  })\n}\n\nexport const forgotPassword = localForgotPassword\n"],"names":["APIError","createLocalReq","forgotPasswordOperation","localForgotPassword","payload","options","collection","collectionSlug","data","disableEmail","expiration","collections","String","req","forgotPassword"],"mappings":";;;AAIA,SAASA,QAAQ,QAAQ,2BAA0B;AAEnD,SAASE,uBAAuB,QAAQ,uBAAsB;AAD9D,SAASD,cAAc,QAAQ,uCAAsC;;;;AAcrE,eAAeE,oBACbC,OAAgB,EAChBC,OAAmB;IAEnB,MAAM,EAAEC,YAAYC,cAAc,EAAEC,IAAI,EAAEC,YAAY,EAAEC,UAAU,EAAE,GAAGL;IAEvE,MAAMC,aAAaF,QAAQO,WAAW,CAACJ,eAAe;IAEtD,IAAI,CAACD,YAAY;QACf,MAAM,gXAAIN,WAAAA,CACR,CAAC,yBAAyB,EAAEY,OAC1BL,gBACA,2CAA2C,CAAC;IAElD;IAEA,yYAAOL,0BAAAA,EAAwB;QAC7BI;QACAE;QACAC;QACAC;QACAG,KAAK,+XAAMZ,iBAAAA,EAAeI,SAASD;IACrC;AACF;AAEO,MAAMU,iBAAiBX,oBAAmB","ignoreList":[0]}},
    {"offset": {"line": 843, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 849, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/auth/isLocked.ts"],"sourcesContent":["const isLocked = (date: number): boolean => {\n  if (!date) {\n    return false\n  }\n  return date > Date.now()\n}\nexport default isLocked\n"],"names":["isLocked","date","Date","now"],"mappings":";;;AAAA,MAAMA,WAAW,CAACC;IAChB,IAAI,CAACA,MAAM;QACT,OAAO;IACT;IACA,OAAOA,OAAOC,KAAKC,GAAG;AACxB;uCACeH,SAAQ","ignoreList":[0]}},
    {"offset": {"line": 860, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 866, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/auth/strategies/local/authenticate.ts"],"sourcesContent":["import crypto from 'crypto'\nimport scmp from 'scmp'\n\nimport type { TypeWithID } from '../../../collections/config/types.js'\n\ntype Doc = Record<string, unknown> & TypeWithID\n\ntype Args = {\n  doc: Doc\n  password: string\n}\n\nexport const authenticateLocalStrategy = async ({ doc, password }: Args): Promise<Doc | null> => {\n  try {\n    const { hash, salt } = doc\n\n    if (typeof salt === 'string' && typeof hash === 'string') {\n      const res = await new Promise<Doc | null>((resolve, reject) => {\n        crypto.pbkdf2(password, salt, 25000, 512, 'sha256', (e, hashBuffer) => {\n          if (e) {\n            reject(null)\n          }\n\n          if (scmp(hashBuffer, Buffer.from(hash, 'hex'))) {\n            resolve(doc)\n          } else {\n            reject(null)\n          }\n        })\n      })\n\n      return res\n    }\n\n    return null\n  } catch (err) {\n    return null\n  }\n}\n"],"names":["crypto","scmp","authenticateLocalStrategy","doc","password","hash","salt","res","Promise","resolve","reject","pbkdf2","e","hashBuffer","Buffer","from","err"],"mappings":";;;AAAA,OAAOA,YAAY,SAAQ;AAC3B,OAAOC,UAAU,OAAM;;;AAWhB,MAAMC,4BAA4B,OAAO,EAAEC,GAAG,EAAEC,QAAQ,EAAQ;IACrE,IAAI;QACF,MAAM,EAAEC,IAAI,EAAEC,IAAI,EAAE,GAAGH;QAEvB,IAAI,OAAOG,SAAS,YAAY,OAAOD,SAAS,UAAU;YACxD,MAAME,MAAM,MAAM,IAAIC,QAAoB,CAACC,SAASC;sHAClDV,UAAAA,CAAOW,MAAM,CAACP,UAAUE,MAAM,OAAO,KAAK,UAAU,CAACM,GAAGC;oBACtD,IAAID,GAAG;wBACLF,OAAO;oBACT;oBAEA,uLAAIT,UAAAA,EAAKY,YAAYC,OAAOC,IAAI,CAACV,MAAM,SAAS;wBAC9CI,QAAQN;oBACV,OAAO;wBACLO,OAAO;oBACT;gBACF;YACF;YAEA,OAAOH;QACT;QAEA,OAAO;IACT,EAAE,OAAOS,KAAK;QACZ,OAAO;IACT;AACF,EAAC","ignoreList":[0]}},
    {"offset": {"line": 896, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 902, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/auth/strategies/local/incrementLoginAttempts.ts"],"sourcesContent":["import type { SanitizedCollectionConfig, TypeWithID } from '../../../collections/config/types.js'\nimport type { JsonObject, Payload } from '../../../index.js'\nimport type { PayloadRequest } from '../../../types/index.js'\n\ntype Args = {\n  collection: SanitizedCollectionConfig\n  doc: Record<string, unknown> & TypeWithID\n  payload: Payload\n  req: PayloadRequest\n}\n\nexport const incrementLoginAttempts = async ({\n  collection,\n  doc,\n  payload,\n  req,\n}: Args): Promise<void> => {\n  const {\n    auth: { lockTime, maxLoginAttempts },\n  } = collection\n\n  if ('lockUntil' in doc && typeof doc.lockUntil === 'string') {\n    const lockUntil = new Date(doc.lockUntil).getTime()\n\n    // Expired lock, restart count at 1\n    if (lockUntil < Date.now()) {\n      await payload.update({\n        id: doc.id,\n        collection: collection.slug,\n        data: {\n          lockUntil: null,\n          loginAttempts: 1,\n        },\n        depth: 0,\n        req,\n      })\n    }\n\n    return\n  }\n\n  const data: JsonObject = {\n    loginAttempts: Number(doc.loginAttempts) + 1,\n  }\n\n  // Lock the account if at max attempts and not already locked\n  if (typeof doc.loginAttempts === 'number' && doc.loginAttempts + 1 >= maxLoginAttempts) {\n    const lockUntil = new Date(Date.now() + lockTime).toISOString()\n    data.lockUntil = lockUntil\n  }\n\n  await payload.update({\n    id: doc.id,\n    collection: collection.slug,\n    data,\n    depth: 0,\n    req,\n  })\n}\n"],"names":["incrementLoginAttempts","collection","doc","payload","req","auth","lockTime","maxLoginAttempts","lockUntil","Date","getTime","now","update","id","slug","data","loginAttempts","depth","Number","toISOString"],"mappings":";;;AAWO,MAAMA,yBAAyB,OAAO,EAC3CC,UAAU,EACVC,GAAG,EACHC,OAAO,EACPC,GAAG,EACE;IACL,MAAM,EACJC,MAAM,EAAEC,QAAQ,EAAEC,gBAAgB,EAAE,EACrC,GAAGN;IAEJ,IAAI,eAAeC,OAAO,OAAOA,IAAIM,SAAS,KAAK,UAAU;QAC3D,MAAMA,YAAY,IAAIC,KAAKP,IAAIM,SAAS,EAAEE,OAAO;QAEjD,mCAAmC;QACnC,IAAIF,YAAYC,KAAKE,GAAG,IAAI;YAC1B,MAAMR,QAAQS,MAAM,CAAC;gBACnBC,IAAIX,IAAIW,EAAE;gBACVZ,YAAYA,WAAWa,IAAI;gBAC3BC,MAAM;oBACJP,WAAW;oBACXQ,eAAe;gBACjB;gBACAC,OAAO;gBACPb;YACF;QACF;QAEA;IACF;IAEA,MAAMW,OAAmB;QACvBC,eAAeE,OAAOhB,IAAIc,aAAa,IAAI;IAC7C;IAEA,6DAA6D;IAC7D,IAAI,OAAOd,IAAIc,aAAa,KAAK,YAAYd,IAAIc,aAAa,GAAG,KAAKT,kBAAkB;QACtF,MAAMC,YAAY,IAAIC,KAAKA,KAAKE,GAAG,KAAKL,UAAUa,WAAW;QAC7DJ,KAAKP,SAAS,GAAGA;IACnB;IAEA,MAAML,QAAQS,MAAM,CAAC;QACnBC,IAAIX,IAAIW,EAAE;QACVZ,YAAYA,WAAWa,IAAI;QAC3BC;QACAE,OAAO;QACPb;IACF;AACF,EAAC","ignoreList":[0]}},
    {"offset": {"line": 940, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 946, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/auth/strategies/local/resetLoginAttempts.ts"],"sourcesContent":["import type { SanitizedCollectionConfig, TypeWithID } from '../../../collections/config/types.js'\nimport type { Payload } from '../../../index.js'\nimport type { PayloadRequest } from '../../../types/index.js'\n\ntype Args = {\n  collection: SanitizedCollectionConfig\n  doc: Record<string, unknown> & TypeWithID\n  payload: Payload\n  req: PayloadRequest\n}\n\nexport const resetLoginAttempts = async ({\n  collection,\n  doc,\n  payload,\n  req,\n}: Args): Promise<void> => {\n  if (!('lockUntil' in doc && typeof doc.lockUntil === 'string') || doc.loginAttempts === 0) {\n    return\n  }\n  await payload.update({\n    id: doc.id,\n    collection: collection.slug,\n    data: {\n      lockUntil: null,\n      loginAttempts: 0,\n    },\n    depth: 0,\n    overrideAccess: true,\n    req,\n  })\n}\n"],"names":["resetLoginAttempts","collection","doc","payload","req","lockUntil","loginAttempts","update","id","slug","data","depth","overrideAccess"],"mappings":";;;AAWO,MAAMA,qBAAqB,OAAO,EACvCC,UAAU,EACVC,GAAG,EACHC,OAAO,EACPC,GAAG,EACE;IACL,IAAI,CAAE,CAAA,eAAeF,OAAO,OAAOA,IAAIG,SAAS,KAAK,QAAO,KAAMH,IAAII,aAAa,KAAK,GAAG;QACzF;IACF;IACA,MAAMH,QAAQI,MAAM,CAAC;QACnBC,IAAIN,IAAIM,EAAE;QACVP,YAAYA,WAAWQ,IAAI;QAC3BC,MAAM;YACJL,WAAW;YACXC,eAAe;QACjB;QACAK,OAAO;QACPC,gBAAgB;QAChBR;IACF;AACF,EAAC","ignoreList":[0]}},
    {"offset": {"line": 965, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 971, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/auth/getFieldsToSign.ts"],"sourcesContent":["import type { CollectionConfig } from '../collections/config/types.js'\nimport type { Field, TabAsField } from '../fields/config/types.js'\nimport type { PayloadRequest } from '../types/index.js'\n\nimport { fieldAffectsData, tabHasName } from '../fields/config/types.js'\n\ntype TraverseFieldsArgs = {\n  data: Record<string, unknown>\n  fields: (Field | TabAsField)[]\n  result: Record<string, unknown>\n}\nconst traverseFields = ({\n  data,\n  // parent,\n  fields,\n  result,\n}: TraverseFieldsArgs) => {\n  fields.forEach((field) => {\n    switch (field.type) {\n      case 'collapsible':\n      case 'row': {\n        traverseFields({\n          data,\n          fields: field.fields,\n          result,\n        })\n        break\n      }\n      case 'group': {\n        let targetResult\n        if (typeof field.saveToJWT === 'string') {\n          targetResult = field.saveToJWT\n          result[field.saveToJWT] = data[field.name]\n        } else if (field.saveToJWT) {\n          targetResult = field.name\n          result[field.name] = data[field.name]\n        }\n        const groupData: Record<string, unknown> = data[field.name] as Record<string, unknown>\n        const groupResult = (targetResult ? result[targetResult] : result) as Record<\n          string,\n          unknown\n        >\n        traverseFields({\n          data: groupData,\n          fields: field.fields,\n          result: groupResult,\n        })\n        break\n      }\n      case 'tab': {\n        if (tabHasName(field)) {\n          let targetResult\n          if (typeof field.saveToJWT === 'string') {\n            targetResult = field.saveToJWT\n            result[field.saveToJWT] = data[field.name]\n          } else if (field.saveToJWT) {\n            targetResult = field.name\n            result[field.name] = data[field.name]\n          }\n          const tabData: Record<string, unknown> = data[field.name] as Record<string, unknown>\n          const tabResult = (targetResult ? result[targetResult] : result) as Record<\n            string,\n            unknown\n          >\n          traverseFields({\n            data: tabData,\n            fields: field.fields,\n            result: tabResult,\n          })\n        } else {\n          traverseFields({\n            data,\n            fields: field.fields,\n            result,\n          })\n        }\n        break\n      }\n      case 'tabs': {\n        traverseFields({\n          data,\n          fields: field.tabs.map((tab) => ({ ...tab, type: 'tab' })),\n          result,\n        })\n        break\n      }\n      default:\n        if (fieldAffectsData(field)) {\n          if (field.saveToJWT) {\n            if (typeof field.saveToJWT === 'string') {\n              result[field.saveToJWT] = data[field.name]\n              delete result[field.name]\n            } else {\n              result[field.name] = data[field.name] as Record<string, unknown>\n            }\n          } else if (field.saveToJWT === false) {\n            delete result[field.name]\n          }\n        }\n    }\n  })\n  return result\n}\nexport const getFieldsToSign = (args: {\n  collectionConfig: CollectionConfig\n  email: string\n  user: PayloadRequest['user']\n}): Record<string, unknown> => {\n  const { collectionConfig, email, user } = args\n\n  const result: Record<string, unknown> = {\n    id: user?.id,\n    collection: collectionConfig.slug,\n    email,\n  }\n\n  traverseFields({\n    data: user,\n    fields: collectionConfig.fields,\n    result,\n  })\n\n  return result\n}\n"],"names":["fieldAffectsData","tabHasName","traverseFields","data","fields","result","forEach","field","type","targetResult","saveToJWT","name","groupData","groupResult","tabData","tabResult","tabs","map","tab","getFieldsToSign","args","collectionConfig","email","user","id","collection","slug"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1078, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1084, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/auth/jwt.ts"],"sourcesContent":["import { SignJWT } from 'jose'\n\nexport const jwtSign = async ({\n  fieldsToSign,\n  secret,\n  tokenExpiration,\n}: {\n  fieldsToSign: Record<string, unknown>\n  secret: string\n  tokenExpiration: number\n}) => {\n  const secretKey = new TextEncoder().encode(secret)\n  const issuedAt = Math.floor(Date.now() / 1000)\n  const exp = issuedAt + tokenExpiration\n  const token = await new SignJWT(fieldsToSign)\n    .setProtectedHeader({ alg: 'HS256', typ: 'JWT' })\n    .setIssuedAt(issuedAt)\n    .setExpirationTime(exp)\n    .sign(secretKey)\n  return { exp, token }\n}\n"],"names":["SignJWT","jwtSign","fieldsToSign","secret","tokenExpiration","secretKey","TextEncoder","encode","issuedAt","Math","floor","Date","now","exp","token","setProtectedHeader","alg","typ","setIssuedAt","setExpirationTime","sign"],"mappings":";;;AAAA,SAASA,OAAO,QAAQ,OAAM;;AAEvB,MAAMC,UAAU,OAAO,EAC5BC,YAAY,EACZC,MAAM,EACNC,eAAe,EAKhB;IACC,MAAMC,YAAY,IAAIC,cAAcC,MAAM,CAACJ;IAC3C,MAAMK,WAAWC,KAAKC,KAAK,CAACC,KAAKC,GAAG,KAAK;IACzC,MAAMC,MAAML,WAAWJ;IACvB,MAAMU,QAAQ,MAAM,gNAAId,UAAAA,CAAQE,cAC7Ba,kBAAkB,CAAC;QAAEC,KAAK;QAASC,KAAK;IAAM,GAC9CC,WAAW,CAACV,UACZW,iBAAiB,CAACN,KAClBO,IAAI,CAACf;IACR,OAAO;QAAEQ;QAAKC;IAAM;AACtB,EAAC","ignoreList":[0]}},
    {"offset": {"line": 1102, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1108, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/auth/operations/login.ts"],"sourcesContent":["import type {\n  AuthOperationsFromCollectionSlug,\n  Collection,\n  DataFromCollectionSlug,\n} from '../../collections/config/types.js'\nimport type { CollectionSlug } from '../../index.js'\nimport type { PayloadRequest, Where } from '../../types/index.js'\nimport type { User } from '../types.js'\n\nimport { buildAfterOperation } from '../../collections/operations/utils.js'\nimport { AuthenticationError, LockedAuth, ValidationError } from '../../errors/index.js'\nimport { afterRead } from '../../fields/hooks/afterRead/index.js'\nimport { Forbidden } from '../../index.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport sanitizeInternalFields from '../../utilities/sanitizeInternalFields.js'\nimport { getFieldsToSign } from '../getFieldsToSign.js'\nimport { getLoginOptions } from '../getLoginOptions.js'\nimport isLocked from '../isLocked.js'\nimport { jwtSign } from '../jwt.js'\nimport { authenticateLocalStrategy } from '../strategies/local/authenticate.js'\nimport { incrementLoginAttempts } from '../strategies/local/incrementLoginAttempts.js'\nimport { resetLoginAttempts } from '../strategies/local/resetLoginAttempts.js'\n\nexport type Result = {\n  exp?: number\n  token?: string\n  user?: User\n}\n\nexport type Arguments<TSlug extends CollectionSlug> = {\n  collection: Collection\n  data: AuthOperationsFromCollectionSlug<TSlug>['login']\n  depth?: number\n  overrideAccess?: boolean\n  req: PayloadRequest\n  showHiddenFields?: boolean\n}\n\nexport const loginOperation = async <TSlug extends CollectionSlug>(\n  incomingArgs: Arguments<TSlug>,\n): Promise<{ user: DataFromCollectionSlug<TSlug> } & Result> => {\n  let args = incomingArgs\n\n  if (args.collection.config.auth.disableLocalStrategy) {\n    throw new Forbidden(args.req.t)\n  }\n\n  try {\n    // /////////////////////////////////////\n    // beforeOperation - Collection\n    // /////////////////////////////////////\n\n    await args.collection.config.hooks.beforeOperation.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      args =\n        (await hook({\n          args,\n          collection: args.collection?.config,\n          context: args.req.context,\n          operation: 'login',\n          req: args.req,\n        })) || args\n    }, Promise.resolve())\n\n    const {\n      collection: { config: collectionConfig },\n      data,\n      depth,\n      overrideAccess,\n      req,\n      req: {\n        fallbackLocale,\n        locale,\n        payload,\n        payload: { secret },\n      },\n      showHiddenFields,\n    } = args\n\n    // /////////////////////////////////////\n    // Login\n    // /////////////////////////////////////\n\n    let user\n    const { email: unsanitizedEmail, password } = data\n    const loginWithUsername = collectionConfig.auth.loginWithUsername\n\n    const sanitizedEmail =\n      typeof unsanitizedEmail === 'string' ? unsanitizedEmail.toLowerCase().trim() : null\n    const sanitizedUsername =\n      'username' in data && typeof data?.username === 'string'\n        ? data.username.toLowerCase().trim()\n        : null\n\n    const { canLoginWithEmail, canLoginWithUsername } = getLoginOptions(loginWithUsername)\n\n    // cannot login with email, did not provide username\n    if (!canLoginWithEmail && !sanitizedUsername) {\n      throw new ValidationError({\n        collection: collectionConfig.slug,\n        errors: [{ message: req.i18n.t('validation:required'), path: 'username' }],\n      })\n    }\n\n    // cannot login with username, did not provide email\n    if (!canLoginWithUsername && !sanitizedEmail) {\n      throw new ValidationError({\n        collection: collectionConfig.slug,\n        errors: [{ message: req.i18n.t('validation:required'), path: 'email' }],\n      })\n    }\n\n    // can login with either email or username, did not provide either\n    if (!sanitizedUsername && !sanitizedEmail) {\n      throw new ValidationError({\n        collection: collectionConfig.slug,\n        errors: [\n          { message: req.i18n.t('validation:required'), path: 'email' },\n          { message: req.i18n.t('validation:required'), path: 'username' },\n        ],\n      })\n    }\n\n    // did not provide password for login\n    if (typeof password !== 'string' || password.trim() === '') {\n      throw new ValidationError({\n        collection: collectionConfig.slug,\n        errors: [{ message: req.i18n.t('validation:required'), path: 'password' }],\n      })\n    }\n\n    let whereConstraint: Where = {}\n    const emailConstraint: Where = {\n      email: {\n        equals: sanitizedEmail,\n      },\n    }\n    const usernameConstraint: Where = {\n      username: {\n        equals: sanitizedUsername,\n      },\n    }\n\n    if (canLoginWithEmail && canLoginWithUsername && (sanitizedUsername || sanitizedEmail)) {\n      if (sanitizedUsername) {\n        whereConstraint = {\n          or: [\n            usernameConstraint,\n            {\n              email: {\n                equals: sanitizedUsername,\n              },\n            },\n          ],\n        }\n      } else {\n        whereConstraint = {\n          or: [\n            emailConstraint,\n            {\n              username: {\n                equals: sanitizedEmail,\n              },\n            },\n          ],\n        }\n      }\n    } else if (canLoginWithEmail && sanitizedEmail) {\n      whereConstraint = emailConstraint\n    } else if (canLoginWithUsername && sanitizedUsername) {\n      whereConstraint = usernameConstraint\n    }\n\n    user = await payload.db.findOne<any>({\n      collection: collectionConfig.slug,\n      req,\n      where: whereConstraint,\n    })\n\n    if (!user || (args.collection.config.auth.verify && user._verified === false)) {\n      throw new AuthenticationError(req.t, Boolean(canLoginWithUsername && sanitizedUsername))\n    }\n\n    user.collection = collectionConfig.slug\n\n    if (isLocked(new Date(user.lockUntil).getTime())) {\n      throw new LockedAuth(req.t)\n    }\n\n    const authResult = await authenticateLocalStrategy({ doc: user, password })\n\n    user = sanitizeInternalFields(user)\n\n    const maxLoginAttemptsEnabled = args.collection.config.auth.maxLoginAttempts > 0\n\n    if (!authResult) {\n      if (maxLoginAttemptsEnabled) {\n        await incrementLoginAttempts({\n          collection: collectionConfig,\n          doc: user,\n          payload: req.payload,\n          req,\n        })\n      }\n\n      throw new AuthenticationError(req.t)\n    }\n\n    if (maxLoginAttemptsEnabled) {\n      await resetLoginAttempts({\n        collection: collectionConfig,\n        doc: user,\n        payload: req.payload,\n        req,\n      })\n    }\n\n    const fieldsToSign = getFieldsToSign({\n      collectionConfig,\n      email: sanitizedEmail,\n      user,\n    })\n\n    // /////////////////////////////////////\n    // beforeLogin - Collection\n    // /////////////////////////////////////\n\n    await collectionConfig.hooks.beforeLogin.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      user =\n        (await hook({\n          collection: args.collection?.config,\n          context: args.req.context,\n          req: args.req,\n          user,\n        })) || user\n    }, Promise.resolve())\n\n    const { exp, token } = await jwtSign({\n      fieldsToSign,\n      secret,\n      tokenExpiration: collectionConfig.auth.tokenExpiration,\n    })\n\n    req.user = user\n\n    // /////////////////////////////////////\n    // afterLogin - Collection\n    // /////////////////////////////////////\n\n    await collectionConfig.hooks.afterLogin.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      user =\n        (await hook({\n          collection: args.collection?.config,\n          context: args.req.context,\n          req: args.req,\n          token,\n          user,\n        })) || user\n    }, Promise.resolve())\n\n    // /////////////////////////////////////\n    // afterRead - Fields\n    // /////////////////////////////////////\n\n    user = await afterRead({\n      collection: collectionConfig,\n      context: req.context,\n      depth,\n      doc: user,\n      draft: undefined,\n      fallbackLocale,\n      global: null,\n      locale,\n      overrideAccess,\n      req,\n      showHiddenFields,\n    })\n\n    // /////////////////////////////////////\n    // afterRead - Collection\n    // /////////////////////////////////////\n\n    await collectionConfig.hooks.afterRead.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      user =\n        (await hook({\n          collection: args.collection?.config,\n          context: req.context,\n          doc: user,\n          req,\n        })) || user\n    }, Promise.resolve())\n\n    let result: { user: DataFromCollectionSlug<TSlug> } & Result = {\n      exp,\n      token,\n      user,\n    }\n\n    // /////////////////////////////////////\n    // afterOperation - Collection\n    // /////////////////////////////////////\n\n    result = await buildAfterOperation({\n      args,\n      collection: args.collection?.config,\n      operation: 'login',\n      result,\n    })\n\n    // /////////////////////////////////////\n    // Return results\n    // /////////////////////////////////////\n\n    return result\n  } catch (error: unknown) {\n    await killTransaction(args.req)\n    throw error\n  }\n}\n"],"names":["buildAfterOperation","AuthenticationError","LockedAuth","ValidationError","afterRead","Forbidden","killTransaction","sanitizeInternalFields","getFieldsToSign","getLoginOptions","isLocked","jwtSign","authenticateLocalStrategy","incrementLoginAttempts","resetLoginAttempts","loginOperation","incomingArgs","args","collection","config","auth","disableLocalStrategy","req","t","hooks","beforeOperation","reduce","priorHook","hook","context","operation","Promise","resolve","collectionConfig","data","depth","overrideAccess","fallbackLocale","locale","payload","secret","showHiddenFields","user","email","unsanitizedEmail","password","loginWithUsername","sanitizedEmail","toLowerCase","trim","sanitizedUsername","username","canLoginWithEmail","canLoginWithUsername","slug","errors","message","i18n","path","whereConstraint","emailConstraint","equals","usernameConstraint","or","db","findOne","where","verify","_verified","Boolean","Date","lockUntil","getTime","authResult","doc","maxLoginAttemptsEnabled","maxLoginAttempts","fieldsToSign","beforeLogin","exp","token","tokenExpiration","afterLogin","draft","undefined","global","result","error"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1384, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1390, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/auth/operations/local/login.ts"],"sourcesContent":["import type {\n  AuthOperationsFromCollectionSlug,\n  CollectionSlug,\n  DataFromCollectionSlug,\n  Payload,\n  RequestContext,\n} from '../../../index.js'\nimport type { PayloadRequest } from '../../../types/index.js'\nimport type { Result } from '../login.js'\n\nimport { APIError } from '../../../errors/index.js'\nimport { createLocalReq } from '../../../utilities/createLocalReq.js'\nimport { loginOperation } from '../login.js'\n\nexport type Options<TSlug extends CollectionSlug> = {\n  collection: TSlug\n  context?: RequestContext\n  data: AuthOperationsFromCollectionSlug<TSlug>['login']\n  depth?: number\n  fallbackLocale?: string\n  locale?: string\n  overrideAccess?: boolean\n  req?: Partial<PayloadRequest>\n  showHiddenFields?: boolean\n}\n\nexport async function localLogin<TSlug extends CollectionSlug>(\n  payload: Payload,\n  options: Options<TSlug>,\n): Promise<{ user: DataFromCollectionSlug<TSlug> } & Result> {\n  const {\n    collection: collectionSlug,\n    data,\n    depth,\n    overrideAccess = true,\n    showHiddenFields,\n  } = options\n\n  const collection = payload.collections[collectionSlug]\n\n  if (!collection) {\n    throw new APIError(\n      `The collection with slug ${String(collectionSlug)} can't be found. Login Operation.`,\n    )\n  }\n\n  const args = {\n    collection,\n    data,\n    depth,\n    overrideAccess,\n    req: await createLocalReq(options, payload),\n    showHiddenFields,\n  }\n\n  const result = await loginOperation<TSlug>(args)\n\n  if (collection.config.auth.removeTokenFromResponses) {\n    delete result.token\n  }\n\n  return result\n}\n\nexport const login = localLogin\n"],"names":["APIError","createLocalReq","loginOperation","localLogin","payload","options","collection","collectionSlug","data","depth","overrideAccess","showHiddenFields","collections","String","args","req","result","config","auth","removeTokenFromResponses","token","login"],"mappings":";;;;AAUA,SAASA,QAAQ,QAAQ,2BAA0B;AACnD,SAASC,cAAc,QAAQ,uCAAsC;AACrE,SAASC,cAAc,QAAQ,cAAa;;;;AAcrC,eAAeC,WACpBC,OAAgB,EAChBC,OAAuB;IAEvB,MAAM,EACJC,YAAYC,cAAc,EAC1BC,IAAI,EACJC,KAAK,EACLC,iBAAiB,IAAI,EACrBC,gBAAgB,EACjB,GAAGN;IAEJ,MAAMC,aAAaF,QAAQQ,WAAW,CAACL,eAAe;IAEtD,IAAI,CAACD,YAAY;QACf,MAAM,gXAAIN,WAAAA,CACR,CAAC,yBAAyB,EAAEa,OAAON,gBAAgB,iCAAiC,CAAC;IAEzF;IAEA,MAAMO,OAAO;QACXR;QACAE;QACAC;QACAC;QACAK,KAAK,+XAAMd,iBAAAA,EAAeI,SAASD;QACnCO;IACF;IAEA,MAAMK,SAAS,+XAAMd,iBAAAA,EAAsBY;IAE3C,IAAIR,WAAWW,MAAM,CAACC,IAAI,CAACC,wBAAwB,EAAE;QACnD,OAAOH,OAAOI,KAAK;IACrB;IAEA,OAAOJ;AACT;AAEO,MAAMK,QAAQlB,WAAU","ignoreList":[0]}},
    {"offset": {"line": 1421, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1427, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/auth/strategies/local/generatePasswordSaltHash.ts"],"sourcesContent":["import crypto from 'crypto'\n\nimport type { SanitizedCollectionConfig } from '../../../collections/config/types.js'\nimport type { PayloadRequest } from '../../../types/index.js'\n\nimport { ValidationError } from '../../../errors/index.js'\nimport { password } from '../../../fields/validations.js'\n\nfunction randomBytes(): Promise<Buffer> {\n  return new Promise((resolve, reject) =>\n    crypto.randomBytes(32, (err, saltBuffer) => (err ? reject(err) : resolve(saltBuffer))),\n  )\n}\n\nfunction pbkdf2Promisified(password: string, salt: string): Promise<Buffer> {\n  return new Promise((resolve, reject) =>\n    crypto.pbkdf2(password, salt, 25000, 512, 'sha256', (err, hashRaw) =>\n      err ? reject(err) : resolve(hashRaw),\n    ),\n  )\n}\n\ntype Args = {\n  collection: SanitizedCollectionConfig\n  password: string\n  req: PayloadRequest\n}\n\nexport const generatePasswordSaltHash = async ({\n  collection,\n  password: passwordToSet,\n  req,\n}: Args): Promise<{ hash: string; salt: string }> => {\n  const validationResult = password(passwordToSet, {\n    name: 'password',\n    type: 'text',\n    data: {},\n    preferences: { fields: {} },\n    req,\n    required: true,\n    siblingData: {},\n  })\n\n  if (typeof validationResult === 'string') {\n    throw new ValidationError({\n      collection: collection?.slug,\n      errors: [{ message: validationResult, path: 'password' }],\n    })\n  }\n\n  const saltBuffer = await randomBytes()\n  const salt = saltBuffer.toString('hex')\n\n  const hashRaw = await pbkdf2Promisified(passwordToSet, salt)\n  const hash = hashRaw.toString('hex')\n\n  return { hash, salt }\n}\n"],"names":["crypto","ValidationError","password","randomBytes","Promise","resolve","reject","err","saltBuffer","pbkdf2Promisified","salt","pbkdf2","hashRaw","generatePasswordSaltHash","collection","passwordToSet","req","validationResult","name","type","data","preferences","fields","required","siblingData","slug","errors","message","path","toString","hash"],"mappings":";;;AAAA,OAAOA,YAAY,SAAQ;AAM3B,SAASE,QAAQ,QAAQ,iCAAgC;AADzD,SAASD,eAAe,QAAQ,2BAA0B;;;;AAG1D,SAASE;IACP,OAAO,IAAIC,QAAQ,CAACC,SAASC,+GAC3BN,UAAAA,CAAOG,WAAW,CAAC,IAAI,CAACI,KAAKC,aAAgBD,MAAMD,OAAOC,OAAOF,QAAQG;AAE7E;AAEA,SAASC,kBAAkBP,QAAgB,EAAEQ,IAAY;IACvD,OAAO,IAAIN,QAAQ,CAACC,SAASC,+GAC3BN,UAAAA,CAAOW,MAAM,CAACT,UAAUQ,MAAM,OAAO,KAAK,UAAU,CAACH,KAAKK,UACxDL,MAAMD,OAAOC,OAAOF,QAAQO;AAGlC;AAQO,MAAMC,2BAA2B,OAAO,EAC7CC,UAAU,EACVZ,UAAUa,aAAa,EACvBC,GAAG,EACE;IACL,MAAMC,sYAAmBf,WAAAA,EAASa,eAAe;QAC/CG,MAAM;QACNC,MAAM;QACNC,MAAM,CAAC;QACPC,aAAa;YAAEC,QAAQ,CAAC;QAAE;QAC1BN;QACAO,UAAU;QACVC,aAAa,CAAC;IAChB;IAEA,IAAI,OAAOP,qBAAqB,UAAU;QACxC,MAAM,uXAAIhB,kBAAAA,CAAgB;YACxBa,YAAYA,YAAYW;YACxBC,QAAQ;gBAAC;oBAAEC,SAASV;oBAAkBW,MAAM;gBAAW;aAAE;QAC3D;IACF;IAEA,MAAMpB,aAAa,MAAML;IACzB,MAAMO,OAAOF,WAAWqB,QAAQ,CAAC;IAEjC,MAAMjB,UAAU,MAAMH,kBAAkBM,eAAeL;IACvD,MAAMoB,OAAOlB,QAAQiB,QAAQ,CAAC;IAE9B,OAAO;QAAEC;QAAMpB;IAAK;AACtB,EAAC","ignoreList":[0]}},
    {"offset": {"line": 1474, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1480, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/auth/operations/resetPassword.ts"],"sourcesContent":["import httpStatus from 'http-status'\n\nimport type { Collection } from '../../collections/config/types.js'\nimport type { PayloadRequest } from '../../types/index.js'\n\nimport { APIError, Forbidden } from '../../errors/index.js'\nimport { commitTransaction } from '../../utilities/commitTransaction.js'\nimport { initTransaction } from '../../utilities/initTransaction.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport { getFieldsToSign } from '../getFieldsToSign.js'\nimport { jwtSign } from '../jwt.js'\nimport { authenticateLocalStrategy } from '../strategies/local/authenticate.js'\nimport { generatePasswordSaltHash } from '../strategies/local/generatePasswordSaltHash.js'\n\nexport type Result = {\n  token?: string\n  user: Record<string, unknown>\n}\n\nexport type Arguments = {\n  collection: Collection\n  data: {\n    password: string\n    token: string\n  }\n  depth?: number\n  overrideAccess?: boolean\n  req: PayloadRequest\n}\n\nexport const resetPasswordOperation = async (args: Arguments): Promise<Result> => {\n  const {\n    collection: { config: collectionConfig },\n    data,\n    depth,\n    overrideAccess,\n    req: {\n      payload: { secret },\n      payload,\n    },\n    req,\n  } = args\n\n  if (\n    !Object.prototype.hasOwnProperty.call(data, 'token') ||\n    !Object.prototype.hasOwnProperty.call(data, 'password')\n  ) {\n    throw new APIError('Missing required data.', httpStatus.BAD_REQUEST)\n  }\n\n  if (collectionConfig.auth.disableLocalStrategy) {\n    throw new Forbidden(req.t)\n  }\n\n  try {\n    const shouldCommit = await initTransaction(req)\n\n    // /////////////////////////////////////\n    // Reset Password\n    // /////////////////////////////////////\n\n    const user = await payload.db.findOne<any>({\n      collection: collectionConfig.slug,\n      req,\n      where: {\n        resetPasswordExpiration: { greater_than: new Date().toISOString() },\n        resetPasswordToken: { equals: data.token },\n      },\n    })\n\n    if (!user) {\n      throw new APIError('Token is either invalid or has expired.', httpStatus.FORBIDDEN)\n    }\n\n    // TODO: replace this method\n    const { hash, salt } = await generatePasswordSaltHash({\n      collection: collectionConfig,\n      password: data.password,\n      req,\n    })\n\n    user.salt = salt\n    user.hash = hash\n\n    user.resetPasswordExpiration = new Date().toISOString()\n\n    if (collectionConfig.auth.verify) {\n      user._verified = Boolean(user._verified)\n    }\n    // /////////////////////////////////////\n    // beforeValidate - Collection\n    // /////////////////////////////////////\n\n    await collectionConfig.hooks.beforeValidate.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      await hook({\n        collection: args.collection?.config,\n        context: req.context,\n        data: user,\n        operation: 'update',\n        req,\n      })\n    }, Promise.resolve())\n\n    // /////////////////////////////////////\n    // Update new password\n    // /////////////////////////////////////\n\n    const doc = await payload.db.updateOne({\n      id: user.id,\n      collection: collectionConfig.slug,\n      data: user,\n      req,\n    })\n\n    await authenticateLocalStrategy({ doc, password: data.password })\n\n    const fieldsToSign = getFieldsToSign({\n      collectionConfig,\n      email: user.email,\n      user,\n    })\n\n    const { token } = await jwtSign({\n      fieldsToSign,\n      secret,\n      tokenExpiration: collectionConfig.auth.tokenExpiration,\n    })\n\n    const fullUser = await payload.findByID({\n      id: user.id,\n      collection: collectionConfig.slug,\n      depth,\n      overrideAccess,\n      req,\n    })\n    if (shouldCommit) {\n      await commitTransaction(req)\n    }\n\n    const result = {\n      token,\n      user: fullUser,\n    }\n\n    return result\n  } catch (error: unknown) {\n    await killTransaction(req)\n    throw error\n  }\n}\n"],"names":["httpStatus","APIError","Forbidden","commitTransaction","initTransaction","killTransaction","getFieldsToSign","jwtSign","authenticateLocalStrategy","generatePasswordSaltHash","resetPasswordOperation","args","collection","config","collectionConfig","data","depth","overrideAccess","req","payload","secret","Object","prototype","hasOwnProperty","call","BAD_REQUEST","auth","disableLocalStrategy","t","shouldCommit","user","db","findOne","slug","where","resetPasswordExpiration","greater_than","Date","toISOString","resetPasswordToken","equals","token","FORBIDDEN","hash","salt","password","verify","_verified","Boolean","hooks","beforeValidate","reduce","priorHook","hook","context","operation","Promise","resolve","doc","updateOne","id","fieldsToSign","email","tokenExpiration","fullUser","findByID","result","error"],"mappings":";;;AAAA,OAAOA,gBAAgB,cAAa;AAKpC,SAASC,QAAQ,EAAEC,SAAS,QAAQ,wBAAuB;;AAE3D,SAASE,eAAe,QAAQ,qCAAoC;AAKpE,SAASK,wBAAwB,QAAQ,kDAAiD;AAD1F,SAASD,yBAAyB,QAAQ,sCAAqC;AAF/E,SAASF,eAAe,QAAQ,wBAAuB;AACvD,SAASC,OAAO,QAAQ,YAAW;AAJnC,SAASJ,iBAAiB,QAAQ,uCAAsC;AAExE,SAASE,eAAe,QAAQ,qCAAoC;;;;;;;;;;AAsB7D,MAAMK,yBAAyB,OAAOC;IAC3C,MAAM,EACJC,YAAY,EAAEC,QAAQC,gBAAgB,EAAE,EACxCC,IAAI,EACJC,KAAK,EACLC,cAAc,EACdC,KAAK,EACHC,SAAS,EAAEC,MAAM,EAAE,EACnBD,OAAO,EACR,EACDD,GAAG,EACJ,GAAGP;IAEJ,IACE,CAACU,OAAOC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACT,MAAM,YAC5C,CAACM,OAAOC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACT,MAAM,aAC5C;QACA,MAAM,gXAAId,WAAAA,CAAS,oOAA0BD,UAAAA,CAAWyB,WAAW;IACrE;IAEA,IAAIX,iBAAiBY,IAAI,CAACC,oBAAoB,EAAE;QAC9C,MAAM,iXAAIzB,YAAAA,CAAUgB,IAAIU,CAAC;IAC3B;IAEA,IAAI;QACF,MAAMC,eAAe,gYAAMzB,kBAAAA,EAAgBc;QAE3C,wCAAwC;QACxC,iBAAiB;QACjB,wCAAwC;QAExC,MAAMY,OAAO,MAAMX,QAAQY,EAAE,CAACC,OAAO,CAAM;YACzCpB,YAAYE,iBAAiBmB,IAAI;YACjCf;YACAgB,OAAO;gBACLC,yBAAyB;oBAAEC,cAAc,IAAIC,OAAOC,WAAW;gBAAG;gBAClEC,oBAAoB;oBAAEC,QAAQzB,KAAK0B,KAAK;gBAAC;YAC3C;QACF;QAEA,IAAI,CAACX,MAAM;YACT,MAAM,+WAAI7B,YAAAA,CAAS,qPAA2CD,UAAAA,CAAW0C,SAAS;QACpF;QAEA,4BAA4B;QAC5B,MAAM,EAAEC,IAAI,EAAEC,IAAI,EAAE,GAAG,OAAMnC,+aAAAA,EAAyB;YACpDG,YAAYE;YACZ+B,UAAU9B,KAAK8B,QAAQ;YACvB3B;QACF;QAEAY,KAAKc,IAAI,GAAGA;QACZd,KAAKa,IAAI,GAAGA;QAEZb,KAAKK,uBAAuB,GAAG,IAAIE,OAAOC,WAAW;QAErD,IAAIxB,iBAAiBY,IAAI,CAACoB,MAAM,EAAE;YAChChB,KAAKiB,SAAS,GAAGC,QAAQlB,KAAKiB,SAAS;QACzC;QACA,wCAAwC;QACxC,8BAA8B;QAC9B,wCAAwC;QAExC,MAAMjC,iBAAiBmC,KAAK,CAACC,cAAc,CAACC,MAAM,CAAC,OAAOC,WAAWC;YACnE,MAAMD;YAEN,MAAMC,KAAK;gBACTzC,YAAYD,KAAKC,UAAU,EAAEC;gBAC7ByC,SAASpC,IAAIoC,OAAO;gBACpBvC,MAAMe;gBACNyB,WAAW;gBACXrC;YACF;QACF,GAAGsC,QAAQC,OAAO;QAElB,wCAAwC;QACxC,sBAAsB;QACtB,wCAAwC;QAExC,MAAMC,MAAM,MAAMvC,QAAQY,EAAE,CAAC4B,SAAS,CAAC;YACrCC,IAAI9B,KAAK8B,EAAE;YACXhD,YAAYE,iBAAiBmB,IAAI;YACjClB,MAAMe;YACNZ;QACF;QAEA,+YAAMV,4BAAAA,EAA0B;YAAEkD;YAAKb,UAAU9B,KAAK8B,QAAQ;QAAC;QAE/D,MAAMgB,oYAAevD,kBAAAA,EAAgB;YACnCQ;YACAgD,OAAOhC,KAAKgC,KAAK;YACjBhC;QACF;QAEA,MAAM,EAAEW,KAAK,EAAE,GAAG,+WAAMlC,UAAAA,EAAQ;YAC9BsD;YACAzC;YACA2C,iBAAiBjD,iBAAiBY,IAAI,CAACqC,eAAe;QACxD;QAEA,MAAMC,WAAW,MAAM7C,QAAQ8C,QAAQ,CAAC;YACtCL,IAAI9B,KAAK8B,EAAE;YACXhD,YAAYE,iBAAiBmB,IAAI;YACjCjB;YACAC;YACAC;QACF;QACA,IAAIW,cAAc;YAChB,MAAM1B,gZAAAA,EAAkBe;QAC1B;QAEA,MAAMgD,SAAS;YACbzB;YACAX,MAAMkC;QACR;QAEA,OAAOE;IACT,EAAE,OAAOC,OAAgB;QACvB,gYAAM9D,kBAAAA,EAAgBa;QACtB,MAAMiD;IACR;AACF,EAAC","ignoreList":[0]}},
    {"offset": {"line": 1598, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1604, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/auth/operations/local/resetPassword.ts"],"sourcesContent":["import type { CollectionSlug, Payload, RequestContext } from '../../../index.js'\nimport type { PayloadRequest } from '../../../types/index.js'\nimport type { Result } from '../resetPassword.js'\n\nimport { APIError } from '../../../errors/index.js'\nimport { createLocalReq } from '../../../utilities/createLocalReq.js'\nimport { resetPasswordOperation } from '../resetPassword.js'\n\nexport type Options<T extends CollectionSlug> = {\n  collection: T\n  context?: RequestContext\n  data: {\n    password: string\n    token: string\n  }\n  overrideAccess: boolean\n  req?: Partial<PayloadRequest>\n}\n\nasync function localResetPassword<T extends CollectionSlug>(\n  payload: Payload,\n  options: Options<T>,\n): Promise<Result> {\n  const { collection: collectionSlug, data, overrideAccess } = options\n\n  const collection = payload.collections[collectionSlug]\n\n  if (!collection) {\n    throw new APIError(\n      `The collection with slug ${String(\n        collectionSlug,\n      )} can't be found. Reset Password Operation.`,\n    )\n  }\n\n  const result = await resetPasswordOperation({\n    collection,\n    data,\n    overrideAccess,\n    req: await createLocalReq(options, payload),\n  })\n\n  if (collection.config.auth.removeTokenFromResponses) {\n    delete result.token\n  }\n\n  return result\n}\n\nexport const resetPassword = localResetPassword\n"],"names":["APIError","createLocalReq","resetPasswordOperation","localResetPassword","payload","options","collection","collectionSlug","data","overrideAccess","collections","String","result","req","config","auth","removeTokenFromResponses","token","resetPassword"],"mappings":";;;AAIA,SAASA,QAAQ,QAAQ,2BAA0B;AAEnD,SAASE,sBAAsB,QAAQ,sBAAqB;AAD5D,SAASD,cAAc,QAAQ,uCAAsC;;;;AAcrE,eAAeE,mBACbC,OAAgB,EAChBC,OAAmB;IAEnB,MAAM,EAAEC,YAAYC,cAAc,EAAEC,IAAI,EAAEC,cAAc,EAAE,GAAGJ;IAE7D,MAAMC,aAAaF,QAAQM,WAAW,CAACH,eAAe;IAEtD,IAAI,CAACD,YAAY;QACf,MAAM,gXAAIN,WAAAA,CACR,CAAC,yBAAyB,EAAEW,OAC1BJ,gBACA,0CAA0C,CAAC;IAEjD;IAEA,MAAMK,SAAS,MAAMV,0ZAAAA,EAAuB;QAC1CI;QACAE;QACAC;QACAI,KAAK,+XAAMZ,iBAAAA,EAAeI,SAASD;IACrC;IAEA,IAAIE,WAAWQ,MAAM,CAACC,IAAI,CAACC,wBAAwB,EAAE;QACnD,OAAOJ,OAAOK,KAAK;IACrB;IAEA,OAAOL;AACT;AAEO,MAAMM,gBAAgBf,mBAAkB","ignoreList":[0]}},
    {"offset": {"line": 1631, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1637, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/auth/executeAccess.ts"],"sourcesContent":["import type { Access, AccessResult } from '../config/types.js'\nimport type { PayloadRequest } from '../types/index.js'\n\nimport { Forbidden } from '../errors/index.js'\n\ntype OperationArgs = {\n  data?: any\n  disableErrors?: boolean\n  id?: number | string\n  isReadingStaticFile?: boolean\n  req: PayloadRequest\n}\nconst executeAccess = async (\n  { id, data, disableErrors, isReadingStaticFile = false, req }: OperationArgs,\n  access: Access,\n): Promise<AccessResult> => {\n  if (access) {\n    const result = await access({\n      id,\n      data,\n      isReadingStaticFile,\n      req,\n    })\n\n    if (!result) {\n      if (!disableErrors) {\n        throw new Forbidden(req.t)\n      }\n    }\n\n    return result\n  }\n\n  if (req.user) {\n    return true\n  }\n\n  if (!disableErrors) {\n    throw new Forbidden(req.t)\n  }\n  return false\n}\n\nexport default executeAccess\n"],"names":["Forbidden","executeAccess","id","data","disableErrors","isReadingStaticFile","req","access","result","t","user"],"mappings":";;;AAGA,SAASA,SAAS,QAAQ,qBAAoB;;AAS9C,MAAMC,gBAAgB,OACpB,EAAEC,EAAE,EAAEC,IAAI,EAAEC,aAAa,EAAEC,sBAAsB,KAAK,EAAEC,GAAG,EAAiB,EAC5EC;IAEA,IAAIA,QAAQ;QACV,MAAMC,SAAS,MAAMD,OAAO;YAC1BL;YACAC;YACAE;YACAC;QACF;QAEA,IAAI,CAACE,QAAQ;YACX,IAAI,CAACJ,eAAe;gBAClB,MAAM,iXAAIJ,YAAAA,CAAUM,IAAIG,CAAC;YAC3B;QACF;QAEA,OAAOD;IACT;IAEA,IAAIF,IAAII,IAAI,EAAE;QACZ,OAAO;IACT;IAEA,IAAI,CAACN,eAAe;QAClB,MAAM,iXAAIJ,YAAAA,CAAUM,IAAIG,CAAC;IAC3B;IACA,OAAO;AACT;uCAEeR,cAAa","ignoreList":[0]}},
    {"offset": {"line": 1667, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1673, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/auth/operations/unlock.ts"],"sourcesContent":["import httpStatus from 'http-status'\n\nimport type {\n  AuthOperationsFromCollectionSlug,\n  Collection,\n} from '../../collections/config/types.js'\nimport type { CollectionSlug } from '../../index.js'\nimport type { PayloadRequest, Where } from '../../types/index.js'\n\nimport { APIError } from '../../errors/index.js'\nimport { Forbidden } from '../../index.js'\nimport { commitTransaction } from '../../utilities/commitTransaction.js'\nimport { initTransaction } from '../../utilities/initTransaction.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport executeAccess from '../executeAccess.js'\nimport { getLoginOptions } from '../getLoginOptions.js'\nimport { resetLoginAttempts } from '../strategies/local/resetLoginAttempts.js'\n\nexport type Arguments<TSlug extends CollectionSlug> = {\n  collection: Collection\n  data: AuthOperationsFromCollectionSlug<TSlug>['unlock']\n  overrideAccess?: boolean\n  req: PayloadRequest\n}\n\nexport const unlockOperation = async <TSlug extends CollectionSlug>(\n  args: Arguments<TSlug>,\n): Promise<boolean> => {\n  const {\n    collection: { config: collectionConfig },\n    overrideAccess,\n    req: { locale },\n    req,\n  } = args\n\n  const loginWithUsername = collectionConfig.auth.loginWithUsername\n\n  const { canLoginWithEmail, canLoginWithUsername } = getLoginOptions(loginWithUsername)\n\n  const sanitizedEmail = canLoginWithEmail && (args.data?.email || '').toLowerCase().trim()\n  const sanitizedUsername =\n    (canLoginWithUsername &&\n      'username' in args.data &&\n      typeof args.data.username === 'string' &&\n      args.data.username.toLowerCase().trim()) ||\n    null\n\n  if (collectionConfig.auth.disableLocalStrategy) {\n    throw new Forbidden(req.t)\n  }\n  if (!sanitizedEmail && !sanitizedUsername) {\n    throw new APIError(\n      `Missing ${collectionConfig.auth.loginWithUsername ? 'username' : 'email'}.`,\n      httpStatus.BAD_REQUEST,\n    )\n  }\n\n  try {\n    const shouldCommit = await initTransaction(req)\n\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    if (!overrideAccess) {\n      await executeAccess({ req }, collectionConfig.access.unlock)\n    }\n\n    // /////////////////////////////////////\n    // Unlock\n    // /////////////////////////////////////\n\n    let whereConstraint: Where = {}\n\n    if (canLoginWithEmail && sanitizedEmail) {\n      whereConstraint = {\n        email: {\n          equals: sanitizedEmail,\n        },\n      }\n    } else if (canLoginWithUsername && sanitizedUsername) {\n      whereConstraint = {\n        username: {\n          equals: sanitizedUsername,\n        },\n      }\n    }\n\n    const user = await req.payload.db.findOne({\n      collection: collectionConfig.slug,\n      locale,\n      req,\n      where: whereConstraint,\n    })\n\n    let result\n\n    if (user) {\n      await resetLoginAttempts({\n        collection: collectionConfig,\n        doc: user,\n        payload: req.payload,\n        req,\n      })\n      result = true\n    } else {\n      result = null\n    }\n\n    if (shouldCommit) {\n      await commitTransaction(req)\n    }\n\n    return result\n  } catch (error: unknown) {\n    await killTransaction(req)\n    throw error\n  }\n}\n"],"names":["httpStatus","APIError","Forbidden","commitTransaction","initTransaction","killTransaction","executeAccess","getLoginOptions","resetLoginAttempts","unlockOperation","args","collection","config","collectionConfig","overrideAccess","req","locale","loginWithUsername","auth","canLoginWithEmail","canLoginWithUsername","sanitizedEmail","data","email","toLowerCase","trim","sanitizedUsername","username","disableLocalStrategy","t","BAD_REQUEST","shouldCommit","access","unlock","whereConstraint","equals","user","payload","db","findOne","slug","where","result","doc","error"],"mappings":";;;AAAA,OAAOA,gBAAgB,cAAa;AAepC,SAASO,eAAe,QAAQ,wBAAuB;AALvD,SAASL,SAAS,QAAQ,iBAAgB;AAD1C,SAASD,QAAQ,QAAQ,wBAAuB;AAGhD,SAASG,eAAe,QAAQ,qCAAoC;AAEpE,OAAOE,mBAAmB,sBAAqB;AAE/C,SAASE,kBAAkB,QAAQ,4CAA2C;AAL9E,SAASL,iBAAiB,QAAQ,uCAAsC;AAExE,SAASE,eAAe,QAAQ,qCAAoC;;;;;;;;;;AAY7D,MAAMI,kBAAkB,OAC7BC;IAEA,MAAM,EACJC,YAAY,EAAEC,QAAQC,gBAAgB,EAAE,EACxCC,cAAc,EACdC,KAAK,EAAEC,MAAM,EAAE,EACfD,GAAG,EACJ,GAAGL;IAEJ,MAAMO,oBAAoBJ,iBAAiBK,IAAI,CAACD,iBAAiB;IAEjE,MAAM,EAAEE,iBAAiB,EAAEC,oBAAoB,EAAE,OAAGb,mYAAAA,EAAgBU;IAEpE,MAAMI,iBAAiBF,qBAAsBT,CAAAA,KAAKY,IAAI,EAAEC,SAAS,EAAC,EAAGC,WAAW,GAAGC,IAAI;IACvF,MAAMC,oBACHN,wBACC,cAAcV,KAAKY,IAAI,IACvB,OAAOZ,KAAKY,IAAI,CAACK,QAAQ,KAAK,YAC9BjB,KAAKY,IAAI,CAACK,QAAQ,CAACH,WAAW,GAAGC,IAAI,MACvC;IAEF,IAAIZ,iBAAiBK,IAAI,CAACU,oBAAoB,EAAE;QAC9C,MAAM,iXAAI1B,YAAAA,CAAUa,IAAIc,CAAC;IAC3B;IACA,IAAI,CAACR,kBAAkB,CAACK,mBAAmB;QACzC,MAAM,gXAAIzB,WAAAA,CACR,CAAC,QAAQ,EAAEY,iBAAiBK,IAAI,CAACD,iBAAiB,GAAG,aAAa,QAAQ,CAAC,CAAC,4MAC5EjB,UAAAA,CAAW8B,WAAW;IAE1B;IAEA,IAAI;QACF,MAAMC,eAAe,gYAAM3B,kBAAAA,EAAgBW;QAE3C,wCAAwC;QACxC,SAAS;QACT,wCAAwC;QAExC,IAAI,CAACD,gBAAgB;YACnB,MAAMR,6XAAAA,EAAc;gBAAES;YAAI,GAAGF,iBAAiBmB,MAAM,CAACC,MAAM;QAC7D;QAEA,wCAAwC;QACxC,SAAS;QACT,wCAAwC;QAExC,IAAIC,kBAAyB,CAAC;QAE9B,IAAIf,qBAAqBE,gBAAgB;YACvCa,kBAAkB;gBAChBX,OAAO;oBACLY,QAAQd;gBACV;YACF;QACF,OAAO,IAAID,wBAAwBM,mBAAmB;YACpDQ,kBAAkB;gBAChBP,UAAU;oBACRQ,QAAQT;gBACV;YACF;QACF;QAEA,MAAMU,OAAO,MAAMrB,IAAIsB,OAAO,CAACC,EAAE,CAACC,OAAO,CAAC;YACxC5B,YAAYE,iBAAiB2B,IAAI;YACjCxB;YACAD;YACA0B,OAAOP;QACT;QAEA,IAAIQ;QAEJ,IAAIN,MAAM;YACR,qZAAM5B,qBAAAA,EAAmB;gBACvBG,YAAYE;gBACZ8B,KAAKP;gBACLC,SAAStB,IAAIsB,OAAO;gBACpBtB;YACF;YACA2B,SAAS;QACX,OAAO;YACLA,SAAS;QACX;QAEA,IAAIX,cAAc;YAChB,kYAAM5B,oBAAAA,EAAkBY;QAC1B;QAEA,OAAO2B;IACT,EAAE,OAAOE,OAAgB;QACvB,gYAAMvC,kBAAAA,EAAgBU;QACtB,MAAM6B;IACR;AACF,EAAC","ignoreList":[0]}},
    {"offset": {"line": 1760, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1766, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/auth/operations/local/unlock.ts"],"sourcesContent":["import type {\n  AuthOperationsFromCollectionSlug,\n  CollectionSlug,\n  Payload,\n  RequestContext,\n} from '../../../index.js'\nimport type { PayloadRequest } from '../../../types/index.js'\n\nimport { APIError } from '../../../errors/index.js'\nimport { createLocalReq } from '../../../utilities/createLocalReq.js'\nimport { unlockOperation } from '../unlock.js'\n\nexport type Options<TSlug extends CollectionSlug> = {\n  collection: TSlug\n  context?: RequestContext\n  data: AuthOperationsFromCollectionSlug<TSlug>['unlock']\n  overrideAccess: boolean\n  req?: Partial<PayloadRequest>\n}\n\nasync function localUnlock<TSlug extends CollectionSlug>(\n  payload: Payload,\n  options: Options<TSlug>,\n): Promise<boolean> {\n  const { collection: collectionSlug, data, overrideAccess = true } = options\n\n  const collection = payload.collections[collectionSlug]\n\n  if (!collection) {\n    throw new APIError(\n      `The collection with slug ${String(collectionSlug)} can't be found. Unlock Operation.`,\n    )\n  }\n\n  return unlockOperation<TSlug>({\n    collection,\n    data,\n    overrideAccess,\n    req: await createLocalReq(options, payload),\n  })\n}\n\nexport const unlock = localUnlock\n"],"names":["APIError","createLocalReq","unlockOperation","localUnlock","payload","options","collection","collectionSlug","data","overrideAccess","collections","String","req","unlock"],"mappings":";;;AAQA,SAASA,QAAQ,QAAQ,2BAA0B;AAEnD,SAASE,eAAe,QAAQ,eAAc;AAD9C,SAASD,cAAc,QAAQ,uCAAsC;;;;AAWrE,eAAeE,YACbC,OAAgB,EAChBC,OAAuB;IAEvB,MAAM,EAAEC,YAAYC,cAAc,EAAEC,IAAI,EAAEC,iBAAiB,IAAI,EAAE,GAAGJ;IAEpE,MAAMC,aAAaF,QAAQM,WAAW,CAACH,eAAe;IAEtD,IAAI,CAACD,YAAY;QACf,MAAM,gXAAIN,WAAAA,CACR,CAAC,yBAAyB,EAAEW,OAAOJ,gBAAgB,kCAAkC,CAAC;IAE1F;IAEA,iYAAOL,kBAAAA,EAAuB;QAC5BI;QACAE;QACAC;QACAG,KAAK,+XAAMX,iBAAAA,EAAeI,SAASD;IACrC;AACF;AAEO,MAAMS,SAASV,YAAW","ignoreList":[0]}},
    {"offset": {"line": 1789, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1795, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/auth/operations/verifyEmail.ts"],"sourcesContent":["import httpStatus from 'http-status'\n\nimport type { Collection } from '../../collections/config/types.js'\nimport type { PayloadRequest } from '../../types/index.js'\n\nimport { APIError, Forbidden } from '../../errors/index.js'\nimport { commitTransaction } from '../../utilities/commitTransaction.js'\nimport { initTransaction } from '../../utilities/initTransaction.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\n\nexport type Args = {\n  collection: Collection\n  req: PayloadRequest\n  token: string\n}\n\nexport const verifyEmailOperation = async (args: Args): Promise<boolean> => {\n  const { collection, req, token } = args\n\n  if (collection.config.auth.disableLocalStrategy) {\n    throw new Forbidden(req.t)\n  }\n  if (!Object.prototype.hasOwnProperty.call(args, 'token')) {\n    throw new APIError('Missing required data.', httpStatus.BAD_REQUEST)\n  }\n\n  try {\n    const shouldCommit = await initTransaction(req)\n\n    const user = await req.payload.db.findOne<any>({\n      collection: collection.config.slug,\n      req,\n      where: {\n        _verificationToken: { equals: token },\n      },\n    })\n\n    if (!user) {\n      throw new APIError('Verification token is invalid.', httpStatus.FORBIDDEN)\n    }\n\n    await req.payload.db.updateOne({\n      id: user.id,\n      collection: collection.config.slug,\n      data: {\n        ...user,\n        _verificationToken: null,\n        _verified: true,\n      },\n      req,\n    })\n\n    if (shouldCommit) {\n      await commitTransaction(req)\n    }\n\n    return true\n  } catch (error: unknown) {\n    await killTransaction(req)\n    throw error\n  }\n}\n\nexport default verifyEmailOperation\n"],"names":["httpStatus","APIError","Forbidden","commitTransaction","initTransaction","killTransaction","verifyEmailOperation","args","collection","req","token","config","auth","disableLocalStrategy","t","Object","prototype","hasOwnProperty","call","BAD_REQUEST","shouldCommit","user","payload","db","findOne","slug","where","_verificationToken","equals","FORBIDDEN","updateOne","id","data","_verified","error"],"mappings":";;;;AAAA,OAAOA,gBAAgB,cAAa;AAKpC,SAASC,QAAQ,EAAEC,SAAS,QAAQ,wBAAuB;;AAE3D,SAASE,eAAe,QAAQ,qCAAoC;AADpE,SAASD,iBAAiB,QAAQ,uCAAsC;AAExE,SAASE,eAAe,QAAQ,qCAAoC;;;;;;AAQ7D,MAAMC,uBAAuB,OAAOC;IACzC,MAAM,EAAEC,UAAU,EAAEC,GAAG,EAAEC,KAAK,EAAE,GAAGH;IAEnC,IAAIC,WAAWG,MAAM,CAACC,IAAI,CAACC,oBAAoB,EAAE;QAC/C,MAAM,iXAAIX,YAAAA,CAAUO,IAAIK,CAAC;IAC3B;IACA,IAAI,CAACC,OAAOC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACX,MAAM,UAAU;QACxD,MAAM,+WAAIN,YAAAA,CAAS,oOAA0BD,UAAAA,CAAWmB,WAAW;IACrE;IAEA,IAAI;QACF,MAAMC,eAAe,gYAAMhB,kBAAAA,EAAgBK;QAE3C,MAAMY,OAAO,MAAMZ,IAAIa,OAAO,CAACC,EAAE,CAACC,OAAO,CAAM;YAC7ChB,YAAYA,WAAWG,MAAM,CAACc,IAAI;YAClChB;YACAiB,OAAO;gBACLC,oBAAoB;oBAAEC,QAAQlB;gBAAM;YACtC;QACF;QAEA,IAAI,CAACW,MAAM;YACT,MAAM,gXAAIpB,WAAAA,CAAS,4OAAkCD,UAAAA,CAAW6B,SAAS;QAC3E;QAEA,MAAMpB,IAAIa,OAAO,CAACC,EAAE,CAACO,SAAS,CAAC;YAC7BC,IAAIV,KAAKU,EAAE;YACXvB,YAAYA,WAAWG,MAAM,CAACc,IAAI;YAClCO,MAAM;gBACJ,GAAGX,IAAI;gBACPM,oBAAoB;gBACpBM,WAAW;YACb;YACAxB;QACF;QAEA,IAAIW,cAAc;YAChB,kYAAMjB,oBAAAA,EAAkBM;QAC1B;QAEA,OAAO;IACT,EAAE,OAAOyB,OAAgB;QACvB,gYAAM7B,kBAAAA,EAAgBI;QACtB,MAAMyB;IACR;AACF,EAAC;uCAEc5B,qBAAoB","ignoreList":[0]}},
    {"offset": {"line": 1853, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1859, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/auth/operations/local/verifyEmail.ts"],"sourcesContent":["import type { CollectionSlug, Payload, RequestContext } from '../../../index.js'\nimport type { PayloadRequest } from '../../../types/index.js'\n\nimport { APIError } from '../../../errors/index.js'\nimport { createLocalReq } from '../../../utilities/createLocalReq.js'\nimport { verifyEmailOperation } from '../verifyEmail.js'\n\nexport type Options<T extends CollectionSlug> = {\n  collection: T\n  context?: RequestContext\n  req?: Partial<PayloadRequest>\n  token: string\n}\n\nasync function localVerifyEmail<T extends CollectionSlug>(\n  payload: Payload,\n  options: Options<T>,\n): Promise<boolean> {\n  const { collection: collectionSlug, token } = options\n\n  const collection = payload.collections[collectionSlug]\n\n  if (!collection) {\n    throw new APIError(\n      `The collection with slug ${String(collectionSlug)} can't be found. Verify Email Operation.`,\n    )\n  }\n\n  return verifyEmailOperation({\n    collection,\n    req: await createLocalReq(options, payload),\n    token,\n  })\n}\n\nexport const verifyEmail = localVerifyEmail\n"],"names":["APIError","createLocalReq","verifyEmailOperation","localVerifyEmail","payload","options","collection","collectionSlug","token","collections","String","req","verifyEmail"],"mappings":";;;AAGA,SAASA,QAAQ,QAAQ,2BAA0B;AAEnD,SAASE,oBAAoB,QAAQ,oBAAmB;AADxD,SAASD,cAAc,QAAQ,uCAAsC;;;;AAUrE,eAAeE,iBACbC,OAAgB,EAChBC,OAAmB;IAEnB,MAAM,EAAEC,YAAYC,cAAc,EAAEC,KAAK,EAAE,GAAGH;IAE9C,MAAMC,aAAaF,QAAQK,WAAW,CAACF,eAAe;IAEtD,IAAI,CAACD,YAAY;QACf,MAAM,gXAAIN,WAAAA,CACR,CAAC,yBAAyB,EAAEU,OAAOH,gBAAgB,wCAAwC,CAAC;IAEhG;IAEA,sYAAOL,uBAAAA,EAAqB;QAC1BI;QACAK,KAAK,+XAAMV,iBAAAA,EAAeI,SAASD;QACnCI;IACF;AACF;AAEO,MAAMI,cAAcT,iBAAgB","ignoreList":[0]}},
    {"offset": {"line": 1881, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1924, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/auth/ensureUsernameOrEmail.ts"],"sourcesContent":["import type { RequiredDataFromCollectionSlug } from '../collections/config/types.js'\nimport type { AuthCollection, CollectionSlug, PayloadRequest } from '../index.js'\n\nimport { ValidationError } from '../errors/index.js'\n\ntype ValidateUsernameOrEmailArgs<TSlug extends CollectionSlug> = {\n  authOptions: AuthCollection['config']['auth']\n  collectionSlug: string\n  data: RequiredDataFromCollectionSlug<TSlug>\n  req: PayloadRequest\n} & (\n  | {\n      operation: 'create'\n      originalDoc?: never\n    }\n  | {\n      operation: 'update'\n      originalDoc: RequiredDataFromCollectionSlug<TSlug>\n    }\n)\nexport const ensureUsernameOrEmail = <TSlug extends CollectionSlug>({\n  authOptions: { disableLocalStrategy, loginWithUsername },\n  collectionSlug,\n  data,\n  operation,\n  originalDoc,\n  req,\n}: ValidateUsernameOrEmailArgs<TSlug>) => {\n  // neither username or email are required\n  // and neither are provided\n  // so we need to manually validate\n  if (\n    !disableLocalStrategy &&\n    loginWithUsername &&\n    !loginWithUsername.requireEmail &&\n    !loginWithUsername.requireUsername\n  ) {\n    let missingFields = false\n    if (operation === 'create' && !data.email && !data.username) {\n      missingFields = true\n    } else if (operation === 'update') {\n      // prevent clearing both email and username\n      if ('email' in data && !data.email && 'username' in data && !data.username) {\n        missingFields = true\n      }\n      // prevent clearing email if no username\n      if ('email' in data && !data.email && !originalDoc.username && !data?.username) {\n        missingFields = true\n      }\n      // prevent clearing username if no email\n      if ('username' in data && !data.username && !originalDoc.email && !data?.email) {\n        missingFields = true\n      }\n    }\n\n    if (missingFields) {\n      throw new ValidationError(\n        {\n          collection: collectionSlug,\n          errors: [\n            {\n              message: 'Username or email is required',\n              path: 'username',\n            },\n            {\n              message: 'Username or email is required',\n              path: 'email',\n            },\n          ],\n        },\n        req.t,\n      )\n    }\n  }\n\n  return\n}\n"],"names":["ValidationError","ensureUsernameOrEmail","authOptions","disableLocalStrategy","loginWithUsername","collectionSlug","data","operation","originalDoc","req","requireEmail","requireUsername","missingFields","email","username","collection","errors","message","path","t"],"mappings":";;;AAGA,SAASA,eAAe,QAAQ,qBAAoB;;AAiB7C,MAAMC,wBAAwB,CAA+B,EAClEC,aAAa,EAAEC,oBAAoB,EAAEC,iBAAiB,EAAE,EACxDC,cAAc,EACdC,IAAI,EACJC,SAAS,EACTC,WAAW,EACXC,GAAG,EACgC;IACnC,yCAAyC;IACzC,2BAA2B;IAC3B,kCAAkC;IAClC,IACE,CAACN,wBACDC,qBACA,CAACA,kBAAkBM,YAAY,IAC/B,CAACN,kBAAkBO,eAAe,EAClC;QACA,IAAIC,gBAAgB;QACpB,IAAIL,cAAc,YAAY,CAACD,KAAKO,KAAK,IAAI,CAACP,KAAKQ,QAAQ,EAAE;YAC3DF,gBAAgB;QAClB,OAAO,IAAIL,cAAc,UAAU;YACjC,2CAA2C;YAC3C,IAAI,WAAWD,QAAQ,CAACA,KAAKO,KAAK,IAAI,cAAcP,QAAQ,CAACA,KAAKQ,QAAQ,EAAE;gBAC1EF,gBAAgB;YAClB;YACA,wCAAwC;YACxC,IAAI,WAAWN,QAAQ,CAACA,KAAKO,KAAK,IAAI,CAACL,YAAYM,QAAQ,IAAI,CAACR,MAAMQ,UAAU;gBAC9EF,gBAAgB;YAClB;YACA,wCAAwC;YACxC,IAAI,cAAcN,QAAQ,CAACA,KAAKQ,QAAQ,IAAI,CAACN,YAAYK,KAAK,IAAI,CAACP,MAAMO,OAAO;gBAC9ED,gBAAgB;YAClB;QACF;QAEA,IAAIA,eAAe;YACjB,MAAM,uXAAIZ,kBAAAA,CACR;gBACEe,YAAYV;gBACZW,QAAQ;oBACN;wBACEC,SAAS;wBACTC,MAAM;oBACR;oBACA;wBACED,SAAS;wBACTC,MAAM;oBACR;iBACD;YACH,GACAT,IAAIU,CAAC;QAET;IACF;IAEA;AACF,EAAC","ignoreList":[0]}},
    {"offset": {"line": 1969, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1975, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/auth/strategies/local/register.ts"],"sourcesContent":["import type { SanitizedCollectionConfig } from '../../../collections/config/types.js'\nimport type { JsonObject, Payload } from '../../../index.js'\nimport type { PayloadRequest, SelectType, Where } from '../../../types/index.js'\n\nimport { ValidationError } from '../../../errors/index.js'\nimport { getLoginOptions } from '../../getLoginOptions.js'\nimport { generatePasswordSaltHash } from './generatePasswordSaltHash.js'\n\ntype Args = {\n  collection: SanitizedCollectionConfig\n  doc: JsonObject\n  password: string\n  payload: Payload\n  req: PayloadRequest\n  select?: SelectType\n}\n\nexport const registerLocalStrategy = async ({\n  collection,\n  doc,\n  password,\n  payload,\n  req,\n  select,\n}: Args): Promise<Record<string, unknown>> => {\n  const loginWithUsername = collection?.auth?.loginWithUsername\n\n  const { canLoginWithEmail, canLoginWithUsername } = getLoginOptions(loginWithUsername)\n\n  let whereConstraint: Where\n\n  if (!canLoginWithUsername) {\n    whereConstraint = {\n      email: {\n        equals: doc.email,\n      },\n    }\n  } else {\n    whereConstraint = {\n      or: [],\n    }\n\n    if (canLoginWithEmail && doc.email) {\n      whereConstraint.or?.push({\n        email: {\n          equals: doc.email,\n        },\n      })\n    }\n\n    if (doc.username) {\n      whereConstraint.or?.push({\n        username: {\n          equals: doc.username,\n        },\n      })\n    }\n  }\n\n  const existingUser = await payload.find({\n    collection: collection.slug,\n    depth: 0,\n    limit: 1,\n    pagination: false,\n    req,\n    where: whereConstraint,\n  })\n\n  if (existingUser.docs.length > 0) {\n    throw new ValidationError({\n      collection: collection.slug,\n      errors: [\n        canLoginWithUsername\n          ? {\n              message: req.t('error:usernameAlreadyRegistered'),\n              path: 'username',\n            }\n          : { message: req.t('error:userEmailAlreadyRegistered'), path: 'email' },\n      ],\n    })\n  }\n\n  const { hash, salt } = await generatePasswordSaltHash({ collection, password, req })\n\n  const sanitizedDoc = { ...doc }\n  if (sanitizedDoc.password) {\n    delete sanitizedDoc.password\n  }\n\n  return payload.db.create({\n    collection: collection.slug,\n    data: {\n      ...sanitizedDoc,\n      hash,\n      salt,\n    },\n    req,\n    select,\n  })\n}\n"],"names":["ValidationError","getLoginOptions","generatePasswordSaltHash","registerLocalStrategy","collection","doc","password","payload","req","select","loginWithUsername","auth","canLoginWithEmail","canLoginWithUsername","whereConstraint","email","equals","or","push","username","existingUser","find","slug","depth","limit","pagination","where","docs","length","errors","message","t","path","hash","salt","sanitizedDoc","db","create","data"],"mappings":";;;AAKA,SAASC,eAAe,QAAQ,2BAA0B;AAD1D,SAASD,eAAe,QAAQ,2BAA0B;AAE1D,SAASE,wBAAwB,QAAQ,gCAA+B;;;;AAWjE,MAAMC,wBAAwB,OAAO,EAC1CC,UAAU,EACVC,GAAG,EACHC,QAAQ,EACRC,OAAO,EACPC,GAAG,EACHC,MAAM,EACD;IACL,MAAMC,oBAAoBN,YAAYO,MAAMD;IAE5C,MAAM,EAAEE,iBAAiB,EAAEC,oBAAoB,EAAE,wXAAGZ,kBAAAA,EAAgBS;IAEpE,IAAII;IAEJ,IAAI,CAACD,sBAAsB;QACzBC,kBAAkB;YAChBC,OAAO;gBACLC,QAAQX,IAAIU,KAAK;YACnB;QACF;IACF,OAAO;QACLD,kBAAkB;YAChBG,IAAI,EAAE;QACR;QAEA,IAAIL,qBAAqBP,IAAIU,KAAK,EAAE;YAClCD,gBAAgBG,EAAE,EAAEC,KAAK;gBACvBH,OAAO;oBACLC,QAAQX,IAAIU,KAAK;gBACnB;YACF;QACF;QAEA,IAAIV,IAAIc,QAAQ,EAAE;YAChBL,gBAAgBG,EAAE,EAAEC,KAAK;gBACvBC,UAAU;oBACRH,QAAQX,IAAIc,QAAQ;gBACtB;YACF;QACF;IACF;IAEA,MAAMC,eAAe,MAAMb,QAAQc,IAAI,CAAC;QACtCjB,YAAYA,WAAWkB,IAAI;QAC3BC,OAAO;QACPC,OAAO;QACPC,YAAY;QACZjB;QACAkB,OAAOZ;IACT;IAEA,IAAIM,aAAaO,IAAI,CAACC,MAAM,GAAG,GAAG;QAChC,MAAM,uXAAI5B,kBAAAA,CAAgB;YACxBI,YAAYA,WAAWkB,IAAI;YAC3BO,QAAQ;gBACNhB,uBACI;oBACEiB,SAAStB,IAAIuB,CAAC,CAAC;oBACfC,MAAM;gBACR,IACA;oBAAEF,SAAStB,IAAIuB,CAAC,CAAC;oBAAqCC,MAAM;gBAAQ;aACzE;QACH;IACF;IAEA,MAAM,EAAEC,IAAI,EAAEC,IAAI,EAAE,GAAG,2ZAAMhC,2BAAAA,EAAyB;QAAEE;QAAYE;QAAUE;IAAI;IAElF,MAAM2B,eAAe;QAAE,GAAG9B,GAAG;IAAC;IAC9B,IAAI8B,aAAa7B,QAAQ,EAAE;QACzB,OAAO6B,aAAa7B,QAAQ;IAC9B;IAEA,OAAOC,QAAQ6B,EAAE,CAACC,MAAM,CAAC;QACvBjC,YAAYA,WAAWkB,IAAI;QAC3BgB,MAAM;YACJ,GAAGH,YAAY;YACfF;YACAC;QACF;QACA1B;QACAC;IACF;AACF,EAAC","ignoreList":[0]}},
    {"offset": {"line": 2057, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2063, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/auth/sendVerificationEmail.ts"],"sourcesContent":["import { URL } from 'url'\n\nimport type { Collection } from '../collections/config/types.js'\nimport type { SanitizedConfig } from '../config/types.js'\nimport type { InitializedEmailAdapter } from '../email/types.js'\nimport type { PayloadRequest } from '../types/index.js'\nimport type { User, VerifyConfig } from './types.js'\n\ntype Args = {\n  collection: Collection\n  config: SanitizedConfig\n  disableEmail: boolean\n  email: InitializedEmailAdapter\n  req: PayloadRequest\n  token: string\n  user: User\n}\n\nexport async function sendVerificationEmail(args: Args): Promise<void> {\n  // Verify token from e-mail\n  const {\n    collection: { config: collectionConfig },\n    config,\n    disableEmail,\n    email,\n    req,\n    token,\n    user,\n  } = args\n\n  if (!disableEmail) {\n    const protocol = new URL(req.url).protocol // includes the final :\n    const serverURL =\n      config.serverURL !== null && config.serverURL !== ''\n        ? config.serverURL\n        : `${protocol}//${req.headers.get('host')}`\n\n    const verificationURL = `${serverURL}${config.routes.admin}/${collectionConfig.slug}/verify/${token}`\n\n    let html = `${req.t('authentication:newAccountCreated', {\n      serverURL: config.serverURL,\n      verificationURL,\n    })}`\n\n    const verify = collectionConfig.auth.verify as VerifyConfig\n\n    // Allow config to override email content\n    if (typeof verify.generateEmailHTML === 'function') {\n      html = await verify.generateEmailHTML({\n        req,\n        token,\n        user,\n      })\n    }\n\n    let subject = req.t('authentication:verifyYourEmail')\n\n    // Allow config to override email subject\n    if (typeof verify.generateEmailSubject === 'function') {\n      subject = await verify.generateEmailSubject({\n        req,\n        token,\n        user,\n      })\n    }\n\n    await email.sendEmail({\n      from: `\"${email.defaultFromName}\" <${email.defaultFromAddress}>`,\n      html,\n      subject,\n      to: user.email,\n    })\n  }\n}\n"],"names":["URL","sendVerificationEmail","args","collection","config","collectionConfig","disableEmail","email","req","token","user","protocol","url","serverURL","headers","get","verificationURL","routes","admin","slug","html","t","verify","auth","generateEmailHTML","subject","generateEmailSubject","sendEmail","from","defaultFromName","defaultFromAddress","to"],"mappings":";;;AAAA,SAASA,GAAG,QAAQ,MAAK;;AAkBlB,eAAeC,sBAAsBC,IAAU;IACpD,2BAA2B;IAC3B,MAAM,EACJC,YAAY,EAAEC,QAAQC,gBAAgB,EAAE,EACxCD,MAAM,EACNE,YAAY,EACZC,KAAK,EACLC,GAAG,EACHC,KAAK,EACLC,IAAI,EACL,GAAGR;IAEJ,IAAI,CAACI,cAAc;QACjB,MAAMK,WAAW,oGAAIX,MAAAA,CAAIQ,IAAII,GAAG,EAAED,QAAQ,CAAC,uBAAuB;;QAClE,MAAME,YACJT,OAAOS,SAAS,KAAK,QAAQT,OAAOS,SAAS,KAAK,KAC9CT,OAAOS,SAAS,GAChB,GAAGF,SAAS,EAAE,EAAEH,IAAIM,OAAO,CAACC,GAAG,CAAC,SAAS;QAE/C,MAAMC,kBAAkB,GAAGH,YAAYT,OAAOa,MAAM,CAACC,KAAK,CAAC,CAAC,EAAEb,iBAAiBc,IAAI,CAAC,QAAQ,EAAEV,OAAO;QAErG,IAAIW,OAAO,GAAGZ,IAAIa,CAAC,CAAC,oCAAoC;YACtDR,WAAWT,OAAOS,SAAS;YAC3BG;QACF,IAAI;QAEJ,MAAMM,SAASjB,iBAAiBkB,IAAI,CAACD,MAAM;QAE3C,yCAAyC;QACzC,IAAI,OAAOA,OAAOE,iBAAiB,KAAK,YAAY;YAClDJ,OAAO,MAAME,OAAOE,iBAAiB,CAAC;gBACpChB;gBACAC;gBACAC;YACF;QACF;QAEA,IAAIe,UAAUjB,IAAIa,CAAC,CAAC;QAEpB,yCAAyC;QACzC,IAAI,OAAOC,OAAOI,oBAAoB,KAAK,YAAY;YACrDD,UAAU,MAAMH,OAAOI,oBAAoB,CAAC;gBAC1ClB;gBACAC;gBACAC;YACF;QACF;QAEA,MAAMH,MAAMoB,SAAS,CAAC;YACpBC,MAAM,CAAC,CAAC,EAAErB,MAAMsB,eAAe,CAAC,GAAG,EAAEtB,MAAMuB,kBAAkB,CAAC,CAAC,CAAC;YAChEV;YACAK;YACAM,IAAIrB,KAAKH,KAAK;QAChB;IACF;AACF","ignoreList":[0]}},
    {"offset": {"line": 2106, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2112, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/auth/crypto.ts"],"sourcesContent":["import crypto from 'crypto'\n\nconst algorithm = 'aes-256-ctr'\n\nexport function encrypt(text: string): string {\n  const iv = crypto.randomBytes(16)\n  const cipher = crypto.createCipheriv(algorithm, this.secret, iv)\n\n  const encrypted = Buffer.concat([cipher.update(text), cipher.final()])\n\n  const ivString = iv.toString('hex')\n  const encryptedString = encrypted.toString('hex')\n\n  return `${ivString}${encryptedString}`\n}\n\nexport function decrypt(hash: string): string {\n  const iv = hash.slice(0, 32)\n  const content = hash.slice(32)\n\n  const decipher = crypto.createDecipheriv(algorithm, this.secret, Buffer.from(iv, 'hex'))\n\n  const decrypted = Buffer.concat([decipher.update(Buffer.from(content, 'hex')), decipher.final()])\n\n  return decrypted.toString()\n}\n"],"names":["crypto","algorithm","encrypt","text","iv","randomBytes","cipher","createCipheriv","secret","encrypted","Buffer","concat","update","final","ivString","toString","encryptedString","decrypt","hash","slice","content","decipher","createDecipheriv","from","decrypted"],"mappings":";;;;AAAA,OAAOA,YAAY,SAAQ;;AAE3B,MAAMC,YAAY;AAEX,SAASC,QAAQC,IAAY;IAClC,MAAMC,2GAAKJ,UAAAA,CAAOK,WAAW,CAAC;IAC9B,MAAMC,+GAASN,UAAAA,CAAOO,cAAc,CAACN,WAAW,IAAI,CAACO,MAAM,EAAEJ;IAE7D,MAAMK,YAAYC,OAAOC,MAAM,CAAC;QAACL,OAAOM,MAAM,CAACT;QAAOG,OAAOO,KAAK;KAAG;IAErE,MAAMC,WAAWV,GAAGW,QAAQ,CAAC;IAC7B,MAAMC,kBAAkBP,UAAUM,QAAQ,CAAC;IAE3C,OAAO,GAAGD,WAAWE,iBAAiB;AACxC;AAEO,SAASC,QAAQC,IAAY;IAClC,MAAMd,KAAKc,KAAKC,KAAK,CAAC,GAAG;IACzB,MAAMC,UAAUF,KAAKC,KAAK,CAAC;IAE3B,MAAME,iHAAWrB,UAAAA,CAAOsB,gBAAgB,CAACrB,WAAW,IAAI,CAACO,MAAM,EAAEE,OAAOa,IAAI,CAACnB,IAAI;IAEjF,MAAMoB,YAAYd,OAAOC,MAAM,CAAC;QAACU,SAAST,MAAM,CAACF,OAAOa,IAAI,CAACH,SAAS;QAASC,SAASR,KAAK;KAAG;IAEhG,OAAOW,UAAUT,QAAQ;AAC3B","ignoreList":[0]}},
    {"offset": {"line": 2140, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2146, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/auth/strategies/apiKey.ts"],"sourcesContent":["import crypto from 'crypto'\n\nimport type { SanitizedCollectionConfig } from '../../collections/config/types.js'\nimport type { Where } from '../../types/index.js'\nimport type { AuthStrategyFunction, User } from '../index.js'\n\nexport const APIKeyAuthentication =\n  (collectionConfig: SanitizedCollectionConfig): AuthStrategyFunction =>\n  async ({ headers, payload }) => {\n    const authHeader = headers.get('Authorization')\n\n    if (authHeader?.startsWith(`${collectionConfig.slug} API-Key `)) {\n      const apiKey = authHeader.replace(`${collectionConfig.slug} API-Key `, '')\n      const apiKeyIndex = crypto.createHmac('sha1', payload.secret).update(apiKey).digest('hex')\n\n      try {\n        const where: Where = {}\n        if (collectionConfig.auth?.verify) {\n          where.and = [\n            {\n              apiKeyIndex: {\n                equals: apiKeyIndex,\n              },\n            },\n            {\n              _verified: {\n                not_equals: false,\n              },\n            },\n          ]\n        } else {\n          where.apiKeyIndex = {\n            equals: apiKeyIndex,\n          }\n        }\n\n        const userQuery = await payload.find({\n          collection: collectionConfig.slug,\n          depth: collectionConfig.auth.depth,\n          limit: 1,\n          overrideAccess: true,\n          pagination: false,\n          where,\n        })\n\n        if (userQuery.docs && userQuery.docs.length > 0) {\n          const user = userQuery.docs[0]\n          user.collection = collectionConfig.slug\n          user._strategy = 'api-key'\n\n          return {\n            user: user as User,\n          }\n        }\n      } catch (err) {\n        return { user: null }\n      }\n    }\n\n    return { user: null }\n  }\n"],"names":["crypto","APIKeyAuthentication","collectionConfig","headers","payload","authHeader","get","startsWith","slug","apiKey","replace","apiKeyIndex","createHmac","secret","update","digest","where","auth","verify","and","equals","_verified","not_equals","userQuery","find","collection","depth","limit","overrideAccess","pagination","docs","length","user","_strategy","err"],"mappings":";;;AAAA,OAAOA,YAAY,SAAQ;;AAMpB,MAAMC,uBACX,CAACC,mBACD,OAAO,EAAEC,OAAO,EAAEC,OAAO,EAAE;QACzB,MAAMC,aAAaF,QAAQG,GAAG,CAAC;QAE/B,IAAID,YAAYE,WAAW,GAAGL,iBAAiBM,IAAI,CAAC,SAAS,CAAC,GAAG;YAC/D,MAAMC,SAASJ,WAAWK,OAAO,CAAC,GAAGR,iBAAiBM,IAAI,CAAC,SAAS,CAAC,EAAE;YACvE,MAAMG,oHAAcX,UAAAA,CAAOY,UAAU,CAAC,QAAQR,QAAQS,MAAM,EAAEC,MAAM,CAACL,QAAQM,MAAM,CAAC;YAEpF,IAAI;gBACF,MAAMC,QAAe,CAAC;gBACtB,IAAId,iBAAiBe,IAAI,EAAEC,QAAQ;oBACjCF,MAAMG,GAAG,GAAG;wBACV;4BACER,aAAa;gCACXS,QAAQT;4BACV;wBACF;wBACA;4BACEU,WAAW;gCACTC,YAAY;4BACd;wBACF;qBACD;gBACH,OAAO;oBACLN,MAAML,WAAW,GAAG;wBAClBS,QAAQT;oBACV;gBACF;gBAEA,MAAMY,YAAY,MAAMnB,QAAQoB,IAAI,CAAC;oBACnCC,YAAYvB,iBAAiBM,IAAI;oBACjCkB,OAAOxB,iBAAiBe,IAAI,CAACS,KAAK;oBAClCC,OAAO;oBACPC,gBAAgB;oBAChBC,YAAY;oBACZb;gBACF;gBAEA,IAAIO,UAAUO,IAAI,IAAIP,UAAUO,IAAI,CAACC,MAAM,GAAG,GAAG;oBAC/C,MAAMC,OAAOT,UAAUO,IAAI,CAAC,EAAE;oBAC9BE,KAAKP,UAAU,GAAGvB,iBAAiBM,IAAI;oBACvCwB,KAAKC,SAAS,GAAG;oBAEjB,OAAO;wBACLD,MAAMA;oBACR;gBACF;YACF,EAAE,OAAOE,KAAK;gBACZ,OAAO;oBAAEF,MAAM;gBAAK;YACtB;QACF;QAEA,OAAO;YAAEA,MAAM;QAAK;IACtB,EAAC","ignoreList":[0]}},
    {"offset": {"line": 2202, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2208, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/auth/extractJWT.ts"],"sourcesContent":["import type { AuthStrategyFunctionArgs } from './index.js'\n\nimport { parseCookies } from '../utilities/parseCookies.js'\n\nexport const extractJWT = (args: AuthStrategyFunctionArgs): null | string => {\n  const { headers, payload } = args\n\n  const jwtFromHeader = headers.get('Authorization')\n  const origin = headers.get('Origin')\n\n  if (jwtFromHeader?.startsWith('JWT ')) {\n    return jwtFromHeader.replace('JWT ', '')\n  }\n  // allow RFC6750 OAuth 2.0 compliant Bearer tokens\n  // in addition to the payload default JWT format\n  if (jwtFromHeader?.startsWith('Bearer ')) {\n    return jwtFromHeader.replace('Bearer ', '')\n  }\n\n  const cookies = parseCookies(headers)\n  const tokenCookieName = `${payload.config.cookiePrefix}-token`\n  const cookieToken = cookies.get(tokenCookieName)\n\n  if (!cookieToken) {\n    return null\n  }\n\n  if (!origin || payload.config.csrf.length === 0 || payload.config.csrf.indexOf(origin) > -1) {\n    return cookieToken\n  }\n\n  return null\n}\n"],"names":["parseCookies","extractJWT","args","headers","payload","jwtFromHeader","get","origin","startsWith","replace","cookies","tokenCookieName","config","cookiePrefix","cookieToken","csrf","length","indexOf"],"mappings":";;;AAEA,SAASA,YAAY,QAAQ,+BAA8B;;AAEpD,MAAMC,aAAa,CAACC;IACzB,MAAM,EAAEC,OAAO,EAAEC,OAAO,EAAE,GAAGF;IAE7B,MAAMG,gBAAgBF,QAAQG,GAAG,CAAC;IAClC,MAAMC,SAASJ,QAAQG,GAAG,CAAC;IAE3B,IAAID,eAAeG,WAAW,SAAS;QACrC,OAAOH,cAAcI,OAAO,CAAC,QAAQ;IACvC;IACA,kDAAkD;IAClD,gDAAgD;IAChD,IAAIJ,eAAeG,WAAW,YAAY;QACxC,OAAOH,cAAcI,OAAO,CAAC,WAAW;IAC1C;IAEA,MAAMC,iYAAUV,eAAAA,EAAaG;IAC7B,MAAMQ,kBAAkB,GAAGP,QAAQQ,MAAM,CAACC,YAAY,CAAC,MAAM,CAAC;IAC9D,MAAMC,cAAcJ,QAAQJ,GAAG,CAACK;IAEhC,IAAI,CAACG,aAAa;QAChB,OAAO;IACT;IAEA,IAAI,CAACP,UAAUH,QAAQQ,MAAM,CAACG,IAAI,CAACC,MAAM,KAAK,KAAKZ,QAAQQ,MAAM,CAACG,IAAI,CAACE,OAAO,CAACV,UAAU,CAAC,GAAG;QAC3F,OAAOO;IACT;IAEA,OAAO;AACT,EAAC","ignoreList":[0]}},
    {"offset": {"line": 2236, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2242, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/auth/strategies/jwt.ts"],"sourcesContent":["import { jwtVerify } from 'jose'\n\nimport type { Payload, Where } from '../../types/index.js'\nimport type { AuthStrategyFunction, User } from '../index.js'\n\nimport { extractJWT } from '../extractJWT.js'\n\ntype JWTToken = {\n  collection: string\n  id: string\n}\n\nasync function autoLogin({\n  isGraphQL,\n  payload,\n}: {\n  isGraphQL: boolean\n  payload: Payload\n}): Promise<{\n  user: null | User\n}> {\n  if (\n    typeof payload?.config?.admin?.autoLogin !== 'object' ||\n    payload.config.admin?.autoLogin.prefillOnly ||\n    !payload?.config?.admin?.autoLogin ||\n    (!payload.config.admin?.autoLogin.email && !payload.config.admin?.autoLogin.username)\n  ) {\n    return { user: null }\n  }\n\n  const collection = payload.collections[payload.config.admin.user]\n\n  const where: Where = {\n    or: [],\n  }\n  if (payload.config.admin?.autoLogin.email) {\n    where.or?.push({\n      email: {\n        equals: payload.config.admin?.autoLogin.email,\n      },\n    })\n  } else if (payload.config.admin?.autoLogin.username) {\n    where.or?.push({\n      username: {\n        equals: payload.config.admin?.autoLogin.username,\n      },\n    })\n  }\n\n  const user = (\n    await payload.find({\n      collection: collection.config.slug,\n      depth: isGraphQL ? 0 : collection.config.auth.depth,\n      where,\n    })\n  ).docs[0]\n\n  if (!user) {\n    return { user: null }\n  }\n  user.collection = collection.config.slug\n  user._strategy = 'local-jwt'\n\n  return {\n    user: user as User,\n  }\n}\n\nexport const JWTAuthentication: AuthStrategyFunction = async ({\n  headers,\n  isGraphQL = false,\n  payload,\n}) => {\n  try {\n    const token = extractJWT({ headers, payload })\n\n    if (!token) {\n      if (headers.get('DisableAutologin') !== 'true') {\n        return await autoLogin({ isGraphQL, payload })\n      }\n      return { user: null }\n    }\n\n    const secretKey = new TextEncoder().encode(payload.secret)\n    const { payload: decodedPayload } = await jwtVerify<JWTToken>(token, secretKey)\n    const collection = payload.collections[decodedPayload.collection]\n\n    const user = await payload.findByID({\n      id: decodedPayload.id,\n      collection: decodedPayload.collection,\n      depth: isGraphQL ? 0 : collection.config.auth.depth,\n    })\n\n    if (user && (!collection.config.auth.verify || user._verified)) {\n      user.collection = collection.config.slug\n      user._strategy = 'local-jwt'\n      return {\n        user: user as User,\n      }\n    } else {\n      if (headers.get('DisableAutologin') !== 'true') {\n        return await autoLogin({ isGraphQL, payload })\n      }\n      return { user: null }\n    }\n  } catch (ignore) {\n    if (headers.get('DisableAutologin') !== 'true') {\n      return await autoLogin({ isGraphQL, payload })\n    }\n    return { user: null }\n  }\n}\n"],"names":["jwtVerify","extractJWT","autoLogin","isGraphQL","payload","config","admin","prefillOnly","email","username","user","collection","collections","where","or","push","equals","find","slug","depth","auth","docs","_strategy","JWTAuthentication","headers","token","get","secretKey","TextEncoder","encode","secret","decodedPayload","findByID","id","verify","_verified","ignore"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2342, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}