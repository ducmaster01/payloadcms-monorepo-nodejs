{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/collections/config/defaults.ts"],"sourcesContent":["import type { IncomingAuthType, LoginWithUsernameOptions } from '../../auth/types.js'\nimport type { CollectionConfig } from './types.js'\n\nimport defaultAccess from '../../auth/defaultAccess.js'\n\nexport const defaults: Partial<CollectionConfig> = {\n  access: {\n    create: defaultAccess,\n    delete: defaultAccess,\n    read: defaultAccess,\n    unlock: defaultAccess,\n    update: defaultAccess,\n  },\n  admin: {\n    components: {},\n    custom: {},\n    enableRichTextLink: true,\n    enableRichTextRelationship: true,\n    pagination: {\n      defaultLimit: 10,\n      limits: [5, 10, 25, 50, 100],\n    },\n    useAsTitle: 'id',\n  },\n  auth: false,\n  custom: {},\n  endpoints: [],\n  fields: [],\n  hooks: {\n    afterChange: [],\n    afterDelete: [],\n    afterForgotPassword: [],\n    afterLogin: [],\n    afterLogout: [],\n    afterMe: [],\n    afterOperation: [],\n    afterRead: [],\n    afterRefresh: [],\n    beforeChange: [],\n    beforeDelete: [],\n    beforeLogin: [],\n    beforeOperation: [],\n    beforeRead: [],\n    beforeValidate: [],\n    me: [],\n    refresh: [],\n  },\n  timestamps: true,\n  upload: false,\n  versions: false,\n}\n\nexport const authDefaults: IncomingAuthType = {\n  cookies: {\n    sameSite: 'Lax',\n    secure: false,\n  },\n  forgotPassword: {},\n  lockTime: 600000, // 10 minutes\n  loginWithUsername: false,\n  maxLoginAttempts: 5,\n  tokenExpiration: 7200,\n  verify: false,\n}\n\nexport const loginWithUsernameDefaults: LoginWithUsernameOptions = {\n  allowEmailLogin: false,\n  requireEmail: false,\n  requireUsername: true,\n}\n"],"names":["defaultAccess","defaults","access","create","delete","read","unlock","update","admin","components","custom","enableRichTextLink","enableRichTextRelationship","pagination","defaultLimit","limits","useAsTitle","auth","endpoints","fields","hooks","afterChange","afterDelete","afterForgotPassword","afterLogin","afterLogout","afterMe","afterOperation","afterRead","afterRefresh","beforeChange","beforeDelete","beforeLogin","beforeOperation","beforeRead","beforeValidate","me","refresh","timestamps","upload","versions","authDefaults","cookies","sameSite","secure","forgotPassword","lockTime","loginWithUsername","maxLoginAttempts","tokenExpiration","verify","loginWithUsernameDefaults","allowEmailLogin","requireEmail","requireUsername"],"mappings":";;;;;AAGA,OAAOA,mBAAmB,8BAA6B;;AAEhD,MAAMC,WAAsC;IACjDC,QAAQ;QACNC,uXAAQH,UAAAA;QACRI,uXAAQJ,UAAAA;QACRK,qXAAML,UAAAA;QACNM,uXAAQN,UAAAA;QACRO,uXAAQP,UAAAA;IACV;IACAQ,OAAO;QACLC,YAAY,CAAC;QACbC,QAAQ,CAAC;QACTC,oBAAoB;QACpBC,4BAA4B;QAC5BC,YAAY;YACVC,cAAc;YACdC,QAAQ;gBAAC;gBAAG;gBAAI;gBAAI;gBAAI;aAAI;QAC9B;QACAC,YAAY;IACd;IACAC,MAAM;IACNP,QAAQ,CAAC;IACTQ,WAAW,EAAE;IACbC,QAAQ,EAAE;IACVC,OAAO;QACLC,aAAa,EAAE;QACfC,aAAa,EAAE;QACfC,qBAAqB,EAAE;QACvBC,YAAY,EAAE;QACdC,aAAa,EAAE;QACfC,SAAS,EAAE;QACXC,gBAAgB,EAAE;QAClBC,WAAW,EAAE;QACbC,cAAc,EAAE;QAChBC,cAAc,EAAE;QAChBC,cAAc,EAAE;QAChBC,aAAa,EAAE;QACfC,iBAAiB,EAAE;QACnBC,YAAY,EAAE;QACdC,gBAAgB,EAAE;QAClBC,IAAI,EAAE;QACNC,SAAS,EAAE;IACb;IACAC,YAAY;IACZC,QAAQ;IACRC,UAAU;AACZ,EAAC;AAEM,MAAMC,eAAiC;IAC5CC,SAAS;QACPC,UAAU;QACVC,QAAQ;IACV;IACAC,gBAAgB,CAAC;IACjBC,UAAU;IACVC,mBAAmB;IACnBC,kBAAkB;IAClBC,iBAAiB;IACjBC,QAAQ;AACV,EAAC;AAEM,MAAMC,4BAAsD;IACjEC,iBAAiB;IACjBC,cAAc;IACdC,iBAAiB;AACnB,EAAC","ignoreList":[0]}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 89, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/collections/dataloader.ts"],"sourcesContent":["import type { BatchLoadFn } from 'dataloader'\n\nimport DataLoader from 'dataloader'\n\nimport type { PayloadRequest, SelectType } from '../types/index.js'\nimport type { TypeWithID } from './config/types.js'\n\nimport { isValidID } from '../utilities/isValidID.js'\n\n// Payload uses `dataloader` to solve the classic GraphQL N+1 problem.\n\n// We keep a list of all documents requested to be populated for any given request\n// and then batch together documents within the same collection,\n// making only 1 find per each collection, rather than `findByID` per each requested doc.\n\n// This dramatically improves performance for REST and Local API `depth` populations,\n// and also ensures complex GraphQL queries perform lightning-fast.\n\nconst batchAndLoadDocs =\n  (req: PayloadRequest): BatchLoadFn<string, TypeWithID> =>\n  async (keys: string[]): Promise<TypeWithID[]> => {\n    const { payload } = req\n\n    // Create docs array of same length as keys, using null as value\n    // We will replace nulls with injected docs as they are retrieved\n    const docs: (null | TypeWithID)[] = keys.map(() => null)\n\n    /**\n    * Batch IDs by their `find` args\n    * so we can make one find query per combination of collection, depth, locale, and fallbackLocale.\n    *\n    * Resulting shape will be as follows:\n      {\n        // key is stringified set of find args\n        '[null,\"pages\",2,0,\"es\",\"en\",false,false]': [\n          // value is array of IDs to find with these args\n          'q34tl23462346234524',\n          '435523540194324280',\n          '2346245j35l3j5234532li',\n        ],\n        // etc\n      };\n    *\n    **/\n\n    const batchByFindArgs = keys.reduce((batches, key) => {\n      const [\n        transactionID,\n        collection,\n        id,\n        depth,\n        currentDepth,\n        locale,\n        fallbackLocale,\n        overrideAccess,\n        showHiddenFields,\n        draft,\n        select,\n      ] = JSON.parse(key)\n\n      const batchKeyArray = [\n        transactionID,\n        collection,\n        depth,\n        currentDepth,\n        locale,\n        fallbackLocale,\n        overrideAccess,\n        showHiddenFields,\n        draft,\n        select,\n      ]\n\n      const batchKey = JSON.stringify(batchKeyArray)\n\n      const idType = payload.collections?.[collection].customIDType || payload.db.defaultIDType\n\n      let sanitizedID: number | string = id\n\n      if (idType === 'number') {\n        sanitizedID = parseFloat(id)\n      }\n\n      if (isValidID(sanitizedID, idType)) {\n        return {\n          ...batches,\n          [batchKey]: [...(batches[batchKey] || []), sanitizedID],\n        }\n      }\n      return batches\n    }, {})\n\n    // Run find requests one after another, so as to not hang transactions\n\n    await Object.entries(batchByFindArgs).reduce(async (priorFind, [batchKey, ids]) => {\n      await priorFind\n\n      const [\n        transactionID,\n        collection,\n        depth,\n        currentDepth,\n        locale,\n        fallbackLocale,\n        overrideAccess,\n        showHiddenFields,\n        draft,\n        select,\n      ] = JSON.parse(batchKey)\n\n      req.transactionID = transactionID\n\n      const result = await payload.find({\n        collection,\n        currentDepth,\n        depth,\n        disableErrors: true,\n        draft,\n        fallbackLocale,\n        locale,\n        overrideAccess: Boolean(overrideAccess),\n        pagination: false,\n        req,\n        select,\n        showHiddenFields: Boolean(showHiddenFields),\n        where: {\n          id: {\n            in: ids,\n          },\n        },\n      })\n\n      // For each returned doc, find index in original keys\n      // Inject doc within docs array if index exists\n\n      result.docs.forEach((doc) => {\n        const docKey = createDataloaderCacheKey({\n          collectionSlug: collection,\n          currentDepth,\n          depth,\n          docID: doc.id,\n          draft,\n          fallbackLocale,\n          locale,\n          overrideAccess,\n          select,\n          showHiddenFields,\n          transactionID: req.transactionID,\n        })\n        const docsIndex = keys.findIndex((key) => key === docKey)\n\n        if (docsIndex > -1) {\n          docs[docsIndex] = doc\n        }\n      })\n    }, Promise.resolve())\n\n    // Return docs array,\n    // which has now been injected with all fetched docs\n    // and should match the length of the incoming keys arg\n    return docs\n  }\n\nexport const getDataLoader = (req: PayloadRequest) => new DataLoader(batchAndLoadDocs(req))\n\ntype CreateCacheKeyArgs = {\n  collectionSlug: string\n  currentDepth: number\n  depth: number\n  docID: number | string\n  draft: boolean\n  fallbackLocale: string\n  locale: string\n  overrideAccess: boolean\n  select?: SelectType\n  showHiddenFields: boolean\n  transactionID: number | Promise<number | string> | string\n}\nexport const createDataloaderCacheKey = ({\n  collectionSlug,\n  currentDepth,\n  depth,\n  docID,\n  draft,\n  fallbackLocale,\n  locale,\n  overrideAccess,\n  select,\n  showHiddenFields,\n  transactionID,\n}: CreateCacheKeyArgs): string =>\n  JSON.stringify([\n    transactionID,\n    collectionSlug,\n    docID,\n    depth,\n    currentDepth,\n    locale,\n    fallbackLocale,\n    overrideAccess,\n    showHiddenFields,\n    draft,\n    select,\n  ])\n"],"names":["DataLoader","isValidID","batchAndLoadDocs","req","keys","payload","docs","map","batchByFindArgs","reduce","batches","key","transactionID","collection","id","depth","currentDepth","locale","fallbackLocale","overrideAccess","showHiddenFields","draft","select","JSON","parse","batchKeyArray","batchKey","stringify","idType","collections","customIDType","db","defaultIDType","sanitizedID","parseFloat","Object","entries","priorFind","ids","result","find","disableErrors","Boolean","pagination","where","in","forEach","doc","docKey","createDataloaderCacheKey","collectionSlug","docID","docsIndex","findIndex","Promise","resolve","getDataLoader"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 220, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 226, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/collections/config/reservedFieldNames.ts"],"sourcesContent":["import type { Field } from '../../fields/config/types.js'\nimport type { CollectionConfig } from '../../index.js'\n\nimport { ReservedFieldName } from '../../errors/ReservedFieldName.js'\nimport { fieldAffectsData } from '../../fields/config/types.js'\n\n// Note for future reference: We've slimmed down the reserved field names but left them in here for reference in case it's needed in the future.\n\n/**\n * Reserved field names for collections with auth config enabled\n */\nconst reservedBaseAuthFieldNames = [\n  /* 'email',\n  'resetPasswordToken',\n  'resetPasswordExpiration', */\n  'salt',\n  'hash',\n]\n/**\n * Reserved field names for auth collections with verify: true\n */\nconst reservedVerifyFieldNames = [\n  /* '_verified', '_verificationToken' */\n]\n/**\n * Reserved field names for auth collections with useApiKey: true\n */\nconst reservedAPIKeyFieldNames = [\n  /* 'enableAPIKey', 'apiKeyIndex', 'apiKey' */\n]\n\n/**\n * Reserved field names for collections with upload config enabled\n */\nconst reservedBaseUploadFieldNames = [\n  'file',\n  /* 'mimeType',\n  'thumbnailURL',\n  'width',\n  'height',\n  'filesize',\n  'filename',\n  'url',\n  'focalX',\n  'focalY',\n  'sizes', */\n]\n\n/**\n * Reserved field names for collections with versions enabled\n */\nconst reservedVersionsFieldNames = [\n  /* '__v', '_status' */\n]\n\n/**\n * Sanitize fields for collections with auth config enabled.\n *\n * Should run on top level fields only.\n */\nexport const sanitizeAuthFields = (fields: Field[], config: CollectionConfig) => {\n  for (let i = 0; i < fields.length; i++) {\n    const field = fields[i]\n\n    if (fieldAffectsData(field) && field.name) {\n      if (config.auth && typeof config.auth === 'object' && !config.auth.disableLocalStrategy) {\n        const auth = config.auth\n\n        if (reservedBaseAuthFieldNames.includes(field.name)) {\n          throw new ReservedFieldName(field, field.name)\n        }\n\n        if (auth.verify) {\n          if (reservedAPIKeyFieldNames.includes(field.name)) {\n            throw new ReservedFieldName(field, field.name)\n          }\n        }\n\n        /* if (auth.maxLoginAttempts) {\n          if (field.name === 'loginAttempts' || field.name === 'lockUntil') {\n            throw new ReservedFieldName(field, field.name)\n          }\n        } */\n\n        /* if (auth.loginWithUsername) {\n          if (field.name === 'username') {\n            throw new ReservedFieldName(field, field.name)\n          }\n        } */\n\n        if (auth.verify) {\n          if (reservedVerifyFieldNames.includes(field.name)) {\n            throw new ReservedFieldName(field, field.name)\n          }\n        }\n      }\n    }\n\n    // Handle tabs without a name\n    if (field.type === 'tabs') {\n      for (let j = 0; j < field.tabs.length; j++) {\n        const tab = field.tabs[j]\n\n        if (!('name' in tab)) {\n          sanitizeAuthFields(tab.fields, config)\n        }\n      }\n    }\n\n    // Handle presentational fields like rows and collapsibles\n    if (!fieldAffectsData(field) && 'fields' in field && field.fields) {\n      sanitizeAuthFields(field.fields, config)\n    }\n  }\n}\n\n/**\n * Sanitize fields for collections with upload config enabled.\n *\n * Should run on top level fields only.\n */\nexport const sanitizeUploadFields = (fields: Field[], config: CollectionConfig) => {\n  if (config.upload && typeof config.upload === 'object') {\n    for (let i = 0; i < fields.length; i++) {\n      const field = fields[i]\n\n      if (fieldAffectsData(field) && field.name) {\n        if (reservedBaseUploadFieldNames.includes(field.name)) {\n          throw new ReservedFieldName(field, field.name)\n        }\n      }\n\n      // Handle tabs without a name\n      if (field.type === 'tabs') {\n        for (let j = 0; j < field.tabs.length; j++) {\n          const tab = field.tabs[j]\n\n          if (!('name' in tab)) {\n            sanitizeUploadFields(tab.fields, config)\n          }\n        }\n      }\n\n      // Handle presentational fields like rows and collapsibles\n      if (!fieldAffectsData(field) && 'fields' in field && field.fields) {\n        sanitizeUploadFields(field.fields, config)\n      }\n    }\n  }\n}\n"],"names":["ReservedFieldName","fieldAffectsData","reservedBaseAuthFieldNames","reservedVerifyFieldNames","reservedAPIKeyFieldNames","reservedBaseUploadFieldNames","reservedVersionsFieldNames","sanitizeAuthFields","fields","config","i","length","field","name","auth","disableLocalStrategy","includes","verify","type","j","tabs","tab","sanitizeUploadFields","upload"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 326, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 332, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/collections/config/useAsTitle.ts"],"sourcesContent":["import type { CollectionConfig } from '../../index.js'\n\nimport { InvalidConfiguration } from '../../errors/InvalidConfiguration.js'\nimport { fieldAffectsData, fieldIsVirtual } from '../../fields/config/types.js'\nimport flattenFields from '../../utilities/flattenTopLevelFields.js'\n\n/**\n * Validate useAsTitle for collections.\n */\nexport const validateUseAsTitle = (config: CollectionConfig) => {\n  if (config.admin?.useAsTitle?.includes('.')) {\n    throw new InvalidConfiguration(\n      `\"useAsTitle\" cannot be a nested field. Please specify a top-level field in the collection \"${config.slug}\"`,\n    )\n  }\n\n  if (config?.admin && config.admin?.useAsTitle && config.admin.useAsTitle !== 'id') {\n    const fields = flattenFields(config.fields)\n    const useAsTitleField = fields.find((field) => {\n      if (fieldAffectsData(field) && config.admin) {\n        return field.name === config.admin.useAsTitle\n      }\n      return false\n    })\n\n    // If auth is enabled then we don't need to\n    if (config.auth) {\n      if (config.admin.useAsTitle !== 'email') {\n        if (!useAsTitleField) {\n          throw new InvalidConfiguration(\n            `The field \"${config.admin.useAsTitle}\" specified in \"admin.useAsTitle\" does not exist in the collection \"${config.slug}\"`,\n          )\n        }\n      }\n    } else {\n      if (useAsTitleField && fieldIsVirtual(useAsTitleField)) {\n        throw new InvalidConfiguration(\n          `The field \"${config.admin.useAsTitle}\" specified in \"admin.useAsTitle\" in the collection \"${config.slug}\" is virtual. A virtual field cannot be used as the title.`,\n        )\n      }\n      if (!useAsTitleField) {\n        throw new InvalidConfiguration(\n          `The field \"${config.admin.useAsTitle}\" specified in \"admin.useAsTitle\" does not exist in the collection \"${config.slug}\"`,\n        )\n      }\n    }\n  }\n}\n"],"names":["InvalidConfiguration","fieldAffectsData","fieldIsVirtual","flattenFields","validateUseAsTitle","config","admin","useAsTitle","includes","slug","fields","useAsTitleField","find","field","name","auth"],"mappings":";;;AAEA,SAASA,oBAAoB,QAAQ,uCAAsC;AAE3E,OAAOG,mBAAmB,2CAA0C;AADpE,SAASF,gBAAgB,EAAEC,cAAc,QAAQ,+BAA8B;;;;AAMxE,MAAME,qBAAqB,CAACC;IACjC,IAAIA,OAAOC,KAAK,EAAEC,YAAYC,SAAS,MAAM;QAC3C,MAAM,4XAAIR,uBAAAA,CACR,CAAC,2FAA2F,EAAEK,OAAOI,IAAI,CAAC,CAAC,CAAC;IAEhH;IAEA,IAAIJ,QAAQC,SAASD,OAAOC,KAAK,EAAEC,cAAcF,OAAOC,KAAK,CAACC,UAAU,KAAK,MAAM;QACjF,MAAMG,yYAASP,UAAAA,EAAcE,OAAOK,MAAM;QAC1C,MAAMC,kBAAkBD,OAAOE,IAAI,CAAC,CAACC;YACnC,2XAAIZ,mBAAAA,EAAiBY,UAAUR,OAAOC,KAAK,EAAE;gBAC3C,OAAOO,MAAMC,IAAI,KAAKT,OAAOC,KAAK,CAACC,UAAU;YAC/C;YACA,OAAO;QACT;QAEA,2CAA2C;QAC3C,IAAIF,OAAOU,IAAI,EAAE;YACf,IAAIV,OAAOC,KAAK,CAACC,UAAU,KAAK,SAAS;gBACvC,IAAI,CAACI,iBAAiB;oBACpB,MAAM,IAAIX,+YAAAA,CACR,CAAC,WAAW,EAAEK,OAAOC,KAAK,CAACC,UAAU,CAAC,oEAAoE,EAAEF,OAAOI,IAAI,CAAC,CAAC,CAAC;gBAE9H;YACF;QACF,OAAO;YACL,IAAIE,oBAAmBT,uYAAAA,EAAeS,kBAAkB;gBACtD,MAAM,4XAAIX,uBAAAA,CACR,CAAC,WAAW,EAAEK,OAAOC,KAAK,CAACC,UAAU,CAAC,qDAAqD,EAAEF,OAAOI,IAAI,CAAC,0DAA0D,CAAC;YAExK;YACA,IAAI,CAACE,iBAAiB;gBACpB,MAAM,4XAAIX,uBAAAA,CACR,CAAC,WAAW,EAAEK,OAAOC,KAAK,CAACC,UAAU,CAAC,oEAAoE,EAAEF,OAAOI,IAAI,CAAC,CAAC,CAAC;YAE9H;QACF;IACF;AACF,EAAC","ignoreList":[0]}},
    {"offset": {"line": 370, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 376, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/collections/config/sanitize.ts"],"sourcesContent":["import type { LoginWithUsernameOptions } from '../../auth/types.js'\nimport type { Config, SanitizedConfig } from '../../config/types.js'\nimport type { CollectionConfig, SanitizedCollectionConfig, SanitizedJoins } from './types.js'\n\nimport { getBaseAuthFields } from '../../auth/getAuthFields.js'\nimport { TimestampsRequired } from '../../errors/TimestampsRequired.js'\nimport { sanitizeFields } from '../../fields/config/sanitize.js'\nimport { fieldAffectsData } from '../../fields/config/types.js'\nimport mergeBaseFields from '../../fields/mergeBaseFields.js'\nimport { getBaseUploadFields } from '../../uploads/getBaseFields.js'\nimport { deepMergeWithReactComponents } from '../../utilities/deepMerge.js'\nimport { flattenAllFields } from '../../utilities/flattenAllFields.js'\nimport { formatLabels } from '../../utilities/formatLabels.js'\nimport baseVersionFields from '../../versions/baseFields.js'\nimport { versionDefaults } from '../../versions/defaults.js'\nimport { authDefaults, defaults, loginWithUsernameDefaults } from './defaults.js'\nimport { sanitizeAuthFields, sanitizeUploadFields } from './reservedFieldNames.js'\nimport { validateUseAsTitle } from './useAsTitle.js'\n\nexport const sanitizeCollection = async (\n  config: Config,\n  collection: CollectionConfig,\n  /**\n   * If this property is set, RichText fields won't be sanitized immediately. Instead, they will be added to this array as promises\n   * so that you can sanitize them together, after the config has been sanitized.\n   */\n  richTextSanitizationPromises?: Array<(config: SanitizedConfig) => Promise<void>>,\n): Promise<SanitizedCollectionConfig> => {\n  // /////////////////////////////////\n  // Make copy of collection config\n  // /////////////////////////////////\n\n  const sanitized: CollectionConfig = deepMergeWithReactComponents(defaults, collection)\n\n  // /////////////////////////////////\n  // Sanitize fields\n  // /////////////////////////////////\n\n  const validRelationships = (config.collections || []).reduce(\n    (acc, c) => {\n      acc.push(c.slug)\n      return acc\n    },\n    [collection.slug],\n  )\n  const joins: SanitizedJoins = {}\n  sanitized.fields = await sanitizeFields({\n    collectionConfig: sanitized,\n    config,\n    fields: sanitized.fields,\n    joinPath: '',\n    joins,\n    parentIsLocalized: false,\n    richTextSanitizationPromises,\n    validRelationships,\n  })\n\n  if (sanitized.timestamps !== false) {\n    // add default timestamps fields only as needed\n    let hasUpdatedAt: boolean | null = null\n    let hasCreatedAt: boolean | null = null\n    sanitized.fields.some((field) => {\n      if (fieldAffectsData(field)) {\n        if (field.name === 'updatedAt') {\n          hasUpdatedAt = true\n        }\n        if (field.name === 'createdAt') {\n          hasCreatedAt = true\n        }\n      }\n      return hasCreatedAt && hasUpdatedAt\n    })\n    if (!hasUpdatedAt) {\n      sanitized.fields.push({\n        name: 'updatedAt',\n        type: 'date',\n        admin: {\n          disableBulkEdit: true,\n          hidden: true,\n        },\n        index: true,\n        label: ({ t }) => t('general:updatedAt'),\n      })\n    }\n    if (!hasCreatedAt) {\n      sanitized.fields.push({\n        name: 'createdAt',\n        admin: {\n          disableBulkEdit: true,\n          hidden: true,\n        },\n        // The default sort for list view is createdAt. Thus, enabling indexing by default, is a major performance improvement, especially for large or a large amount of collections.\n        type: 'date',\n        index: true,\n        label: ({ t }) => t('general:createdAt'),\n      })\n    }\n  }\n\n  sanitized.labels = sanitized.labels || formatLabels(sanitized.slug)\n\n  if (sanitized.versions) {\n    if (sanitized.versions === true) {\n      sanitized.versions = { drafts: false, maxPerDoc: 100 }\n    }\n\n    if (sanitized.timestamps === false) {\n      throw new TimestampsRequired(collection)\n    }\n\n    sanitized.versions.maxPerDoc =\n      typeof sanitized.versions.maxPerDoc === 'number' ? sanitized.versions.maxPerDoc : 100\n\n    if (sanitized.versions.drafts) {\n      if (sanitized.versions.drafts === true) {\n        sanitized.versions.drafts = {\n          autosave: false,\n          validate: false,\n        }\n      }\n\n      if (sanitized.versions.drafts.autosave === true) {\n        sanitized.versions.drafts.autosave = {\n          interval: versionDefaults.autosaveInterval,\n        }\n      }\n\n      if (sanitized.versions.drafts.validate === undefined) {\n        sanitized.versions.drafts.validate = false\n      }\n\n      sanitized.fields = mergeBaseFields(sanitized.fields, baseVersionFields)\n    }\n  }\n\n  if (sanitized.upload) {\n    if (sanitized.upload === true) {\n      sanitized.upload = {}\n    }\n\n    // sanitize fields for reserved names\n    sanitizeUploadFields(sanitized.fields, sanitized)\n\n    sanitized.upload.bulkUpload = sanitized.upload?.bulkUpload ?? true\n    sanitized.upload.staticDir = sanitized.upload.staticDir || sanitized.slug\n    sanitized.admin.useAsTitle =\n      sanitized.admin?.useAsTitle && sanitized.admin.useAsTitle !== 'id'\n        ? sanitized.admin.useAsTitle\n        : 'filename'\n\n    const uploadFields = getBaseUploadFields({\n      collection: sanitized,\n      config,\n    })\n\n    sanitized.fields = mergeBaseFields(sanitized.fields, uploadFields)\n  }\n\n  if (sanitized.auth) {\n    // sanitize fields for reserved names\n    sanitizeAuthFields(sanitized.fields, sanitized)\n\n    sanitized.auth = deepMergeWithReactComponents(\n      authDefaults,\n      typeof sanitized.auth === 'object' ? sanitized.auth : {},\n    )\n\n    if (!sanitized.auth.disableLocalStrategy && sanitized.auth.verify === true) {\n      sanitized.auth.verify = {}\n    }\n\n    // disable duplicate for auth enabled collections by default\n    sanitized.disableDuplicate = sanitized.disableDuplicate ?? true\n\n    if (!sanitized.auth.strategies) {\n      sanitized.auth.strategies = []\n    }\n\n    if (sanitized.auth.loginWithUsername) {\n      if (sanitized.auth.loginWithUsername === true) {\n        sanitized.auth.loginWithUsername = loginWithUsernameDefaults\n      } else {\n        const loginWithUsernameWithDefaults = {\n          ...loginWithUsernameDefaults,\n          ...sanitized.auth.loginWithUsername,\n        } as LoginWithUsernameOptions\n\n        // if allowEmailLogin is false, requireUsername must be true\n        if (loginWithUsernameWithDefaults.allowEmailLogin === false) {\n          loginWithUsernameWithDefaults.requireUsername = true\n        }\n        sanitized.auth.loginWithUsername = loginWithUsernameWithDefaults\n      }\n    } else {\n      sanitized.auth.loginWithUsername = false\n    }\n\n    if (!collection?.admin?.useAsTitle) {\n      sanitized.admin.useAsTitle = sanitized.auth.loginWithUsername ? 'username' : 'email'\n    }\n\n    sanitized.fields = mergeBaseFields(sanitized.fields, getBaseAuthFields(sanitized.auth))\n  }\n\n  if (collection?.admin?.pagination?.limits?.length) {\n    sanitized.admin.pagination.limits = collection.admin.pagination.limits\n  }\n\n  validateUseAsTitle(sanitized)\n\n  const sanitizedConfig = sanitized as SanitizedCollectionConfig\n\n  sanitizedConfig.joins = joins\n\n  sanitizedConfig.flattenedFields = flattenAllFields({ fields: sanitizedConfig.fields })\n\n  return sanitizedConfig\n}\n"],"names":["getBaseAuthFields","TimestampsRequired","sanitizeFields","fieldAffectsData","mergeBaseFields","getBaseUploadFields","deepMergeWithReactComponents","flattenAllFields","formatLabels","baseVersionFields","versionDefaults","authDefaults","defaults","loginWithUsernameDefaults","sanitizeAuthFields","sanitizeUploadFields","validateUseAsTitle","sanitizeCollection","config","collection","richTextSanitizationPromises","sanitized","validRelationships","collections","reduce","acc","c","push","slug","joins","fields","collectionConfig","joinPath","parentIsLocalized","timestamps","hasUpdatedAt","hasCreatedAt","some","field","name","type","admin","disableBulkEdit","hidden","index","label","t","labels","versions","drafts","maxPerDoc","autosave","validate","interval","autosaveInterval","undefined","upload","bulkUpload","staticDir","useAsTitle","uploadFields","auth","disableLocalStrategy","verify","disableDuplicate","strategies","loginWithUsername","loginWithUsernameWithDefaults","allowEmailLogin","requireUsername","pagination","limits","length","sanitizedConfig","flattenedFields"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 566, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 572, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/collections/operations/utils.ts"],"sourcesContent":["import type { forgotPasswordOperation } from '../../auth/operations/forgotPassword.js'\nimport type { loginOperation } from '../../auth/operations/login.js'\nimport type { refreshOperation } from '../../auth/operations/refresh.js'\nimport type { CollectionSlug } from '../../index.js'\nimport type { PayloadRequest } from '../../types/index.js'\nimport type {\n  AfterOperationHook,\n  SanitizedCollectionConfig,\n  SelectFromCollectionSlug,\n} from '../config/types.js'\nimport type { countOperation } from './count.js'\nimport type { countVersionsOperation } from './countVersions.js'\nimport type { createOperation } from './create.js'\nimport type { deleteOperation } from './delete.js'\nimport type { deleteByIDOperation } from './deleteByID.js'\nimport type { findOperation } from './find.js'\nimport type { findByIDOperation } from './findByID.js'\nimport type { updateOperation } from './update.js'\nimport type { updateByIDOperation } from './updateByID.js'\n\nexport type AfterOperationMap<TOperationGeneric extends CollectionSlug> = {\n  count: typeof countOperation<TOperationGeneric>\n  countVersions: typeof countVersionsOperation<TOperationGeneric>\n  create: typeof createOperation<TOperationGeneric, SelectFromCollectionSlug<TOperationGeneric>>\n  delete: typeof deleteOperation<TOperationGeneric, SelectFromCollectionSlug<TOperationGeneric>>\n  deleteByID: typeof deleteByIDOperation<\n    TOperationGeneric,\n    SelectFromCollectionSlug<TOperationGeneric>\n  >\n  find: typeof findOperation<TOperationGeneric, SelectFromCollectionSlug<TOperationGeneric>>\n  findByID: typeof findByIDOperation<\n    TOperationGeneric,\n    boolean,\n    SelectFromCollectionSlug<TOperationGeneric>\n  >\n  forgotPassword: typeof forgotPasswordOperation\n  login: typeof loginOperation<TOperationGeneric>\n  refresh: typeof refreshOperation\n  update: typeof updateOperation<TOperationGeneric, SelectFromCollectionSlug<TOperationGeneric>>\n  updateByID: typeof updateByIDOperation<\n    TOperationGeneric,\n    SelectFromCollectionSlug<TOperationGeneric>\n  >\n}\n\nexport type AfterOperationArg<TOperationGeneric extends CollectionSlug> = {\n  /** The collection which this hook is being run on */\n  collection: SanitizedCollectionConfig\n  req: PayloadRequest\n} & (\n  | {\n      args: Parameters<AfterOperationMap<TOperationGeneric>['count']>[0]\n      operation: 'count'\n      result: Awaited<ReturnType<AfterOperationMap<TOperationGeneric>['count']>>\n    }\n  | {\n      args: Parameters<AfterOperationMap<TOperationGeneric>['countVersions']>[0]\n      operation: 'countVersions'\n      result: Awaited<ReturnType<AfterOperationMap<TOperationGeneric>['countVersions']>>\n    }\n  | {\n      args: Parameters<AfterOperationMap<TOperationGeneric>['create']>[0]\n      operation: 'create'\n      result: Awaited<ReturnType<AfterOperationMap<TOperationGeneric>['create']>>\n    }\n  | {\n      args: Parameters<AfterOperationMap<TOperationGeneric>['delete']>[0]\n      operation: 'delete'\n      result: Awaited<ReturnType<AfterOperationMap<TOperationGeneric>['delete']>>\n    }\n  | {\n      args: Parameters<AfterOperationMap<TOperationGeneric>['deleteByID']>[0]\n      operation: 'deleteByID'\n      result: Awaited<ReturnType<AfterOperationMap<TOperationGeneric>['deleteByID']>>\n    }\n  | {\n      args: Parameters<AfterOperationMap<TOperationGeneric>['find']>[0]\n      operation: 'find'\n      result: Awaited<ReturnType<AfterOperationMap<TOperationGeneric>['find']>>\n    }\n  | {\n      args: Parameters<AfterOperationMap<TOperationGeneric>['findByID']>[0]\n      operation: 'findByID'\n      result: Awaited<ReturnType<AfterOperationMap<TOperationGeneric>['findByID']>>\n    }\n  | {\n      args: Parameters<AfterOperationMap<TOperationGeneric>['forgotPassword']>[0]\n      operation: 'forgotPassword'\n      result: Awaited<ReturnType<AfterOperationMap<TOperationGeneric>['forgotPassword']>>\n    }\n  | {\n      args: Parameters<AfterOperationMap<TOperationGeneric>['login']>[0]\n      operation: 'login'\n      result: Awaited<ReturnType<AfterOperationMap<TOperationGeneric>['login']>>\n    }\n  | {\n      args: Parameters<AfterOperationMap<TOperationGeneric>['refresh']>[0]\n      operation: 'refresh'\n      result: Awaited<ReturnType<AfterOperationMap<TOperationGeneric>['refresh']>>\n    }\n  | {\n      args: Parameters<AfterOperationMap<TOperationGeneric>['update']>[0]\n      operation: 'update'\n      result: Awaited<ReturnType<AfterOperationMap<TOperationGeneric>['update']>>\n    }\n  | {\n      args: Parameters<AfterOperationMap<TOperationGeneric>['updateByID']>[0]\n      operation: 'updateByID'\n      result: Awaited<ReturnType<AfterOperationMap<TOperationGeneric>['updateByID']>>\n    }\n)\n\ntype OperationResult<\n  TOperationGeneric extends CollectionSlug,\n  O extends keyof AfterOperationMap<TOperationGeneric>,\n> = Awaited<ReturnType<AfterOperationMap<TOperationGeneric>[O]>>\n\nexport const buildAfterOperation = async <\n  TOperationGeneric extends CollectionSlug,\n  O extends keyof AfterOperationMap<TOperationGeneric> = keyof AfterOperationMap<TOperationGeneric>,\n>(\n  operationArgs: { operation: O } & Omit<AfterOperationArg<TOperationGeneric>, 'req'>,\n): Promise<any | OperationResult<TOperationGeneric, O>> => {\n  const { args, collection, operation, result } = operationArgs\n\n  let newResult = result as OperationResult<TOperationGeneric, O>\n\n  await args.collection.config.hooks.afterOperation.reduce(\n    async (priorHook, hook: AfterOperationHook<TOperationGeneric>) => {\n      await priorHook\n\n      const hookResult = await hook({\n        args,\n        collection,\n        operation,\n        req: args.req,\n        result: newResult,\n      } as AfterOperationArg<TOperationGeneric>)\n\n      if (hookResult !== undefined) {\n        newResult = hookResult as OperationResult<TOperationGeneric, O>\n      }\n    },\n    Promise.resolve(),\n  )\n\n  return newResult\n}\n"],"names":["buildAfterOperation","operationArgs","args","collection","operation","result","newResult","config","hooks","afterOperation","reduce","priorHook","hook","hookResult","req","undefined","Promise","resolve"],"mappings":";;;AAqHO,MAAMA,sBAAsB,OAIjCC;IAEA,MAAM,EAAEC,IAAI,EAAEC,UAAU,EAAEC,SAAS,EAAEC,MAAM,EAAE,GAAGJ;IAEhD,IAAIK,YAAYD;IAEhB,MAAMH,KAAKC,UAAU,CAACI,MAAM,CAACC,KAAK,CAACC,cAAc,CAACC,MAAM,CACtD,OAAOC,WAAWC;QAChB,MAAMD;QAEN,MAAME,aAAa,MAAMD,KAAK;YAC5BV;YACAC;YACAC;YACAU,KAAKZ,KAAKY,GAAG;YACbT,QAAQC;QACV;QAEA,IAAIO,eAAeE,WAAW;YAC5BT,YAAYO;QACd;IACF,GACAG,QAAQC,OAAO;IAGjB,OAAOX;AACT,EAAC","ignoreList":[0]}},
    {"offset": {"line": 593, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 599, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/collections/operations/count.ts"],"sourcesContent":["import type { AccessResult } from '../../config/types.js'\nimport type { CollectionSlug } from '../../index.js'\nimport type { PayloadRequest, Where } from '../../types/index.js'\nimport type { Collection } from '../config/types.js'\n\nimport executeAccess from '../../auth/executeAccess.js'\nimport { combineQueries } from '../../database/combineQueries.js'\nimport { validateQueryPaths } from '../../database/queryValidation/validateQueryPaths.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport { buildAfterOperation } from './utils.js'\n\nexport type Arguments = {\n  collection: Collection\n  disableErrors?: boolean\n  overrideAccess?: boolean\n  req?: PayloadRequest\n  where?: Where\n}\n\nexport const countOperation = async <TSlug extends CollectionSlug>(\n  incomingArgs: Arguments,\n): Promise<{ totalDocs: number }> => {\n  let args = incomingArgs\n\n  try {\n    // /////////////////////////////////////\n    // beforeOperation - Collection\n    // /////////////////////////////////////\n\n    await args.collection.config.hooks.beforeOperation.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      args =\n        (await hook({\n          args,\n          collection: args.collection.config,\n          context: args.req.context,\n          operation: 'count',\n          req: args.req,\n        })) || args\n    }, Promise.resolve())\n\n    const {\n      collection: { config: collectionConfig },\n      disableErrors,\n      overrideAccess,\n      req: { payload },\n      req,\n      where,\n    } = args\n\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    let accessResult: AccessResult\n\n    if (!overrideAccess) {\n      accessResult = await executeAccess({ disableErrors, req }, collectionConfig.access.read)\n\n      // If errors are disabled, and access returns false, return empty results\n      if (accessResult === false) {\n        return {\n          totalDocs: 0,\n        }\n      }\n    }\n\n    let result: { totalDocs: number }\n\n    const fullWhere = combineQueries(where, accessResult)\n\n    await validateQueryPaths({\n      collectionConfig,\n      overrideAccess,\n      req,\n      where,\n    })\n\n    result = await payload.db.count({\n      collection: collectionConfig.slug,\n      req,\n      where: fullWhere,\n    })\n\n    // /////////////////////////////////////\n    // afterOperation - Collection\n    // /////////////////////////////////////\n\n    result = await buildAfterOperation({\n      args,\n      collection: collectionConfig,\n      operation: 'count',\n      result,\n    })\n\n    // /////////////////////////////////////\n    // Return results\n    // /////////////////////////////////////\n\n    return result\n  } catch (error: unknown) {\n    await killTransaction(args.req)\n    throw error\n  }\n}\n"],"names":["executeAccess","combineQueries","validateQueryPaths","killTransaction","buildAfterOperation","countOperation","incomingArgs","args","collection","config","hooks","beforeOperation","reduce","priorHook","hook","context","req","operation","Promise","resolve","collectionConfig","disableErrors","overrideAccess","payload","where","accessResult","access","read","totalDocs","result","fullWhere","db","count","slug","error"],"mappings":";;;AAKA,OAAOA,mBAAmB,8BAA6B;AACvD,SAASC,cAAc,QAAQ,mCAAkC;AACjE,SAASC,kBAAkB,QAAQ,uDAAsD;AAEzF,SAASE,mBAAmB,QAAQ,aAAY;AADhD,SAASD,eAAe,QAAQ,qCAAoC;;;;;;AAW7D,MAAME,iBAAiB,OAC5BC;IAEA,IAAIC,OAAOD;IAEX,IAAI;QACF,wCAAwC;QACxC,+BAA+B;QAC/B,wCAAwC;QAExC,MAAMC,KAAKC,UAAU,CAACC,MAAM,CAACC,KAAK,CAACC,eAAe,CAACC,MAAM,CAAC,OAAOC,WAAWC;YAC1E,MAAMD;YAENN,OACG,MAAMO,KAAK;gBACVP;gBACAC,YAAYD,KAAKC,UAAU,CAACC,MAAM;gBAClCM,SAASR,KAAKS,GAAG,CAACD,OAAO;gBACzBE,WAAW;gBACXD,KAAKT,KAAKS,GAAG;YACf,MAAOT;QACX,GAAGW,QAAQC,OAAO;QAElB,MAAM,EACJX,YAAY,EAAEC,QAAQW,gBAAgB,EAAE,EACxCC,aAAa,EACbC,cAAc,EACdN,KAAK,EAAEO,OAAO,EAAE,EAChBP,GAAG,EACHQ,KAAK,EACN,GAAGjB;QAEJ,wCAAwC;QACxC,SAAS;QACT,wCAAwC;QAExC,IAAIkB;QAEJ,IAAI,CAACH,gBAAgB;YACnBG,eAAe,yXAAMzB,UAAAA,EAAc;gBAAEqB;gBAAeL;YAAI,GAAGI,iBAAiBM,MAAM,CAACC,IAAI;YAEvF,yEAAyE;YACzE,IAAIF,iBAAiB,OAAO;gBAC1B,OAAO;oBACLG,WAAW;gBACb;YACF;QACF;QAEA,IAAIC;QAEJ,MAAMC,oYAAY7B,iBAAAA,EAAeuB,OAAOC;QAExC,OAAMvB,maAAAA,EAAmB;YACvBkB;YACAE;YACAN;YACAQ;QACF;QAEAK,SAAS,MAAMN,QAAQQ,EAAE,CAACC,KAAK,CAAC;YAC9BxB,YAAYY,iBAAiBa,IAAI;YACjCjB;YACAQ,OAAOM;QACT;QAEA,wCAAwC;QACxC,8BAA8B;QAC9B,wCAAwC;QAExCD,SAAS,sYAAMzB,sBAAAA,EAAoB;YACjCG;YACAC,YAAYY;YACZH,WAAW;YACXY;QACF;QAEA,wCAAwC;QACxC,iBAAiB;QACjB,wCAAwC;QAExC,OAAOA;IACT,EAAE,OAAOK,OAAgB;QACvB,gYAAM/B,kBAAAA,EAAgBI,KAAKS,GAAG;QAC9B,MAAMkB;IACR;AACF,EAAC","ignoreList":[0]}},
    {"offset": {"line": 676, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 682, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/collections/operations/local/count.ts"],"sourcesContent":["import type { CollectionSlug, Payload, RequestContext, TypedLocale } from '../../../index.js'\nimport type { Document, PayloadRequest, Where } from '../../../types/index.js'\n\nimport { APIError } from '../../../errors/index.js'\nimport { createLocalReq } from '../../../utilities/createLocalReq.js'\nimport { countOperation } from '../count.js'\n\nexport type Options<TSlug extends CollectionSlug> = {\n  collection: TSlug\n  /**\n   * context, which will then be passed to req.context, which can be read by hooks\n   */\n  context?: RequestContext\n  depth?: number\n  disableErrors?: boolean\n  locale?: TypedLocale\n  overrideAccess?: boolean\n  req?: Partial<PayloadRequest>\n  user?: Document\n  where?: Where\n}\n\n// eslint-disable-next-line no-restricted-exports\nexport default async function countLocal<TSlug extends CollectionSlug>(\n  payload: Payload,\n  options: Options<TSlug>,\n): Promise<{ totalDocs: number }> {\n  const { collection: collectionSlug, disableErrors, overrideAccess = true, where } = options\n\n  const collection = payload.collections[collectionSlug]\n\n  if (!collection) {\n    throw new APIError(\n      `The collection with slug ${String(collectionSlug)} can't be found. Count Operation.`,\n    )\n  }\n\n  return countOperation<TSlug>({\n    collection,\n    disableErrors,\n    overrideAccess,\n    req: await createLocalReq(options, payload),\n    where,\n  })\n}\n"],"names":["APIError","createLocalReq","countOperation","countLocal","payload","options","collection","collectionSlug","disableErrors","overrideAccess","where","collections","String","req"],"mappings":";;;AAGA,SAASA,QAAQ,QAAQ,2BAA0B;AAEnD,SAASE,cAAc,QAAQ,cAAa;AAD5C,SAASD,cAAc,QAAQ,uCAAsC;;;;AAmBtD,eAAeE,WAC5BC,OAAgB,EAChBC,OAAuB;IAEvB,MAAM,EAAEC,YAAYC,cAAc,EAAEC,aAAa,EAAEC,iBAAiB,IAAI,EAAEC,KAAK,EAAE,GAAGL;IAEpF,MAAMC,aAAaF,QAAQO,WAAW,CAACJ,eAAe;IAEtD,IAAI,CAACD,YAAY;QACf,MAAM,gXAAIN,WAAAA,CACR,CAAC,yBAAyB,EAAEY,OAAOL,gBAAgB,iCAAiC,CAAC;IAEzF;IAEA,uYAAOL,iBAAAA,EAAsB;QAC3BI;QACAE;QACAC;QACAI,KAAK,+XAAMZ,iBAAAA,EAAeI,SAASD;QACnCM;IACF;AACF","ignoreList":[0]}},
    {"offset": {"line": 705, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 711, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/collections/operations/countVersions.ts"],"sourcesContent":["import type { AccessResult } from '../../config/types.js'\nimport type { PayloadRequest, Where } from '../../types/index.js'\nimport type { Collection } from '../config/types.js'\n\nimport executeAccess from '../../auth/executeAccess.js'\nimport { combineQueries } from '../../database/combineQueries.js'\nimport { validateQueryPaths } from '../../database/queryValidation/validateQueryPaths.js'\nimport { buildVersionCollectionFields, type CollectionSlug } from '../../index.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport { buildAfterOperation } from './utils.js'\n\nexport type Arguments = {\n  collection: Collection\n  disableErrors?: boolean\n  overrideAccess?: boolean\n  req?: PayloadRequest\n  where?: Where\n}\n\nexport const countVersionsOperation = async <TSlug extends CollectionSlug>(\n  incomingArgs: Arguments,\n): Promise<{ totalDocs: number }> => {\n  let args = incomingArgs\n\n  try {\n    // /////////////////////////////////////\n    // beforeOperation - Collection\n    // /////////////////////////////////////\n\n    await args.collection.config.hooks.beforeOperation.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      args =\n        (await hook({\n          args,\n          collection: args.collection.config,\n          context: args.req.context,\n          operation: 'countVersions',\n          req: args.req,\n        })) || args\n    }, Promise.resolve())\n\n    const {\n      collection: { config: collectionConfig },\n      disableErrors,\n      overrideAccess,\n      req: { payload },\n      req,\n      where,\n    } = args\n\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    let accessResult: AccessResult\n\n    if (!overrideAccess) {\n      accessResult = await executeAccess(\n        { disableErrors, req },\n        collectionConfig.access.readVersions,\n      )\n\n      // If errors are disabled, and access returns false, return empty results\n      if (accessResult === false) {\n        return {\n          totalDocs: 0,\n        }\n      }\n    }\n\n    let result: { totalDocs: number }\n\n    const fullWhere = combineQueries(where, accessResult)\n\n    const versionFields = buildVersionCollectionFields(payload.config, collectionConfig, true)\n\n    await validateQueryPaths({\n      collectionConfig,\n      overrideAccess,\n      req,\n      versionFields,\n      where,\n    })\n\n    result = await payload.db.countVersions({\n      collection: collectionConfig.slug,\n      req,\n      where: fullWhere,\n    })\n\n    // /////////////////////////////////////\n    // afterOperation - Collection\n    // /////////////////////////////////////\n\n    result = await buildAfterOperation({\n      args,\n      collection: collectionConfig,\n      operation: 'countVersions',\n      result,\n    })\n\n    // /////////////////////////////////////\n    // Return results\n    // /////////////////////////////////////\n\n    return result\n  } catch (error: unknown) {\n    await killTransaction(args.req)\n    throw error\n  }\n}\n"],"names":["executeAccess","combineQueries","validateQueryPaths","buildVersionCollectionFields","killTransaction","buildAfterOperation","countVersionsOperation","incomingArgs","args","collection","config","hooks","beforeOperation","reduce","priorHook","hook","context","req","operation","Promise","resolve","collectionConfig","disableErrors","overrideAccess","payload","where","accessResult","access","readVersions","totalDocs","result","fullWhere","versionFields","db","countVersions","slug","error"],"mappings":";;;AAIA,OAAOA,mBAAmB,8BAA6B;AACvD,SAASC,cAAc,QAAQ,mCAAkC;AAEjE,SAASE,4BAA4B,QAA6B,iBAAgB;AADlF,SAASD,kBAAkB,QAAQ,uDAAsD;AAGzF,SAASG,mBAAmB,QAAQ,aAAY;AADhD,SAASD,eAAe,QAAQ,qCAAoC;;;;;;;AAW7D,MAAME,yBAAyB,OACpCC;IAEA,IAAIC,OAAOD;IAEX,IAAI;QACF,wCAAwC;QACxC,+BAA+B;QAC/B,wCAAwC;QAExC,MAAMC,KAAKC,UAAU,CAACC,MAAM,CAACC,KAAK,CAACC,eAAe,CAACC,MAAM,CAAC,OAAOC,WAAWC;YAC1E,MAAMD;YAENN,OACG,MAAMO,KAAK;gBACVP;gBACAC,YAAYD,KAAKC,UAAU,CAACC,MAAM;gBAClCM,SAASR,KAAKS,GAAG,CAACD,OAAO;gBACzBE,WAAW;gBACXD,KAAKT,KAAKS,GAAG;YACf,MAAOT;QACX,GAAGW,QAAQC,OAAO;QAElB,MAAM,EACJX,YAAY,EAAEC,QAAQW,gBAAgB,EAAE,EACxCC,aAAa,EACbC,cAAc,EACdN,KAAK,EAAEO,OAAO,EAAE,EAChBP,GAAG,EACHQ,KAAK,EACN,GAAGjB;QAEJ,wCAAwC;QACxC,SAAS;QACT,wCAAwC;QAExC,IAAIkB;QAEJ,IAAI,CAACH,gBAAgB;YACnBG,eAAe,MAAM1B,6XAAAA,EACnB;gBAAEsB;gBAAeL;YAAI,GACrBI,iBAAiBM,MAAM,CAACC,YAAY;YAGtC,yEAAyE;YACzE,IAAIF,iBAAiB,OAAO;gBAC1B,OAAO;oBACLG,WAAW;gBACb;YACF;QACF;QAEA,IAAIC;QAEJ,MAAMC,oYAAY9B,iBAAAA,EAAewB,OAAOC;QAExC,MAAMM,+YAAgB7B,+BAAAA,EAA6BqB,QAAQd,MAAM,EAAEW,kBAAkB;QAErF,MAAMnB,oaAAAA,EAAmB;YACvBmB;YACAE;YACAN;YACAe;YACAP;QACF;QAEAK,SAAS,MAAMN,QAAQS,EAAE,CAACC,aAAa,CAAC;YACtCzB,YAAYY,iBAAiBc,IAAI;YACjClB;YACAQ,OAAOM;QACT;QAEA,wCAAwC;QACxC,8BAA8B;QAC9B,wCAAwC;QAExCD,SAAS,sYAAMzB,sBAAAA,EAAoB;YACjCG;YACAC,YAAYY;YACZH,WAAW;YACXY;QACF;QAEA,wCAAwC;QACxC,iBAAiB;QACjB,wCAAwC;QAExC,OAAOA;IACT,EAAE,OAAOM,OAAgB;QACvB,gYAAMhC,kBAAAA,EAAgBI,KAAKS,GAAG;QAC9B,MAAMmB;IACR;AACF,EAAC","ignoreList":[0]}},
    {"offset": {"line": 792, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 798, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/collections/operations/local/countVersions.ts"],"sourcesContent":["import type { CollectionSlug, Payload, RequestContext, TypedLocale } from '../../../index.js'\nimport type { Document, PayloadRequest, Where } from '../../../types/index.js'\n\nimport { APIError } from '../../../errors/index.js'\nimport { createLocalReq } from '../../../utilities/createLocalReq.js'\nimport { countVersionsOperation } from '../countVersions.js'\n\nexport type Options<TSlug extends CollectionSlug> = {\n  collection: TSlug\n  /**\n   * context, which will then be passed to req.context, which can be read by hooks\n   */\n  context?: RequestContext\n  depth?: number\n  disableErrors?: boolean\n  locale?: TypedLocale\n  overrideAccess?: boolean\n  req?: Partial<PayloadRequest>\n  user?: Document\n  where?: Where\n}\n\n// eslint-disable-next-line no-restricted-exports\nexport default async function countVersionsLocal<TSlug extends CollectionSlug>(\n  payload: Payload,\n  options: Options<TSlug>,\n): Promise<{ totalDocs: number }> {\n  const { collection: collectionSlug, disableErrors, overrideAccess = true, where } = options\n\n  const collection = payload.collections[collectionSlug]\n\n  if (!collection) {\n    throw new APIError(\n      `The collection with slug ${String(collectionSlug)} can't be found. Count Versions Operation.`,\n    )\n  }\n\n  return countVersionsOperation<TSlug>({\n    collection,\n    disableErrors,\n    overrideAccess,\n    req: await createLocalReq(options, payload),\n    where,\n  })\n}\n"],"names":["APIError","createLocalReq","countVersionsOperation","countVersionsLocal","payload","options","collection","collectionSlug","disableErrors","overrideAccess","where","collections","String","req"],"mappings":";;;AAGA,SAASA,QAAQ,QAAQ,2BAA0B;AAEnD,SAASE,sBAAsB,QAAQ,sBAAqB;AAD5D,SAASD,cAAc,QAAQ,uCAAsC;;;;AAmBtD,eAAeE,mBAC5BC,OAAgB,EAChBC,OAAuB;IAEvB,MAAM,EAAEC,YAAYC,cAAc,EAAEC,aAAa,EAAEC,iBAAiB,IAAI,EAAEC,KAAK,EAAE,GAAGL;IAEpF,MAAMC,aAAaF,QAAQO,WAAW,CAACJ,eAAe;IAEtD,IAAI,CAACD,YAAY;QACf,MAAM,gXAAIN,WAAAA,CACR,CAAC,yBAAyB,EAAEY,OAAOL,gBAAgB,0CAA0C,CAAC;IAElG;IAEA,+YAAOL,yBAAAA,EAA8B;QACnCI;QACAE;QACAC;QACAI,KAAK,+XAAMZ,iBAAAA,EAAeI,SAASD;QACnCM;IACF;AACF","ignoreList":[0]}},
    {"offset": {"line": 821, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 827, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/collections/operations/create.ts"],"sourcesContent":["import crypto from 'crypto'\n\nimport type { CollectionSlug, JsonObject } from '../../index.js'\nimport type {\n  Document,\n  PayloadRequest,\n  PopulateType,\n  SelectType,\n  TransformCollectionWithSelect,\n} from '../../types/index.js'\nimport type {\n  AfterChangeHook,\n  BeforeOperationHook,\n  BeforeValidateHook,\n  Collection,\n  DataFromCollectionSlug,\n  RequiredDataFromCollectionSlug,\n  SelectFromCollectionSlug,\n} from '../config/types.js'\n\nimport { ensureUsernameOrEmail } from '../../auth/ensureUsernameOrEmail.js'\nimport executeAccess from '../../auth/executeAccess.js'\nimport { sendVerificationEmail } from '../../auth/sendVerificationEmail.js'\nimport { registerLocalStrategy } from '../../auth/strategies/local/register.js'\nimport { getDuplicateDocumentData } from '../../duplicateDocument/index.js'\nimport { afterChange } from '../../fields/hooks/afterChange/index.js'\nimport { afterRead } from '../../fields/hooks/afterRead/index.js'\nimport { beforeChange } from '../../fields/hooks/beforeChange/index.js'\nimport { beforeValidate } from '../../fields/hooks/beforeValidate/index.js'\nimport { generateFileData } from '../../uploads/generateFileData.js'\nimport { unlinkTempFiles } from '../../uploads/unlinkTempFiles.js'\nimport { uploadFiles } from '../../uploads/uploadFiles.js'\nimport { commitTransaction } from '../../utilities/commitTransaction.js'\nimport { initTransaction } from '../../utilities/initTransaction.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport sanitizeInternalFields from '../../utilities/sanitizeInternalFields.js'\nimport { saveVersion } from '../../versions/saveVersion.js'\nimport { buildAfterOperation } from './utils.js'\n\nexport type Arguments<TSlug extends CollectionSlug> = {\n  autosave?: boolean\n  collection: Collection\n  data: RequiredDataFromCollectionSlug<TSlug>\n  depth?: number\n  disableTransaction?: boolean\n  disableVerificationEmail?: boolean\n  draft?: boolean\n  duplicateFromID?: DataFromCollectionSlug<TSlug>['id']\n  overrideAccess?: boolean\n  overwriteExistingFiles?: boolean\n  populate?: PopulateType\n  req: PayloadRequest\n  select?: SelectType\n  showHiddenFields?: boolean\n}\n\nexport const createOperation = async <\n  TSlug extends CollectionSlug,\n  TSelect extends SelectFromCollectionSlug<TSlug>,\n>(\n  incomingArgs: Arguments<TSlug>,\n): Promise<TransformCollectionWithSelect<TSlug, TSelect>> => {\n  let args = incomingArgs\n\n  try {\n    const shouldCommit = !args.disableTransaction && (await initTransaction(args.req))\n\n    ensureUsernameOrEmail<TSlug>({\n      authOptions: args.collection.config.auth,\n      collectionSlug: args.collection.config.slug,\n      data: args.data,\n      operation: 'create',\n      req: args.req,\n    })\n\n    // /////////////////////////////////////\n    // beforeOperation - Collection\n    // /////////////////////////////////////\n\n    await args.collection.config.hooks.beforeOperation.reduce(\n      async (priorHook: BeforeOperationHook | Promise<void>, hook: BeforeOperationHook) => {\n        await priorHook\n\n        args =\n          (await hook({\n            args,\n            collection: args.collection.config,\n            context: args.req.context,\n            operation: 'create',\n            req: args.req,\n          })) || args\n      },\n      Promise.resolve(),\n    )\n\n    const {\n      autosave = false,\n      collection: { config: collectionConfig },\n      collection,\n      depth,\n      disableVerificationEmail,\n      draft = false,\n      duplicateFromID,\n      overrideAccess,\n      overwriteExistingFiles = false,\n      populate,\n      req: {\n        fallbackLocale,\n        locale,\n        payload,\n        payload: { config },\n      },\n      req,\n      select,\n      showHiddenFields,\n    } = args\n\n    let { data } = args\n\n    const shouldSaveDraft = Boolean(draft && collectionConfig.versions.drafts)\n\n    let duplicatedFromDocWithLocales: JsonObject = {}\n    let duplicatedFromDoc: JsonObject = {}\n\n    if (duplicateFromID) {\n      const duplicateResult = await getDuplicateDocumentData({\n        id: duplicateFromID,\n        collectionConfig,\n        draftArg: shouldSaveDraft,\n        overrideAccess,\n        req,\n        shouldSaveDraft,\n      })\n\n      duplicatedFromDoc = duplicateResult.duplicatedFromDoc\n      duplicatedFromDocWithLocales = duplicateResult.duplicatedFromDocWithLocales\n    }\n\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    if (!overrideAccess) {\n      await executeAccess({ data, req }, collectionConfig.access.create)\n    }\n\n    // /////////////////////////////////////\n    // Generate data for all files and sizes\n    // /////////////////////////////////////\n\n    const { data: newFileData, files: filesToUpload } = await generateFileData({\n      collection,\n      config,\n      data,\n      isDuplicating: Boolean(duplicateFromID),\n      operation: 'create',\n      originalDoc: duplicatedFromDoc,\n      overwriteExistingFiles,\n      req,\n      throwOnMissingFile:\n        !shouldSaveDraft && collection.config.upload.filesRequiredOnCreate !== false,\n    })\n\n    data = newFileData\n\n    // /////////////////////////////////////\n    // beforeValidate - Fields\n    // /////////////////////////////////////\n\n    data = await beforeValidate({\n      collection: collectionConfig,\n      context: req.context,\n      data,\n      doc: duplicatedFromDoc,\n      global: null,\n      operation: 'create',\n      overrideAccess,\n      req,\n    })\n\n    // /////////////////////////////////////\n    // beforeValidate - Collections\n    // /////////////////////////////////////\n\n    await collectionConfig.hooks.beforeValidate.reduce(\n      async (priorHook: BeforeValidateHook | Promise<void>, hook: BeforeValidateHook) => {\n        await priorHook\n\n        data =\n          (await hook({\n            collection: collectionConfig,\n            context: req.context,\n            data,\n            operation: 'create',\n            originalDoc: duplicatedFromDoc,\n            req,\n          })) || data\n      },\n      Promise.resolve(),\n    )\n\n    // /////////////////////////////////////\n    // beforeChange - Collection\n    // /////////////////////////////////////\n\n    await collectionConfig.hooks.beforeChange.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      data =\n        (await hook({\n          collection: collectionConfig,\n          context: req.context,\n          data,\n          operation: 'create',\n          originalDoc: duplicatedFromDoc,\n          req,\n        })) || data\n    }, Promise.resolve())\n\n    // /////////////////////////////////////\n    // beforeChange - Fields\n    // /////////////////////////////////////\n\n    const resultWithLocales = await beforeChange<JsonObject>({\n      collection: collectionConfig,\n      context: req.context,\n      data,\n      doc: duplicatedFromDoc,\n      docWithLocales: duplicatedFromDocWithLocales,\n      global: null,\n      operation: 'create',\n      req,\n      skipValidation:\n        shouldSaveDraft &&\n        collectionConfig.versions.drafts &&\n        !collectionConfig.versions.drafts.validate,\n    })\n\n    // /////////////////////////////////////\n    // Write files to local storage\n    // /////////////////////////////////////\n\n    if (!collectionConfig.upload.disableLocalStorage) {\n      await uploadFiles(payload, filesToUpload, req)\n    }\n\n    // /////////////////////////////////////\n    // Create\n    // /////////////////////////////////////\n\n    let doc\n\n    if (collectionConfig.auth && !collectionConfig.auth.disableLocalStrategy) {\n      if (collectionConfig.auth.verify) {\n        resultWithLocales._verified = Boolean(resultWithLocales._verified) || false\n        resultWithLocales._verificationToken = crypto.randomBytes(20).toString('hex')\n      }\n\n      doc = await registerLocalStrategy({\n        collection: collectionConfig,\n        doc: resultWithLocales,\n        password: data.password as string,\n        payload: req.payload,\n        req,\n        select,\n      })\n    } else {\n      doc = await payload.db.create({\n        collection: collectionConfig.slug,\n        data: resultWithLocales,\n        req,\n        select,\n      })\n    }\n\n    const verificationToken = doc._verificationToken\n    let result: Document = sanitizeInternalFields(doc)\n\n    // /////////////////////////////////////\n    // Create version\n    // /////////////////////////////////////\n\n    if (collectionConfig.versions) {\n      await saveVersion({\n        id: result.id,\n        autosave,\n        collection: collectionConfig,\n        docWithLocales: result,\n        payload,\n        req,\n      })\n    }\n\n    // /////////////////////////////////////\n    // Send verification email if applicable\n    // /////////////////////////////////////\n\n    if (collectionConfig.auth && collectionConfig.auth.verify && result.email) {\n      await sendVerificationEmail({\n        collection: { config: collectionConfig },\n        config: payload.config,\n        disableEmail: disableVerificationEmail,\n        email: payload.email,\n        req,\n        token: verificationToken,\n        user: result,\n      })\n    }\n\n    // /////////////////////////////////////\n    // afterRead - Fields\n    // /////////////////////////////////////\n\n    result = await afterRead({\n      collection: collectionConfig,\n      context: req.context,\n      depth,\n      doc: result,\n      draft,\n      fallbackLocale,\n      global: null,\n      locale,\n      overrideAccess,\n      populate,\n      req,\n      select,\n      showHiddenFields,\n    })\n\n    // /////////////////////////////////////\n    // afterRead - Collection\n    // /////////////////////////////////////\n\n    await collectionConfig.hooks.afterRead.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      result =\n        (await hook({\n          collection: collectionConfig,\n          context: req.context,\n          doc: result,\n          req,\n        })) || result\n    }, Promise.resolve())\n\n    // /////////////////////////////////////\n    // afterChange - Fields\n    // /////////////////////////////////////\n\n    result = await afterChange({\n      collection: collectionConfig,\n      context: req.context,\n      data,\n      doc: result,\n      global: null,\n      operation: 'create',\n      previousDoc: {},\n      req,\n    })\n\n    // /////////////////////////////////////\n    // afterChange - Collection\n    // /////////////////////////////////////\n\n    await collectionConfig.hooks.afterChange.reduce(\n      async (priorHook: AfterChangeHook | Promise<void>, hook: AfterChangeHook) => {\n        await priorHook\n\n        result =\n          (await hook({\n            collection: collectionConfig,\n            context: req.context,\n            doc: result,\n            operation: 'create',\n            previousDoc: {},\n            req: args.req,\n          })) || result\n      },\n      Promise.resolve(),\n    )\n\n    // /////////////////////////////////////\n    // afterOperation - Collection\n    // /////////////////////////////////////\n\n    result = await buildAfterOperation<TSlug>({\n      args,\n      collection: collectionConfig,\n      operation: 'create',\n      result,\n    })\n\n    await unlinkTempFiles({ collectionConfig, config, req })\n\n    // /////////////////////////////////////\n    // Return results\n    // /////////////////////////////////////\n\n    if (shouldCommit) {\n      await commitTransaction(req)\n    }\n\n    return result\n  } catch (error: unknown) {\n    await killTransaction(args.req)\n    throw error\n  }\n}\n"],"names":["crypto","ensureUsernameOrEmail","executeAccess","sendVerificationEmail","registerLocalStrategy","getDuplicateDocumentData","afterChange","afterRead","beforeChange","beforeValidate","generateFileData","unlinkTempFiles","uploadFiles","commitTransaction","initTransaction","killTransaction","sanitizeInternalFields","saveVersion","buildAfterOperation","createOperation","incomingArgs","args","shouldCommit","disableTransaction","req","authOptions","collection","config","auth","collectionSlug","slug","data","operation","hooks","beforeOperation","reduce","priorHook","hook","context","Promise","resolve","autosave","collectionConfig","depth","disableVerificationEmail","draft","duplicateFromID","overrideAccess","overwriteExistingFiles","populate","fallbackLocale","locale","payload","select","showHiddenFields","shouldSaveDraft","Boolean","versions","drafts","duplicatedFromDocWithLocales","duplicatedFromDoc","duplicateResult","id","draftArg","access","create","newFileData","files","filesToUpload","isDuplicating","originalDoc","throwOnMissingFile","upload","filesRequiredOnCreate","doc","global","resultWithLocales","docWithLocales","skipValidation","validate","disableLocalStorage","disableLocalStrategy","verify","_verified","_verificationToken","randomBytes","toString","password","db","verificationToken","result","email","disableEmail","token","user","previousDoc","error"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1133, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1139, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/collections/operations/local/create.ts"],"sourcesContent":["import type { CollectionSlug, Payload, RequestContext, TypedLocale } from '../../../index.js'\nimport type {\n  Document,\n  PayloadRequest,\n  PopulateType,\n  SelectType,\n  TransformCollectionWithSelect,\n} from '../../../types/index.js'\nimport type { File } from '../../../uploads/types.js'\nimport type {\n  DataFromCollectionSlug,\n  RequiredDataFromCollectionSlug,\n  SelectFromCollectionSlug,\n} from '../../config/types.js'\n\nimport { APIError } from '../../../errors/index.js'\nimport { getFileByPath } from '../../../uploads/getFileByPath.js'\nimport { createLocalReq } from '../../../utilities/createLocalReq.js'\nimport { createOperation } from '../create.js'\n\nexport type Options<TSlug extends CollectionSlug, TSelect extends SelectType> = {\n  collection: TSlug\n  /**\n   * context, which will then be passed to req.context, which can be read by hooks\n   */\n  context?: RequestContext\n  data: RequiredDataFromCollectionSlug<TSlug>\n  depth?: number\n  disableTransaction?: boolean\n  disableVerificationEmail?: boolean\n  draft?: boolean\n  duplicateFromID?: DataFromCollectionSlug<TSlug>['id']\n  fallbackLocale?: false | TypedLocale\n  file?: File\n  filePath?: string\n  locale?: TypedLocale\n  overrideAccess?: boolean\n  overwriteExistingFiles?: boolean\n  populate?: PopulateType\n  req?: Partial<PayloadRequest>\n  select?: TSelect\n  showHiddenFields?: boolean\n  user?: Document\n}\n\n// eslint-disable-next-line no-restricted-exports\nexport default async function createLocal<\n  TSlug extends CollectionSlug,\n  TSelect extends SelectFromCollectionSlug<TSlug>,\n>(\n  payload: Payload,\n  options: Options<TSlug, TSelect>,\n): Promise<TransformCollectionWithSelect<TSlug, TSelect>> {\n  const {\n    collection: collectionSlug,\n    data,\n    depth,\n    disableTransaction,\n    disableVerificationEmail,\n    draft,\n    duplicateFromID,\n    file,\n    filePath,\n    overrideAccess = true,\n    overwriteExistingFiles = false,\n    populate,\n    select,\n    showHiddenFields,\n  } = options\n  const collection = payload.collections[collectionSlug]\n\n  if (!collection) {\n    throw new APIError(\n      `The collection with slug ${String(collectionSlug)} can't be found. Create Operation.`,\n    )\n  }\n\n  const req = await createLocalReq(options, payload)\n  req.file = file ?? (await getFileByPath(filePath))\n\n  return createOperation<TSlug, TSelect>({\n    collection,\n    data,\n    depth,\n    disableTransaction,\n    disableVerificationEmail,\n    draft,\n    duplicateFromID,\n    overrideAccess,\n    overwriteExistingFiles,\n    populate,\n    req,\n    select,\n    showHiddenFields,\n  })\n}\n"],"names":["APIError","getFileByPath","createLocalReq","createOperation","createLocal","payload","options","collection","collectionSlug","data","depth","disableTransaction","disableVerificationEmail","draft","duplicateFromID","file","filePath","overrideAccess","overwriteExistingFiles","populate","select","showHiddenFields","collections","String","req"],"mappings":";;;AAeA,SAASA,QAAQ,QAAQ,2BAA0B;AAEnD,SAASE,cAAc,QAAQ,uCAAsC;AADrE,SAASD,aAAa,QAAQ,oCAAmC;AAEjE,SAASE,eAAe,QAAQ,eAAc;;;;;AA4B/B,eAAeC,YAI5BC,OAAgB,EAChBC,OAAgC;IAEhC,MAAM,EACJC,YAAYC,cAAc,EAC1BC,IAAI,EACJC,KAAK,EACLC,kBAAkB,EAClBC,wBAAwB,EACxBC,KAAK,EACLC,eAAe,EACfC,IAAI,EACJC,QAAQ,EACRC,iBAAiB,IAAI,EACrBC,yBAAyB,KAAK,EAC9BC,QAAQ,EACRC,MAAM,EACNC,gBAAgB,EACjB,GAAGf;IACJ,MAAMC,aAAaF,QAAQiB,WAAW,CAACd,eAAe;IAEtD,IAAI,CAACD,YAAY;QACf,MAAM,gXAAIP,WAAAA,CACR,CAAC,yBAAyB,EAAEuB,OAAOf,gBAAgB,kCAAkC,CAAC;IAE1F;IAEA,MAAMgB,MAAM,+XAAMtB,iBAAAA,EAAeI,SAASD;IAC1CmB,IAAIT,IAAI,GAAGA,QAAS,4XAAMd,gBAAAA,EAAce;IAExC,wYAAOb,kBAAAA,EAAgC;QACrCI;QACAE;QACAC;QACAC;QACAC;QACAC;QACAC;QACAG;QACAC;QACAC;QACAK;QACAJ;QACAC;IACF;AACF","ignoreList":[0]}},
    {"offset": {"line": 1174, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1180, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/collections/operations/delete.ts"],"sourcesContent":["import httpStatus from 'http-status'\n\nimport type { AccessResult } from '../../config/types.js'\nimport type { CollectionSlug } from '../../index.js'\nimport type { PayloadRequest, PopulateType, SelectType, Where } from '../../types/index.js'\nimport type {\n  BeforeOperationHook,\n  BulkOperationResult,\n  Collection,\n  DataFromCollectionSlug,\n  SelectFromCollectionSlug,\n} from '../config/types.js'\n\nimport executeAccess from '../../auth/executeAccess.js'\nimport { combineQueries } from '../../database/combineQueries.js'\nimport { validateQueryPaths } from '../../database/queryValidation/validateQueryPaths.js'\nimport { APIError } from '../../errors/index.js'\nimport { afterRead } from '../../fields/hooks/afterRead/index.js'\nimport { deleteUserPreferences } from '../../preferences/deleteUserPreferences.js'\nimport { deleteAssociatedFiles } from '../../uploads/deleteAssociatedFiles.js'\nimport { checkDocumentLockStatus } from '../../utilities/checkDocumentLockStatus.js'\nimport { commitTransaction } from '../../utilities/commitTransaction.js'\nimport { initTransaction } from '../../utilities/initTransaction.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport { deleteCollectionVersions } from '../../versions/deleteCollectionVersions.js'\nimport { buildAfterOperation } from './utils.js'\n\nexport type Arguments = {\n  collection: Collection\n  depth?: number\n  disableTransaction?: boolean\n  overrideAccess?: boolean\n  overrideLock?: boolean\n  populate?: PopulateType\n  req: PayloadRequest\n  select?: SelectType\n  showHiddenFields?: boolean\n  where: Where\n}\n\nexport const deleteOperation = async <\n  TSlug extends CollectionSlug,\n  TSelect extends SelectFromCollectionSlug<TSlug>,\n>(\n  incomingArgs: Arguments,\n): Promise<BulkOperationResult<TSlug, TSelect>> => {\n  let args = incomingArgs\n\n  try {\n    const shouldCommit = !args.disableTransaction && (await initTransaction(args.req))\n    // /////////////////////////////////////\n    // beforeOperation - Collection\n    // /////////////////////////////////////\n\n    await args.collection.config.hooks.beforeOperation.reduce(\n      async (priorHook: BeforeOperationHook | Promise<void>, hook: BeforeOperationHook) => {\n        await priorHook\n\n        args =\n          (await hook({\n            args,\n            collection: args.collection.config,\n            context: args.req.context,\n            operation: 'delete',\n            req: args.req,\n          })) || args\n      },\n      Promise.resolve(),\n    )\n\n    const {\n      collection: { config: collectionConfig },\n      depth,\n      overrideAccess,\n      overrideLock,\n      populate,\n      req: {\n        fallbackLocale,\n        locale,\n        payload: { config },\n        payload,\n      },\n      req,\n      select,\n      showHiddenFields,\n      where,\n    } = args\n\n    if (!where) {\n      throw new APIError(\"Missing 'where' query of documents to delete.\", httpStatus.BAD_REQUEST)\n    }\n\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    let accessResult: AccessResult\n\n    if (!overrideAccess) {\n      accessResult = await executeAccess({ req }, collectionConfig.access.delete)\n    }\n\n    await validateQueryPaths({\n      collectionConfig,\n      overrideAccess,\n      req,\n      where,\n    })\n\n    const fullWhere = combineQueries(where, accessResult)\n\n    // /////////////////////////////////////\n    // Retrieve documents\n    // /////////////////////////////////////\n\n    const { docs } = await payload.db.find<DataFromCollectionSlug<TSlug>>({\n      collection: collectionConfig.slug,\n      locale,\n      req,\n      select,\n      where: fullWhere,\n    })\n\n    const errors = []\n\n    const promises = docs.map(async (doc) => {\n      let result\n\n      const { id } = doc\n\n      try {\n        // /////////////////////////////////////\n        // Handle potentially locked documents\n        // /////////////////////////////////////\n\n        await checkDocumentLockStatus({\n          id,\n          collectionSlug: collectionConfig.slug,\n          lockErrorMessage: `Document with ID ${id} is currently locked and cannot be deleted.`,\n          overrideLock,\n          req,\n        })\n\n        // /////////////////////////////////////\n        // beforeDelete - Collection\n        // /////////////////////////////////////\n\n        await collectionConfig.hooks.beforeDelete.reduce(async (priorHook, hook) => {\n          await priorHook\n\n          return hook({\n            id,\n            collection: collectionConfig,\n            context: req.context,\n            req,\n          })\n        }, Promise.resolve())\n\n        await deleteAssociatedFiles({\n          collectionConfig,\n          config,\n          doc,\n          overrideDelete: true,\n          req,\n        })\n\n        // /////////////////////////////////////\n        // Delete versions\n        // /////////////////////////////////////\n\n        if (collectionConfig.versions) {\n          await deleteCollectionVersions({\n            id,\n            slug: collectionConfig.slug,\n            payload,\n            req,\n          })\n        }\n\n        // /////////////////////////////////////\n        // Delete document\n        // /////////////////////////////////////\n\n        await payload.db.deleteOne({\n          collection: collectionConfig.slug,\n          req,\n          where: {\n            id: {\n              equals: id,\n            },\n          },\n        })\n\n        // /////////////////////////////////////\n        // afterRead - Fields\n        // /////////////////////////////////////\n\n        result = await afterRead({\n          collection: collectionConfig,\n          context: req.context,\n          depth,\n          doc: result || doc,\n          draft: undefined,\n          fallbackLocale,\n          global: null,\n          locale,\n          overrideAccess,\n          populate,\n          req,\n          select,\n          showHiddenFields,\n        })\n\n        // /////////////////////////////////////\n        // afterRead - Collection\n        // /////////////////////////////////////\n\n        await collectionConfig.hooks.afterRead.reduce(async (priorHook, hook) => {\n          await priorHook\n\n          result =\n            (await hook({\n              collection: collectionConfig,\n              context: req.context,\n              doc: result || doc,\n              req,\n            })) || result\n        }, Promise.resolve())\n\n        // /////////////////////////////////////\n        // afterDelete - Collection\n        // /////////////////////////////////////\n\n        await collectionConfig.hooks.afterDelete.reduce(async (priorHook, hook) => {\n          await priorHook\n\n          result =\n            (await hook({\n              id,\n              collection: collectionConfig,\n              context: req.context,\n              doc: result,\n              req,\n            })) || result\n        }, Promise.resolve())\n\n        // /////////////////////////////////////\n        // 8. Return results\n        // /////////////////////////////////////\n\n        return result\n      } catch (error) {\n        errors.push({\n          id: doc.id,\n          message: error.message,\n        })\n      }\n      return null\n    })\n\n    const awaitedDocs = await Promise.all(promises)\n\n    // /////////////////////////////////////\n    // Delete Preferences\n    // /////////////////////////////////////\n\n    await deleteUserPreferences({\n      collectionConfig,\n      ids: docs.map(({ id }) => id),\n      payload,\n      req,\n    })\n\n    let result = {\n      docs: awaitedDocs.filter(Boolean),\n      errors,\n    }\n\n    // /////////////////////////////////////\n    // afterOperation - Collection\n    // /////////////////////////////////////\n\n    result = await buildAfterOperation({\n      args,\n      collection: collectionConfig,\n      operation: 'delete',\n      result,\n    })\n\n    if (shouldCommit) {\n      await commitTransaction(req)\n    }\n\n    return result\n  } catch (error: unknown) {\n    await killTransaction(args.req)\n    throw error\n  }\n}\n"],"names":["httpStatus","executeAccess","combineQueries","validateQueryPaths","APIError","afterRead","deleteUserPreferences","deleteAssociatedFiles","checkDocumentLockStatus","commitTransaction","initTransaction","killTransaction","deleteCollectionVersions","buildAfterOperation","deleteOperation","incomingArgs","args","shouldCommit","disableTransaction","req","collection","config","hooks","beforeOperation","reduce","priorHook","hook","context","operation","Promise","resolve","collectionConfig","depth","overrideAccess","overrideLock","populate","fallbackLocale","locale","payload","select","showHiddenFields","where","BAD_REQUEST","accessResult","access","delete","fullWhere","docs","db","find","slug","errors","promises","map","doc","result","id","collectionSlug","lockErrorMessage","beforeDelete","overrideDelete","versions","deleteOne","equals","draft","undefined","global","afterDelete","error","push","message","awaitedDocs","all","ids","filter","Boolean"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1402, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1408, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/collections/operations/deleteByID.ts"],"sourcesContent":["import type { CollectionSlug } from '../../index.js'\nimport type {\n  PayloadRequest,\n  PopulateType,\n  SelectType,\n  TransformCollectionWithSelect,\n} from '../../types/index.js'\nimport type { BeforeOperationHook, Collection, DataFromCollectionSlug } from '../config/types.js'\n\nimport executeAccess from '../../auth/executeAccess.js'\nimport { hasWhereAccessResult } from '../../auth/types.js'\nimport { combineQueries } from '../../database/combineQueries.js'\nimport { Forbidden, NotFound } from '../../errors/index.js'\nimport { afterRead } from '../../fields/hooks/afterRead/index.js'\nimport { deleteUserPreferences } from '../../preferences/deleteUserPreferences.js'\nimport { deleteAssociatedFiles } from '../../uploads/deleteAssociatedFiles.js'\nimport { checkDocumentLockStatus } from '../../utilities/checkDocumentLockStatus.js'\nimport { commitTransaction } from '../../utilities/commitTransaction.js'\nimport { initTransaction } from '../../utilities/initTransaction.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport { deleteCollectionVersions } from '../../versions/deleteCollectionVersions.js'\nimport { buildAfterOperation } from './utils.js'\n\nexport type Arguments = {\n  collection: Collection\n  depth?: number\n  disableTransaction?: boolean\n  id: number | string\n  overrideAccess?: boolean\n  overrideLock?: boolean\n  populate?: PopulateType\n  req: PayloadRequest\n  select?: SelectType\n  showHiddenFields?: boolean\n}\n\nexport const deleteByIDOperation = async <TSlug extends CollectionSlug, TSelect extends SelectType>(\n  incomingArgs: Arguments,\n): Promise<TransformCollectionWithSelect<TSlug, TSelect>> => {\n  let args = incomingArgs\n\n  try {\n    const shouldCommit = !args.disableTransaction && (await initTransaction(args.req))\n\n    // /////////////////////////////////////\n    // beforeOperation - Collection\n    // /////////////////////////////////////\n\n    await args.collection.config.hooks.beforeOperation.reduce(\n      async (priorHook: BeforeOperationHook | Promise<void>, hook: BeforeOperationHook) => {\n        await priorHook\n\n        args =\n          (await hook({\n            args,\n            collection: args.collection.config,\n            context: args.req.context,\n            operation: 'delete',\n            req: args.req,\n          })) || args\n      },\n      Promise.resolve(),\n    )\n\n    const {\n      id,\n      collection: { config: collectionConfig },\n      depth,\n      overrideAccess,\n      overrideLock,\n      populate,\n      req: {\n        fallbackLocale,\n        locale,\n        payload: { config },\n        payload,\n      },\n      req,\n      select,\n      showHiddenFields,\n    } = args\n\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    const accessResults = !overrideAccess\n      ? await executeAccess({ id, req }, collectionConfig.access.delete)\n      : true\n    const hasWhereAccess = hasWhereAccessResult(accessResults)\n\n    // /////////////////////////////////////\n    // beforeDelete - Collection\n    // /////////////////////////////////////\n\n    await collectionConfig.hooks.beforeDelete.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      return hook({\n        id,\n        collection: collectionConfig,\n        context: req.context,\n        req,\n      })\n    }, Promise.resolve())\n\n    // /////////////////////////////////////\n    // Retrieve document\n    // /////////////////////////////////////\n\n    const docToDelete = await req.payload.db.findOne({\n      collection: collectionConfig.slug,\n      locale: req.locale,\n      req,\n      where: combineQueries({ id: { equals: id } }, accessResults),\n    })\n\n    if (!docToDelete && !hasWhereAccess) {\n      throw new NotFound(req.t)\n    }\n    if (!docToDelete && hasWhereAccess) {\n      throw new Forbidden(req.t)\n    }\n\n    // /////////////////////////////////////\n    // Handle potentially locked documents\n    // /////////////////////////////////////\n\n    await checkDocumentLockStatus({\n      id,\n      collectionSlug: collectionConfig.slug,\n      lockErrorMessage: `Document with ID ${id} is currently locked and cannot be deleted.`,\n      overrideLock,\n      req,\n    })\n\n    await deleteAssociatedFiles({\n      collectionConfig,\n      config,\n      doc: docToDelete,\n      overrideDelete: true,\n      req,\n    })\n\n    // /////////////////////////////////////\n    // Delete versions\n    // /////////////////////////////////////\n\n    if (collectionConfig.versions) {\n      await deleteCollectionVersions({\n        id,\n        slug: collectionConfig.slug,\n        payload,\n        req,\n      })\n    }\n\n    // /////////////////////////////////////\n    // Delete document\n    // /////////////////////////////////////\n\n    let result: DataFromCollectionSlug<TSlug> = await req.payload.db.deleteOne({\n      collection: collectionConfig.slug,\n      req,\n      select,\n      where: { id: { equals: id } },\n    })\n\n    // /////////////////////////////////////\n    // Delete Preferences\n    // /////////////////////////////////////\n\n    await deleteUserPreferences({\n      collectionConfig,\n      ids: [id],\n      payload,\n      req,\n    })\n\n    // /////////////////////////////////////\n    // afterRead - Fields\n    // /////////////////////////////////////\n\n    result = await afterRead({\n      collection: collectionConfig,\n      context: req.context,\n      depth,\n      doc: result,\n      draft: undefined,\n      fallbackLocale,\n      global: null,\n      locale,\n      overrideAccess,\n      populate,\n      req,\n      select,\n      showHiddenFields,\n    })\n\n    // /////////////////////////////////////\n    // afterRead - Collection\n    // /////////////////////////////////////\n\n    await collectionConfig.hooks.afterRead.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      result =\n        (await hook({\n          collection: collectionConfig,\n          context: req.context,\n          doc: result,\n          req,\n        })) || result\n    }, Promise.resolve())\n\n    // /////////////////////////////////////\n    // afterDelete - Collection\n    // /////////////////////////////////////\n\n    await collectionConfig.hooks.afterDelete.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      result =\n        (await hook({\n          id,\n          collection: collectionConfig,\n          context: req.context,\n          doc: result,\n          req,\n        })) || result\n    }, Promise.resolve())\n\n    // /////////////////////////////////////\n    // afterOperation - Collection\n    // /////////////////////////////////////\n\n    result = await buildAfterOperation({\n      args,\n      collection: collectionConfig,\n      operation: 'deleteByID',\n      result,\n    })\n\n    // /////////////////////////////////////\n    // 8. Return results\n    // /////////////////////////////////////\n\n    if (shouldCommit) {\n      await commitTransaction(req)\n    }\n\n    return result as TransformCollectionWithSelect<TSlug, TSelect>\n  } catch (error: unknown) {\n    await killTransaction(args.req)\n    throw error\n  }\n}\n"],"names":["executeAccess","hasWhereAccessResult","combineQueries","Forbidden","NotFound","afterRead","deleteUserPreferences","deleteAssociatedFiles","checkDocumentLockStatus","commitTransaction","initTransaction","killTransaction","deleteCollectionVersions","buildAfterOperation","deleteByIDOperation","incomingArgs","args","shouldCommit","disableTransaction","req","collection","config","hooks","beforeOperation","reduce","priorHook","hook","context","operation","Promise","resolve","id","collectionConfig","depth","overrideAccess","overrideLock","populate","fallbackLocale","locale","payload","select","showHiddenFields","accessResults","access","delete","hasWhereAccess","beforeDelete","docToDelete","db","findOne","slug","where","equals","t","collectionSlug","lockErrorMessage","doc","overrideDelete","versions","result","deleteOne","ids","draft","undefined","global","afterDelete","error"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1611, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1617, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/collections/operations/local/delete.ts"],"sourcesContent":["import type { CollectionSlug, Payload, RequestContext, TypedLocale } from '../../../index.js'\nimport type {\n  Document,\n  PayloadRequest,\n  PopulateType,\n  SelectType,\n  TransformCollectionWithSelect,\n  Where,\n} from '../../../types/index.js'\nimport type { BulkOperationResult, SelectFromCollectionSlug } from '../../config/types.js'\n\nimport { APIError } from '../../../errors/index.js'\nimport { createLocalReq } from '../../../utilities/createLocalReq.js'\nimport { deleteOperation } from '../delete.js'\nimport { deleteByIDOperation } from '../deleteByID.js'\n\nexport type BaseOptions<TSlug extends CollectionSlug, TSelect extends SelectType> = {\n  collection: TSlug\n  /**\n   * context, which will then be passed to req.context, which can be read by hooks\n   */\n  context?: RequestContext\n  depth?: number\n  disableTransaction?: boolean\n  fallbackLocale?: false | TypedLocale\n  locale?: TypedLocale\n  overrideAccess?: boolean\n  overrideLock?: boolean\n  populate?: PopulateType\n  req?: Partial<PayloadRequest>\n  select?: TSelect\n  showHiddenFields?: boolean\n  user?: Document\n}\n\nexport type ByIDOptions<\n  TSlug extends CollectionSlug,\n  TSelect extends SelectFromCollectionSlug<TSlug>,\n> = {\n  id: number | string\n  where?: never\n} & BaseOptions<TSlug, TSelect>\n\nexport type ManyOptions<\n  TSlug extends CollectionSlug,\n  TSelect extends SelectFromCollectionSlug<TSlug>,\n> = {\n  id?: never\n  where: Where\n} & BaseOptions<TSlug, TSelect>\n\nexport type Options<\n  TSlug extends CollectionSlug,\n  TSelect extends SelectFromCollectionSlug<TSlug>,\n> = ByIDOptions<TSlug, TSelect> | ManyOptions<TSlug, TSelect>\n\nasync function deleteLocal<\n  TSlug extends CollectionSlug,\n  TSelect extends SelectFromCollectionSlug<TSlug>,\n>(\n  payload: Payload,\n  options: ByIDOptions<TSlug, TSelect>,\n): Promise<TransformCollectionWithSelect<TSlug, TSelect>>\nasync function deleteLocal<\n  TSlug extends CollectionSlug,\n  TSelect extends SelectFromCollectionSlug<TSlug>,\n>(\n  payload: Payload,\n  options: ManyOptions<TSlug, TSelect>,\n): Promise<BulkOperationResult<TSlug, TSelect>>\nasync function deleteLocal<\n  TSlug extends CollectionSlug,\n  TSelect extends SelectFromCollectionSlug<TSlug>,\n>(\n  payload: Payload,\n  options: Options<TSlug, TSelect>,\n): Promise<BulkOperationResult<TSlug, TSelect> | TransformCollectionWithSelect<TSlug, TSelect>>\nasync function deleteLocal<\n  TSlug extends CollectionSlug,\n  TSelect extends SelectFromCollectionSlug<TSlug>,\n>(\n  payload: Payload,\n  options: Options<TSlug, TSelect>,\n): Promise<BulkOperationResult<TSlug, TSelect> | TransformCollectionWithSelect<TSlug, TSelect>> {\n  const {\n    id,\n    collection: collectionSlug,\n    depth,\n    disableTransaction,\n    overrideAccess = true,\n    overrideLock,\n    populate,\n    select,\n    showHiddenFields,\n    where,\n  } = options\n\n  const collection = payload.collections[collectionSlug]\n\n  if (!collection) {\n    throw new APIError(\n      `The collection with slug ${String(collectionSlug)} can't be found. Delete Operation.`,\n    )\n  }\n\n  const args = {\n    id,\n    collection,\n    depth,\n    disableTransaction,\n    overrideAccess,\n    overrideLock,\n    populate,\n    req: await createLocalReq(options, payload),\n    select,\n    showHiddenFields,\n    where,\n  }\n\n  if (options.id) {\n    return deleteByIDOperation<TSlug, TSelect>(args)\n  }\n  return deleteOperation<TSlug, TSelect>(args)\n}\n\nexport default deleteLocal\n"],"names":["APIError","createLocalReq","deleteOperation","deleteByIDOperation","deleteLocal","payload","options","id","collection","collectionSlug","depth","disableTransaction","overrideAccess","overrideLock","populate","select","showHiddenFields","where","collections","String","args","req"],"mappings":";;;AAWA,SAASA,QAAQ,QAAQ,2BAA0B;AACnD,SAASC,cAAc,QAAQ,uCAAsC;AACrE,SAASC,eAAe,QAAQ,eAAc;AAC9C,SAASC,mBAAmB,QAAQ,mBAAkB;;;;;AA+DtD,eAAeC,YAIbC,OAAgB,EAChBC,OAAgC;IAEhC,MAAM,EACJC,EAAE,EACFC,YAAYC,cAAc,EAC1BC,KAAK,EACLC,kBAAkB,EAClBC,iBAAiB,IAAI,EACrBC,YAAY,EACZC,QAAQ,EACRC,MAAM,EACNC,gBAAgB,EAChBC,KAAK,EACN,GAAGX;IAEJ,MAAME,aAAaH,QAAQa,WAAW,CAACT,eAAe;IAEtD,IAAI,CAACD,YAAY;QACf,MAAM,gXAAIR,WAAAA,CACR,CAAC,yBAAyB,EAAEmB,OAAOV,gBAAgB,kCAAkC,CAAC;IAE1F;IAEA,MAAMW,OAAO;QACXb;QACAC;QACAE;QACAC;QACAC;QACAC;QACAC;QACAO,KAAK,+XAAMpB,iBAAAA,EAAeK,SAASD;QACnCU;QACAC;QACAC;IACF;IAEA,IAAIX,QAAQC,EAAE,EAAE;QACd,4YAAOJ,sBAAAA,EAAoCiB;IAC7C;IACA,wYAAOlB,kBAAAA,EAAgCkB;AACzC;uCAEehB,YAAW","ignoreList":[0]}},
    {"offset": {"line": 1654, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1660, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/collections/operations/duplicate.ts"],"sourcesContent":["import type { DeepPartial } from 'ts-essentials'\n\nimport type { CollectionSlug } from '../../index.js'\nimport type { TransformCollectionWithSelect } from '../../types/index.js'\nimport type { RequiredDataFromCollectionSlug, SelectFromCollectionSlug } from '../config/types.js'\n\nimport { type Arguments as CreateArguments, createOperation } from './create.js'\n\nexport type Arguments<TSlug extends CollectionSlug> = {\n  data?: DeepPartial<RequiredDataFromCollectionSlug<TSlug>>\n  id: number | string\n} & Omit<CreateArguments<TSlug>, 'data' | 'duplicateFromID'>\n\nexport const duplicateOperation = async <\n  TSlug extends CollectionSlug,\n  TSelect extends SelectFromCollectionSlug<TSlug>,\n>(\n  incomingArgs: Arguments<TSlug>,\n): Promise<TransformCollectionWithSelect<TSlug, TSelect>> => {\n  const { id, ...args } = incomingArgs\n  return createOperation({\n    ...args,\n    data: incomingArgs?.data || {},\n    duplicateFromID: id,\n  })\n}\n"],"names":["createOperation","duplicateOperation","incomingArgs","id","args","data","duplicateFromID"],"mappings":";;;AAMA,SAA4CA,eAAe,QAAQ,cAAa;;AAOzE,MAAMC,qBAAqB,OAIhCC;IAEA,MAAM,EAAEC,EAAE,EAAE,GAAGC,MAAM,GAAGF;IACxB,wYAAOF,kBAAAA,EAAgB;QACrB,GAAGI,IAAI;QACPC,MAAMH,cAAcG,QAAQ,CAAC;QAC7BC,iBAAiBH;IACnB;AACF,EAAC","ignoreList":[0]}},
    {"offset": {"line": 1673, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1679, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/collections/operations/local/duplicate.ts"],"sourcesContent":["import type { DeepPartial } from 'ts-essentials'\n\nimport type { CollectionSlug, TypedLocale } from '../../..//index.js'\nimport type { Payload, RequestContext } from '../../../index.js'\nimport type {\n  Document,\n  PayloadRequest,\n  PopulateType,\n  SelectType,\n  TransformCollectionWithSelect,\n} from '../../../types/index.js'\nimport type {\n  RequiredDataFromCollectionSlug,\n  SelectFromCollectionSlug,\n} from '../../config/types.js'\n\nimport { APIError } from '../../../errors/index.js'\nimport { createLocalReq } from '../../../utilities/createLocalReq.js'\nimport { duplicateOperation } from '../duplicate.js'\n\nexport type Options<TSlug extends CollectionSlug, TSelect extends SelectType> = {\n  collection: TSlug\n  /**\n   * context, which will then be passed to req.context, which can be read by hooks\n   */\n  context?: RequestContext\n  data?: DeepPartial<RequiredDataFromCollectionSlug<TSlug>>\n  depth?: number\n  disableTransaction?: boolean\n  draft?: boolean\n  fallbackLocale?: false | TypedLocale\n  id: number | string\n  locale?: TypedLocale\n  overrideAccess?: boolean\n  populate?: PopulateType\n  req?: Partial<PayloadRequest>\n  select?: TSelect\n  showHiddenFields?: boolean\n  user?: Document\n}\n\nexport async function duplicate<\n  TSlug extends CollectionSlug,\n  TSelect extends SelectFromCollectionSlug<TSlug>,\n>(\n  payload: Payload,\n  options: Options<TSlug, TSelect>,\n): Promise<TransformCollectionWithSelect<TSlug, TSelect>> {\n  const {\n    id,\n    collection: collectionSlug,\n    data,\n    depth,\n    disableTransaction,\n    draft,\n    overrideAccess = true,\n    populate,\n    select,\n    showHiddenFields,\n  } = options\n  const collection = payload.collections[collectionSlug]\n\n  if (!collection) {\n    throw new APIError(\n      `The collection with slug ${String(collectionSlug)} can't be found. Duplicate Operation.`,\n    )\n  }\n\n  if (collection.config.disableDuplicate === true) {\n    throw new APIError(\n      `The collection with slug ${String(collectionSlug)} cannot be duplicated.`,\n      400,\n    )\n  }\n\n  const req = await createLocalReq(options, payload)\n\n  return duplicateOperation<TSlug, TSelect>({\n    id,\n    collection,\n    data,\n    depth,\n    disableTransaction,\n    draft,\n    overrideAccess,\n    populate,\n    req,\n    select,\n    showHiddenFields,\n  })\n}\n"],"names":["APIError","createLocalReq","duplicateOperation","duplicate","payload","options","id","collection","collectionSlug","data","depth","disableTransaction","draft","overrideAccess","populate","select","showHiddenFields","collections","String","config","disableDuplicate","req"],"mappings":";;;AAgBA,SAASA,QAAQ,QAAQ,2BAA0B;AACnD,SAASC,cAAc,QAAQ,uCAAsC;AACrE,SAASC,kBAAkB,QAAQ,kBAAiB;;;;AAuB7C,eAAeC,UAIpBC,OAAgB,EAChBC,OAAgC;IAEhC,MAAM,EACJC,EAAE,EACFC,YAAYC,cAAc,EAC1BC,IAAI,EACJC,KAAK,EACLC,kBAAkB,EAClBC,KAAK,EACLC,iBAAiB,IAAI,EACrBC,QAAQ,EACRC,MAAM,EACNC,gBAAgB,EACjB,GAAGX;IACJ,MAAME,aAAaH,QAAQa,WAAW,CAACT,eAAe;IAEtD,IAAI,CAACD,YAAY;QACf,MAAM,gXAAIP,WAAAA,CACR,CAAC,yBAAyB,EAAEkB,OAAOV,gBAAgB,qCAAqC,CAAC;IAE7F;IAEA,IAAID,WAAWY,MAAM,CAACC,gBAAgB,KAAK,MAAM;QAC/C,MAAM,gXAAIpB,WAAAA,CACR,CAAC,yBAAyB,EAAEkB,OAAOV,gBAAgB,sBAAsB,CAAC,EAC1E;IAEJ;IAEA,MAAMa,MAAM,+XAAMpB,iBAAAA,EAAeI,SAASD;IAE1C,2YAAOF,qBAAAA,EAAmC;QACxCI;QACAC;QACAE;QACAC;QACAC;QACAC;QACAC;QACAC;QACAO;QACAN;QACAC;IACF;AACF","ignoreList":[0]}},
    {"offset": {"line": 1712, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1718, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/collections/operations/find.ts"],"sourcesContent":["import type { AccessResult } from '../../config/types.js'\nimport type { PaginatedDocs } from '../../database/types.js'\nimport type { CollectionSlug, JoinQuery } from '../../index.js'\nimport type {\n  PayloadRequest,\n  PopulateType,\n  SelectType,\n  Sort,\n  TransformCollectionWithSelect,\n  Where,\n} from '../../types/index.js'\nimport type {\n  Collection,\n  DataFromCollectionSlug,\n  SelectFromCollectionSlug,\n} from '../config/types.js'\n\nimport executeAccess from '../../auth/executeAccess.js'\nimport { combineQueries } from '../../database/combineQueries.js'\nimport { validateQueryPaths } from '../../database/queryValidation/validateQueryPaths.js'\nimport { sanitizeJoinQuery } from '../../database/sanitizeJoinQuery.js'\nimport { afterRead } from '../../fields/hooks/afterRead/index.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport { buildVersionCollectionFields } from '../../versions/buildCollectionFields.js'\nimport { appendVersionToQueryKey } from '../../versions/drafts/appendVersionToQueryKey.js'\nimport { getQueryDraftsSelect } from '../../versions/drafts/getQueryDraftsSelect.js'\nimport { getQueryDraftsSort } from '../../versions/drafts/getQueryDraftsSort.js'\nimport { buildAfterOperation } from './utils.js'\n\nexport type Arguments = {\n  collection: Collection\n  currentDepth?: number\n  depth?: number\n  disableErrors?: boolean\n  draft?: boolean\n  includeLockStatus?: boolean\n  joins?: JoinQuery\n  limit?: number\n  overrideAccess?: boolean\n  page?: number\n  pagination?: boolean\n  populate?: PopulateType\n  req?: PayloadRequest\n  select?: SelectType\n  showHiddenFields?: boolean\n  sort?: Sort\n  where?: Where\n}\n\nexport const findOperation = async <\n  TSlug extends CollectionSlug,\n  TSelect extends SelectFromCollectionSlug<TSlug>,\n>(\n  incomingArgs: Arguments,\n): Promise<PaginatedDocs<TransformCollectionWithSelect<TSlug, TSelect>>> => {\n  let args = incomingArgs\n\n  try {\n    // /////////////////////////////////////\n    // beforeOperation - Collection\n    // /////////////////////////////////////\n\n    await args.collection.config.hooks.beforeOperation.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      args =\n        (await hook({\n          args,\n          collection: args.collection.config,\n          context: args.req.context,\n          operation: 'read',\n          req: args.req,\n        })) || args\n    }, Promise.resolve())\n\n    const {\n      collection: { config: collectionConfig },\n      collection,\n      currentDepth,\n      depth,\n      disableErrors,\n      draft: draftsEnabled,\n      includeLockStatus,\n      joins,\n      limit,\n      overrideAccess,\n      page,\n      pagination = true,\n      populate,\n      req: { fallbackLocale, locale, payload },\n      req,\n      select,\n      showHiddenFields,\n      sort,\n      where,\n    } = args\n\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    let accessResult: AccessResult\n\n    if (!overrideAccess) {\n      accessResult = await executeAccess({ disableErrors, req }, collectionConfig.access.read)\n\n      // If errors are disabled, and access returns false, return empty results\n      if (accessResult === false) {\n        return {\n          docs: [],\n          hasNextPage: false,\n          hasPrevPage: false,\n          limit,\n          nextPage: null,\n          page: 1,\n          pagingCounter: 1,\n          prevPage: null,\n          totalDocs: 0,\n          totalPages: 1,\n        }\n      }\n    }\n\n    // /////////////////////////////////////\n    // Find\n    // /////////////////////////////////////\n\n    const usePagination = pagination && limit !== 0\n    const sanitizedLimit = limit ?? (usePagination ? 10 : 0)\n    const sanitizedPage = page || 1\n\n    let result: PaginatedDocs<DataFromCollectionSlug<TSlug>>\n\n    let fullWhere = combineQueries(where, accessResult)\n\n    const sanitizedJoins = await sanitizeJoinQuery({\n      collectionConfig,\n      joins,\n      overrideAccess,\n      req,\n    })\n\n    if (collectionConfig.versions?.drafts && draftsEnabled) {\n      fullWhere = appendVersionToQueryKey(fullWhere)\n\n      await validateQueryPaths({\n        collectionConfig: collection.config,\n        overrideAccess,\n        req,\n        versionFields: buildVersionCollectionFields(payload.config, collection.config, true),\n        where: appendVersionToQueryKey(where),\n      })\n\n      result = await payload.db.queryDrafts<DataFromCollectionSlug<TSlug>>({\n        collection: collectionConfig.slug,\n        joins: req.payloadAPI === 'GraphQL' ? false : sanitizedJoins,\n        limit: sanitizedLimit,\n        locale,\n        page: sanitizedPage,\n        pagination: usePagination,\n        req,\n        select: getQueryDraftsSelect({ select }),\n        sort: getQueryDraftsSort({ collectionConfig, sort }),\n        where: fullWhere,\n      })\n    } else {\n      await validateQueryPaths({\n        collectionConfig,\n        overrideAccess,\n        req,\n        where,\n      })\n\n      result = await payload.db.find<DataFromCollectionSlug<TSlug>>({\n        collection: collectionConfig.slug,\n        joins: req.payloadAPI === 'GraphQL' ? false : sanitizedJoins,\n        limit: sanitizedLimit,\n        locale,\n        page: sanitizedPage,\n        pagination,\n        req,\n        select,\n        sort,\n        where: fullWhere,\n      })\n    }\n\n    if (includeLockStatus) {\n      try {\n        const lockDocumentsProp = collectionConfig?.lockDocuments\n\n        const lockDurationDefault = 300 // Default 5 minutes in seconds\n        const lockDuration =\n          typeof lockDocumentsProp === 'object' ? lockDocumentsProp.duration : lockDurationDefault\n        const lockDurationInMilliseconds = lockDuration * 1000\n\n        const lockedDocuments = await payload.find({\n          collection: 'payload-locked-documents',\n          depth: 1,\n          limit: sanitizedLimit,\n          overrideAccess: false,\n          pagination: false,\n          req,\n          where: {\n            and: [\n              {\n                'document.relationTo': {\n                  equals: collectionConfig.slug,\n                },\n              },\n              {\n                'document.value': {\n                  in: result.docs.map((doc) => doc.id),\n                },\n              },\n              // Query where the lock is newer than the current time minus lock time\n              {\n                updatedAt: {\n                  greater_than: new Date(new Date().getTime() - lockDurationInMilliseconds),\n                },\n              },\n            ],\n          },\n        })\n\n        const now = new Date().getTime()\n        const lockedDocs = Array.isArray(lockedDocuments?.docs) ? lockedDocuments.docs : []\n\n        // Filter out stale locks\n        const validLockedDocs = lockedDocs.filter((lock) => {\n          const lastEditedAt = new Date(lock?.updatedAt).getTime()\n          return lastEditedAt + lockDurationInMilliseconds > now\n        })\n\n        result.docs = result.docs.map((doc) => {\n          const lockedDoc = validLockedDocs.find((lock) => lock?.document?.value === doc.id)\n          return {\n            ...doc,\n            _isLocked: !!lockedDoc,\n            _userEditing: lockedDoc ? lockedDoc?.user?.value : null,\n          }\n        })\n      } catch (error) {\n        result.docs = result.docs.map((doc) => ({\n          ...doc,\n          _isLocked: false,\n          _userEditing: null,\n        }))\n      }\n    }\n\n    // /////////////////////////////////////\n    // beforeRead - Collection\n    // /////////////////////////////////////\n\n    result = {\n      ...result,\n      docs: await Promise.all(\n        result.docs.map(async (doc) => {\n          let docRef = doc\n\n          await collectionConfig.hooks.beforeRead.reduce(async (priorHook, hook) => {\n            await priorHook\n\n            docRef =\n              (await hook({\n                collection: collectionConfig,\n                context: req.context,\n                doc: docRef,\n                query: fullWhere,\n                req,\n              })) || docRef\n          }, Promise.resolve())\n\n          return docRef\n        }),\n      ),\n    }\n\n    // /////////////////////////////////////\n    // afterRead - Fields\n    // /////////////////////////////////////\n\n    result = {\n      ...result,\n      docs: await Promise.all(\n        result.docs.map(async (doc) =>\n          afterRead<DataFromCollectionSlug<TSlug>>({\n            collection: collectionConfig,\n            context: req.context,\n            currentDepth,\n            depth,\n            doc,\n            draft: draftsEnabled,\n            fallbackLocale,\n            findMany: true,\n            global: null,\n            locale,\n            overrideAccess,\n            populate,\n            req,\n            select,\n            showHiddenFields,\n          }),\n        ),\n      ),\n    }\n\n    // /////////////////////////////////////\n    // afterRead - Collection\n    // /////////////////////////////////////\n\n    result = {\n      ...result,\n      docs: await Promise.all(\n        result.docs.map(async (doc) => {\n          let docRef = doc\n\n          await collectionConfig.hooks.afterRead.reduce(async (priorHook, hook) => {\n            await priorHook\n\n            docRef =\n              (await hook({\n                collection: collectionConfig,\n                context: req.context,\n                doc: docRef,\n                findMany: true,\n                query: fullWhere,\n                req,\n              })) || doc\n          }, Promise.resolve())\n\n          return docRef\n        }),\n      ),\n    }\n\n    // /////////////////////////////////////\n    // afterOperation - Collection\n    // /////////////////////////////////////\n\n    result = await buildAfterOperation({\n      args,\n      collection: collectionConfig,\n      operation: 'find',\n      result,\n    })\n\n    // /////////////////////////////////////\n    // Return results\n    // /////////////////////////////////////\n\n    return result as PaginatedDocs<TransformCollectionWithSelect<TSlug, TSelect>>\n  } catch (error: unknown) {\n    await killTransaction(args.req)\n    throw error\n  }\n}\n"],"names":["executeAccess","combineQueries","validateQueryPaths","sanitizeJoinQuery","afterRead","killTransaction","buildVersionCollectionFields","appendVersionToQueryKey","getQueryDraftsSelect","getQueryDraftsSort","buildAfterOperation","findOperation","incomingArgs","args","collection","config","hooks","beforeOperation","reduce","priorHook","hook","context","req","operation","Promise","resolve","collectionConfig","currentDepth","depth","disableErrors","draft","draftsEnabled","includeLockStatus","joins","limit","overrideAccess","page","pagination","populate","fallbackLocale","locale","payload","select","showHiddenFields","sort","where","accessResult","access","read","docs","hasNextPage","hasPrevPage","nextPage","pagingCounter","prevPage","totalDocs","totalPages","usePagination","sanitizedLimit","sanitizedPage","result","fullWhere","sanitizedJoins","versions","drafts","versionFields","db","queryDrafts","slug","payloadAPI","find","lockDocumentsProp","lockDocuments","lockDurationDefault","lockDuration","duration","lockDurationInMilliseconds","lockedDocuments","and","equals","in","map","doc","id","updatedAt","greater_than","Date","getTime","now","lockedDocs","Array","isArray","validLockedDocs","filter","lock","lastEditedAt","lockedDoc","document","value","_isLocked","_userEditing","user","error","all","docRef","beforeRead","query","findMany","global"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1985, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1991, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/collections/operations/local/find.ts"],"sourcesContent":["import type { PaginatedDocs } from '../../../database/types.js'\nimport type {\n  CollectionSlug,\n  JoinQuery,\n  Payload,\n  RequestContext,\n  TypedLocale,\n} from '../../../index.js'\nimport type {\n  Document,\n  PayloadRequest,\n  PopulateType,\n  SelectType,\n  Sort,\n  TransformCollectionWithSelect,\n  Where,\n} from '../../../types/index.js'\nimport type { SelectFromCollectionSlug } from '../../config/types.js'\n\nimport { APIError } from '../../../errors/index.js'\nimport { createLocalReq } from '../../../utilities/createLocalReq.js'\nimport { findOperation } from '../find.js'\n\nexport type Options<TSlug extends CollectionSlug, TSelect extends SelectType> = {\n  collection: TSlug\n  /**\n   * context, which will then be passed to req.context, which can be read by hooks\n   */\n  context?: RequestContext\n  currentDepth?: number\n  depth?: number\n  disableErrors?: boolean\n  draft?: boolean\n  fallbackLocale?: false | TypedLocale\n  includeLockStatus?: boolean\n  joins?: JoinQuery<TSlug>\n  limit?: number\n  locale?: 'all' | TypedLocale\n  overrideAccess?: boolean\n  page?: number\n  pagination?: boolean\n  populate?: PopulateType\n  req?: Partial<PayloadRequest>\n  select?: TSelect\n  showHiddenFields?: boolean\n  sort?: Sort\n  user?: Document\n  where?: Where\n}\n\nexport async function findLocal<\n  TSlug extends CollectionSlug,\n  TSelect extends SelectFromCollectionSlug<TSlug>,\n>(\n  payload: Payload,\n  options: Options<TSlug, TSelect>,\n): Promise<PaginatedDocs<TransformCollectionWithSelect<TSlug, TSelect>>> {\n  const {\n    collection: collectionSlug,\n    currentDepth,\n    depth,\n    disableErrors,\n    draft = false,\n    includeLockStatus,\n    joins,\n    limit,\n    overrideAccess = true,\n    page,\n    pagination = true,\n    populate,\n    select,\n    showHiddenFields,\n    sort,\n    where,\n  } = options\n\n  const collection = payload.collections[collectionSlug]\n\n  if (!collection) {\n    throw new APIError(\n      `The collection with slug ${String(collectionSlug)} can't be found. Find Operation.`,\n    )\n  }\n\n  return findOperation<TSlug, TSelect>({\n    collection,\n    currentDepth,\n    depth,\n    disableErrors,\n    draft,\n    includeLockStatus,\n    joins,\n    limit,\n    overrideAccess,\n    page,\n    pagination,\n    populate,\n    req: await createLocalReq(options, payload),\n    select,\n    showHiddenFields,\n    sort,\n    where,\n  })\n}\n"],"names":["APIError","createLocalReq","findOperation","findLocal","payload","options","collection","collectionSlug","currentDepth","depth","disableErrors","draft","includeLockStatus","joins","limit","overrideAccess","page","pagination","populate","select","showHiddenFields","sort","where","collections","String","req"],"mappings":";;;AAmBA,SAASA,QAAQ,QAAQ,2BAA0B;AAEnD,SAASE,aAAa,QAAQ,aAAY;AAD1C,SAASD,cAAc,QAAQ,uCAAsC;;;;AA8B9D,eAAeE,UAIpBC,OAAgB,EAChBC,OAAgC;IAEhC,MAAM,EACJC,YAAYC,cAAc,EAC1BC,YAAY,EACZC,KAAK,EACLC,aAAa,EACbC,QAAQ,KAAK,EACbC,iBAAiB,EACjBC,KAAK,EACLC,KAAK,EACLC,iBAAiB,IAAI,EACrBC,IAAI,EACJC,aAAa,IAAI,EACjBC,QAAQ,EACRC,MAAM,EACNC,gBAAgB,EAChBC,IAAI,EACJC,KAAK,EACN,GAAGjB;IAEJ,MAAMC,aAAaF,QAAQmB,WAAW,CAAChB,eAAe;IAEtD,IAAI,CAACD,YAAY;QACf,MAAM,gXAAIN,WAAAA,CACR,CAAC,yBAAyB,EAAEwB,OAAOjB,gBAAgB,gCAAgC,CAAC;IAExF;IAEA,sYAAOL,gBAAAA,EAA8B;QACnCI;QACAE;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAO,KAAK,+XAAMxB,iBAAAA,EAAeI,SAASD;QACnCe;QACAC;QACAC;QACAC;IACF;AACF","ignoreList":[0]}},
    {"offset": {"line": 2026, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2032, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/collections/operations/findByID.ts"],"sourcesContent":["import type { FindOneArgs } from '../../database/types.js'\nimport type { CollectionSlug, JoinQuery } from '../../index.js'\nimport type {\n  ApplyDisableErrors,\n  PayloadRequest,\n  PopulateType,\n  SelectType,\n  TransformCollectionWithSelect,\n} from '../../types/index.js'\nimport type {\n  Collection,\n  DataFromCollectionSlug,\n  SelectFromCollectionSlug,\n} from '../config/types.js'\n\nimport executeAccess from '../../auth/executeAccess.js'\nimport { combineQueries } from '../../database/combineQueries.js'\nimport { sanitizeJoinQuery } from '../../database/sanitizeJoinQuery.js'\nimport { NotFound } from '../../errors/index.js'\nimport { afterRead } from '../../fields/hooks/afterRead/index.js'\nimport { validateQueryPaths } from '../../index.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport replaceWithDraftIfAvailable from '../../versions/drafts/replaceWithDraftIfAvailable.js'\nimport { buildAfterOperation } from './utils.js'\n\nexport type Arguments = {\n  collection: Collection\n  currentDepth?: number\n  depth?: number\n  disableErrors?: boolean\n  draft?: boolean\n  id: number | string\n  includeLockStatus?: boolean\n  joins?: JoinQuery\n  overrideAccess?: boolean\n  populate?: PopulateType\n  req: PayloadRequest\n  select?: SelectType\n  showHiddenFields?: boolean\n}\n\nexport const findByIDOperation = async <\n  TSlug extends CollectionSlug,\n  TDisableErrors extends boolean,\n  TSelect extends SelectFromCollectionSlug<TSlug>,\n>(\n  incomingArgs: Arguments,\n): Promise<ApplyDisableErrors<TransformCollectionWithSelect<TSlug, TSelect>, TDisableErrors>> => {\n  let args = incomingArgs\n\n  try {\n    // /////////////////////////////////////\n    // beforeOperation - Collection\n    // /////////////////////////////////////\n\n    await args.collection.config.hooks.beforeOperation.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      args =\n        (await hook({\n          args,\n          collection: args.collection.config,\n          context: args.req.context,\n          operation: 'read',\n          req: args.req,\n        })) || args\n    }, Promise.resolve())\n\n    const {\n      id,\n      collection: { config: collectionConfig },\n      currentDepth,\n      depth,\n      disableErrors,\n      draft: draftEnabled = false,\n      includeLockStatus,\n      joins,\n      overrideAccess = false,\n      populate,\n      req: { fallbackLocale, locale, t },\n      req,\n      select,\n      showHiddenFields,\n    } = args\n\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    const accessResult = !overrideAccess\n      ? await executeAccess({ id, disableErrors, req }, collectionConfig.access.read)\n      : true\n\n    // If errors are disabled, and access returns false, return null\n    if (accessResult === false) {\n      return null\n    }\n\n    const where = { id: { equals: id } }\n\n    const fullWhere = combineQueries(where, accessResult)\n\n    const sanitizedJoins = await sanitizeJoinQuery({\n      collectionConfig,\n      joins,\n      overrideAccess,\n      req,\n    })\n\n    const findOneArgs: FindOneArgs = {\n      collection: collectionConfig.slug,\n      joins: req.payloadAPI === 'GraphQL' ? false : sanitizedJoins,\n      locale,\n      req: {\n        transactionID: req.transactionID,\n      } as PayloadRequest,\n      select,\n      where: fullWhere,\n    }\n\n    // execute only if there's a custom ID and potentially overwriten access on id\n    if (req.payload.collections[collectionConfig.slug].customIDType) {\n      await validateQueryPaths({\n        collectionConfig,\n        overrideAccess,\n        req,\n        where,\n      })\n    }\n    // /////////////////////////////////////\n    // Find by ID\n    // /////////////////////////////////////\n\n    if (!findOneArgs.where.and[0].id) {\n      throw new NotFound(t)\n    }\n\n    let result: DataFromCollectionSlug<TSlug> = await req.payload.db.findOne(findOneArgs)\n\n    if (!result) {\n      if (!disableErrors) {\n        throw new NotFound(req.t)\n      }\n\n      return null\n    }\n\n    // /////////////////////////////////////\n    // Include Lock Status if required\n    // /////////////////////////////////////\n\n    if (includeLockStatus && id) {\n      let lockStatus = null\n\n      try {\n        const lockDocumentsProp = collectionConfig?.lockDocuments\n\n        const lockDurationDefault = 300 // Default 5 minutes in seconds\n        const lockDuration =\n          typeof lockDocumentsProp === 'object' ? lockDocumentsProp.duration : lockDurationDefault\n        const lockDurationInMilliseconds = lockDuration * 1000\n\n        const lockedDocument = await req.payload.find({\n          collection: 'payload-locked-documents',\n          depth: 1,\n          limit: 1,\n          overrideAccess: false,\n          pagination: false,\n          req,\n          where: {\n            and: [\n              {\n                'document.relationTo': {\n                  equals: collectionConfig.slug,\n                },\n              },\n              {\n                'document.value': {\n                  equals: id,\n                },\n              },\n              // Query where the lock is newer than the current time minus lock time\n              {\n                updatedAt: {\n                  greater_than: new Date(new Date().getTime() - lockDurationInMilliseconds),\n                },\n              },\n            ],\n          },\n        })\n\n        if (lockedDocument && lockedDocument.docs.length > 0) {\n          lockStatus = lockedDocument.docs[0]\n        }\n      } catch {\n        // swallow error\n      }\n\n      result._isLocked = !!lockStatus\n      result._userEditing = lockStatus?.user?.value ?? null\n    }\n\n    // /////////////////////////////////////\n    // Replace document with draft if available\n    // /////////////////////////////////////\n\n    if (collectionConfig.versions?.drafts && draftEnabled) {\n      result = await replaceWithDraftIfAvailable({\n        accessResult,\n        doc: result,\n        entity: collectionConfig,\n        entityType: 'collection',\n        overrideAccess,\n        req,\n        select,\n      })\n    }\n\n    // /////////////////////////////////////\n    // beforeRead - Collection\n    // /////////////////////////////////////\n\n    await collectionConfig.hooks.beforeRead.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      result =\n        (await hook({\n          collection: collectionConfig,\n          context: req.context,\n          doc: result,\n          query: findOneArgs.where,\n          req,\n        })) || result\n    }, Promise.resolve())\n\n    // /////////////////////////////////////\n    // afterRead - Fields\n    // /////////////////////////////////////\n\n    result = await afterRead({\n      collection: collectionConfig,\n      context: req.context,\n      currentDepth,\n      depth,\n      doc: result,\n      draft: draftEnabled,\n      fallbackLocale,\n      global: null,\n      locale,\n      overrideAccess,\n      populate,\n      req,\n      select,\n      showHiddenFields,\n    })\n\n    // /////////////////////////////////////\n    // afterRead - Collection\n    // /////////////////////////////////////\n\n    await collectionConfig.hooks.afterRead.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      result =\n        (await hook({\n          collection: collectionConfig,\n          context: req.context,\n          doc: result,\n          query: findOneArgs.where,\n          req,\n        })) || result\n    }, Promise.resolve())\n\n    // /////////////////////////////////////\n    // afterOperation - Collection\n    // /////////////////////////////////////\n\n    result = await buildAfterOperation({\n      args,\n      collection: collectionConfig,\n      operation: 'findByID',\n      result,\n    })\n\n    // /////////////////////////////////////\n    // Return results\n    // /////////////////////////////////////\n\n    return result as ApplyDisableErrors<\n      TransformCollectionWithSelect<TSlug, TSelect>,\n      TDisableErrors\n    >\n  } catch (error: unknown) {\n    await killTransaction(args.req)\n    throw error\n  }\n}\n"],"names":["executeAccess","combineQueries","sanitizeJoinQuery","NotFound","afterRead","validateQueryPaths","killTransaction","replaceWithDraftIfAvailable","buildAfterOperation","findByIDOperation","incomingArgs","args","collection","config","hooks","beforeOperation","reduce","priorHook","hook","context","req","operation","Promise","resolve","id","collectionConfig","currentDepth","depth","disableErrors","draft","draftEnabled","includeLockStatus","joins","overrideAccess","populate","fallbackLocale","locale","t","select","showHiddenFields","accessResult","access","read","where","equals","fullWhere","sanitizedJoins","findOneArgs","slug","payloadAPI","transactionID","payload","collections","customIDType","and","result","db","findOne","lockStatus","lockDocumentsProp","lockDocuments","lockDurationDefault","lockDuration","duration","lockDurationInMilliseconds","lockedDocument","find","limit","pagination","updatedAt","greater_than","Date","getTime","docs","length","_isLocked","_userEditing","user","value","versions","drafts","doc","entity","entityType","beforeRead","query","global","error"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2251, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2257, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/collections/operations/local/findByID.ts"],"sourcesContent":["/* eslint-disable no-restricted-exports */\nimport type {\n  CollectionSlug,\n  JoinQuery,\n  Payload,\n  RequestContext,\n  SelectType,\n  TypedLocale,\n} from '../../../index.js'\nimport type {\n  ApplyDisableErrors,\n  Document,\n  PayloadRequest,\n  PopulateType,\n  TransformCollectionWithSelect,\n} from '../../../types/index.js'\nimport type { SelectFromCollectionSlug } from '../../config/types.js'\n\nimport { APIError } from '../../../errors/index.js'\nimport { createLocalReq } from '../../../utilities/createLocalReq.js'\nimport { findByIDOperation } from '../findByID.js'\n\nexport type Options<\n  TSlug extends CollectionSlug,\n  TDisableErrors extends boolean,\n  TSelect extends SelectType,\n> = {\n  collection: TSlug\n  /**\n   * context, which will then be passed to req.context, which can be read by hooks\n   */\n  context?: RequestContext\n  currentDepth?: number\n  depth?: number\n  disableErrors?: TDisableErrors\n  draft?: boolean\n  fallbackLocale?: false | TypedLocale\n  id: number | string\n  includeLockStatus?: boolean\n  joins?: JoinQuery<TSlug>\n  locale?: 'all' | TypedLocale\n  overrideAccess?: boolean\n  populate?: PopulateType\n  req?: Partial<PayloadRequest>\n  select?: TSelect\n  showHiddenFields?: boolean\n  user?: Document\n}\n\nexport default async function findByIDLocal<\n  TSlug extends CollectionSlug,\n  TDisableErrors extends boolean,\n  TSelect extends SelectFromCollectionSlug<TSlug>,\n>(\n  payload: Payload,\n  options: Options<TSlug, TDisableErrors, TSelect>,\n): Promise<ApplyDisableErrors<TransformCollectionWithSelect<TSlug, TSelect>, TDisableErrors>> {\n  const {\n    id,\n    collection: collectionSlug,\n    currentDepth,\n    depth,\n    disableErrors = false,\n    draft = false,\n    includeLockStatus,\n    joins,\n    overrideAccess = true,\n    populate,\n    select,\n    showHiddenFields,\n  } = options\n\n  const collection = payload.collections[collectionSlug]\n\n  if (!collection) {\n    throw new APIError(\n      `The collection with slug ${String(collectionSlug)} can't be found. Find By ID Operation.`,\n    )\n  }\n\n  return findByIDOperation<TSlug, TDisableErrors, TSelect>({\n    id,\n    collection,\n    currentDepth,\n    depth,\n    disableErrors,\n    draft,\n    includeLockStatus,\n    joins,\n    overrideAccess,\n    populate,\n    req: await createLocalReq(options, payload),\n    select,\n    showHiddenFields,\n  })\n}\n"],"names":["APIError","createLocalReq","findByIDOperation","findByIDLocal","payload","options","id","collection","collectionSlug","currentDepth","depth","disableErrors","draft","includeLockStatus","joins","overrideAccess","populate","select","showHiddenFields","collections","String","req"],"mappings":"AAAA,wCAAwC;;;AAkBxC,SAASA,QAAQ,QAAQ,2BAA0B;AAEnD,SAASE,iBAAiB,QAAQ,iBAAgB;AADlD,SAASD,cAAc,QAAQ,uCAAsC;;;;AA8BtD,eAAeE,cAK5BC,OAAgB,EAChBC,OAAgD;IAEhD,MAAM,EACJC,EAAE,EACFC,YAAYC,cAAc,EAC1BC,YAAY,EACZC,KAAK,EACLC,gBAAgB,KAAK,EACrBC,QAAQ,KAAK,EACbC,iBAAiB,EACjBC,KAAK,EACLC,iBAAiB,IAAI,EACrBC,QAAQ,EACRC,MAAM,EACNC,gBAAgB,EACjB,GAAGb;IAEJ,MAAME,aAAaH,QAAQe,WAAW,CAACX,eAAe;IAEtD,IAAI,CAACD,YAAY;QACf,MAAM,+WAAIP,YAAAA,CACR,CAAC,yBAAyB,EAAEoB,OAAOZ,gBAAgB,sCAAsC,CAAC;IAE9F;IAEA,0YAAON,oBAAAA,EAAkD;QACvDI;QACAC;QACAE;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAK,KAAK,+XAAMpB,iBAAAA,EAAeI,SAASD;QACnCa;QACAC;IACF;AACF","ignoreList":[0]}},
    {"offset": {"line": 2288, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2294, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/collections/operations/findVersionByID.ts"],"sourcesContent":["import httpStatus from 'http-status'\n\nimport type { PayloadRequest, PopulateType, SelectType } from '../../types/index.js'\nimport type { TypeWithVersion } from '../../versions/types.js'\nimport type { Collection, TypeWithID } from '../config/types.js'\n\nimport executeAccess from '../../auth/executeAccess.js'\nimport { combineQueries } from '../../database/combineQueries.js'\nimport { APIError, Forbidden, NotFound } from '../../errors/index.js'\nimport { afterRead } from '../../fields/hooks/afterRead/index.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\n\nexport type Arguments = {\n  collection: Collection\n  currentDepth?: number\n  depth?: number\n  disableErrors?: boolean\n  id: number | string\n  overrideAccess?: boolean\n  populate?: PopulateType\n  req: PayloadRequest\n  select?: SelectType\n  showHiddenFields?: boolean\n}\n\nexport const findVersionByIDOperation = async <TData extends TypeWithID = any>(\n  args: Arguments,\n): Promise<TypeWithVersion<TData>> => {\n  const {\n    id,\n    collection: { config: collectionConfig },\n    currentDepth,\n    depth,\n    disableErrors,\n    overrideAccess,\n    populate,\n    req: { fallbackLocale, locale, payload },\n    req,\n    select,\n    showHiddenFields,\n  } = args\n\n  if (!id) {\n    throw new APIError('Missing ID of version.', httpStatus.BAD_REQUEST)\n  }\n\n  try {\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    const accessResults = !overrideAccess\n      ? await executeAccess({ id, disableErrors, req }, collectionConfig.access.readVersions)\n      : true\n\n    // If errors are disabled, and access returns false, return null\n    if (accessResults === false) {\n      return null\n    }\n\n    const hasWhereAccess = typeof accessResults === 'object'\n\n    const fullWhere = combineQueries({ id: { equals: id } }, accessResults)\n\n    // /////////////////////////////////////\n    // Find by ID\n    // /////////////////////////////////////\n\n    const versionsQuery = await payload.db.findVersions<TData>({\n      collection: collectionConfig.slug,\n      limit: 1,\n      locale,\n      pagination: false,\n      req,\n      select,\n      where: fullWhere,\n    })\n\n    const result = versionsQuery.docs[0]\n\n    if (!result) {\n      if (!disableErrors) {\n        if (!hasWhereAccess) {\n          throw new NotFound(req.t)\n        }\n        if (hasWhereAccess) {\n          throw new Forbidden(req.t)\n        }\n      }\n\n      return null\n    }\n\n    if (!result.version) {\n      // Fallback if not selected\n      ;(result as any).version = {}\n    }\n\n    // /////////////////////////////////////\n    // beforeRead - Collection\n    // /////////////////////////////////////\n\n    await collectionConfig.hooks.beforeRead.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      result.version =\n        (await hook({\n          collection: collectionConfig,\n          context: req.context,\n          doc: result.version,\n          query: fullWhere,\n          req,\n        })) || result.version\n    }, Promise.resolve())\n\n    // /////////////////////////////////////\n    // afterRead - Fields\n    // /////////////////////////////////////\n\n    result.version = await afterRead({\n      collection: collectionConfig,\n      context: req.context,\n      currentDepth,\n      depth,\n      doc: result.version,\n      draft: undefined,\n      fallbackLocale,\n      global: null,\n      locale,\n      overrideAccess,\n      populate,\n      req,\n      select: typeof select?.version === 'object' ? select.version : undefined,\n      showHiddenFields,\n    })\n\n    // /////////////////////////////////////\n    // afterRead - Collection\n    // /////////////////////////////////////\n\n    await collectionConfig.hooks.afterRead.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      result.version =\n        (await hook({\n          collection: collectionConfig,\n          context: req.context,\n          doc: result.version,\n          query: fullWhere,\n          req,\n        })) || result.version\n    }, Promise.resolve())\n\n    // /////////////////////////////////////\n    // Return results\n    // /////////////////////////////////////\n\n    return result\n  } catch (error: unknown) {\n    await killTransaction(req)\n    throw error\n  }\n}\n"],"names":["httpStatus","executeAccess","combineQueries","APIError","Forbidden","NotFound","afterRead","killTransaction","findVersionByIDOperation","args","id","collection","config","collectionConfig","currentDepth","depth","disableErrors","overrideAccess","populate","req","fallbackLocale","locale","payload","select","showHiddenFields","BAD_REQUEST","accessResults","access","readVersions","hasWhereAccess","fullWhere","equals","versionsQuery","db","findVersions","slug","limit","pagination","where","result","docs","t","version","hooks","beforeRead","reduce","priorHook","hook","context","doc","query","Promise","resolve","draft","undefined","global","error"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2418, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2424, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/collections/operations/local/findVersionByID.ts"],"sourcesContent":["import type { CollectionSlug, Payload, RequestContext, TypedLocale } from '../../../index.js'\nimport type { Document, PayloadRequest, PopulateType, SelectType } from '../../../types/index.js'\nimport type { TypeWithVersion } from '../../../versions/types.js'\nimport type { DataFromCollectionSlug } from '../../config/types.js'\n\nimport { APIError } from '../../../errors/index.js'\nimport { createLocalReq } from '../../../utilities/createLocalReq.js'\nimport { findVersionByIDOperation } from '../findVersionByID.js'\n\nexport type Options<TSlug extends CollectionSlug> = {\n  collection: TSlug\n  /**\n   * context, which will then be passed to req.context, which can be read by hooks\n   */\n  context?: RequestContext\n  depth?: number\n  disableErrors?: boolean\n  draft?: boolean\n  fallbackLocale?: false | TypedLocale\n  id: string\n  locale?: 'all' | TypedLocale\n  overrideAccess?: boolean\n  populate?: PopulateType\n  req?: Partial<PayloadRequest>\n  select?: SelectType\n  showHiddenFields?: boolean\n  user?: Document\n}\n\nexport default async function findVersionByIDLocal<TSlug extends CollectionSlug>(\n  payload: Payload,\n  options: Options<TSlug>,\n): Promise<TypeWithVersion<DataFromCollectionSlug<TSlug>>> {\n  const {\n    id,\n    collection: collectionSlug,\n    depth,\n    disableErrors = false,\n    overrideAccess = true,\n    populate,\n    select,\n    showHiddenFields,\n  } = options\n\n  const collection = payload.collections[collectionSlug]\n\n  if (!collection) {\n    throw new APIError(\n      `The collection with slug ${String(\n        collectionSlug,\n      )} can't be found. Find Version By ID Operation.`,\n    )\n  }\n\n  return findVersionByIDOperation({\n    id,\n    collection,\n    depth,\n    disableErrors,\n    overrideAccess,\n    populate,\n    req: await createLocalReq(options, payload),\n    select,\n    showHiddenFields,\n  })\n}\n"],"names":["APIError","createLocalReq","findVersionByIDOperation","findVersionByIDLocal","payload","options","id","collection","collectionSlug","depth","disableErrors","overrideAccess","populate","select","showHiddenFields","collections","String","req"],"mappings":";;;AAKA,SAASA,QAAQ,QAAQ,2BAA0B;AAEnD,SAASE,wBAAwB,QAAQ,wBAAuB;AADhE,SAASD,cAAc,QAAQ,uCAAsC;;;;AAuBtD,eAAeE,qBAC5BC,OAAgB,EAChBC,OAAuB;IAEvB,MAAM,EACJC,EAAE,EACFC,YAAYC,cAAc,EAC1BC,KAAK,EACLC,gBAAgB,KAAK,EACrBC,iBAAiB,IAAI,EACrBC,QAAQ,EACRC,MAAM,EACNC,gBAAgB,EACjB,GAAGT;IAEJ,MAAME,aAAaH,QAAQW,WAAW,CAACP,eAAe;IAEtD,IAAI,CAACD,YAAY;QACf,MAAM,gXAAIP,WAAAA,CACR,CAAC,yBAAyB,EAAEgB,OAC1BR,gBACA,8CAA8C,CAAC;IAErD;IAEA,iZAAON,2BAAAA,EAAyB;QAC9BI;QACAC;QACAE;QACAC;QACAC;QACAC;QACAK,KAAK,+XAAMhB,iBAAAA,EAAeI,SAASD;QACnCS;QACAC;IACF;AACF","ignoreList":[0]}},
    {"offset": {"line": 2451, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2457, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/collections/operations/findVersions.ts"],"sourcesContent":["import type { PaginatedDocs } from '../../database/types.js'\nimport type { PayloadRequest, PopulateType, SelectType, Sort, Where } from '../../types/index.js'\nimport type { TypeWithVersion } from '../../versions/types.js'\nimport type { Collection } from '../config/types.js'\n\nimport executeAccess from '../../auth/executeAccess.js'\nimport { combineQueries } from '../../database/combineQueries.js'\nimport { validateQueryPaths } from '../../database/queryValidation/validateQueryPaths.js'\nimport { afterRead } from '../../fields/hooks/afterRead/index.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport sanitizeInternalFields from '../../utilities/sanitizeInternalFields.js'\nimport { buildVersionCollectionFields } from '../../versions/buildCollectionFields.js'\n\nexport type Arguments = {\n  collection: Collection\n  depth?: number\n  limit?: number\n  overrideAccess?: boolean\n  page?: number\n  pagination?: boolean\n  populate?: PopulateType\n  req?: PayloadRequest\n  select?: SelectType\n  showHiddenFields?: boolean\n  sort?: Sort\n  where?: Where\n}\n\nexport const findVersionsOperation = async <TData extends TypeWithVersion<TData>>(\n  args: Arguments,\n): Promise<PaginatedDocs<TData>> => {\n  const {\n    collection: { config: collectionConfig },\n    depth,\n    limit,\n    overrideAccess,\n    page,\n    pagination = true,\n    populate,\n    req: { fallbackLocale, locale, payload },\n    req,\n    select,\n    showHiddenFields,\n    sort,\n    where,\n  } = args\n\n  try {\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    let accessResults\n\n    if (!overrideAccess) {\n      accessResults = await executeAccess({ req }, collectionConfig.access.readVersions)\n    }\n\n    const versionFields = buildVersionCollectionFields(payload.config, collectionConfig, true)\n\n    await validateQueryPaths({\n      collectionConfig,\n      overrideAccess,\n      req,\n      versionFields,\n      where,\n    })\n\n    const fullWhere = combineQueries(where, accessResults)\n\n    // /////////////////////////////////////\n    // Find\n    // /////////////////////////////////////\n\n    const paginatedDocs = await payload.db.findVersions<TData>({\n      collection: collectionConfig.slug,\n      limit: limit ?? 10,\n      locale,\n      page: page || 1,\n      pagination,\n      req,\n      select,\n      sort,\n      where: fullWhere,\n    })\n\n    // /////////////////////////////////////\n    // beforeRead - Collection\n    // /////////////////////////////////////\n\n    let result = {\n      ...paginatedDocs,\n      docs: await Promise.all(\n        paginatedDocs.docs.map(async (doc) => {\n          const docRef = doc\n          // Fallback if not selected\n          if (!docRef.version) {\n            ;(docRef as any).version = {}\n          }\n          await collectionConfig.hooks.beforeRead.reduce(async (priorHook, hook) => {\n            await priorHook\n\n            docRef.version =\n              (await hook({\n                collection: collectionConfig,\n                context: req.context,\n                doc: docRef.version,\n                query: fullWhere,\n                req,\n              })) || docRef.version\n          }, Promise.resolve())\n\n          return docRef\n        }),\n      ),\n    } as PaginatedDocs<TData>\n\n    // /////////////////////////////////////\n    // afterRead - Fields\n    // /////////////////////////////////////\n\n    result = {\n      ...result,\n      docs: await Promise.all(\n        result.docs.map(async (data) => ({\n          ...data,\n          version: await afterRead({\n            collection: collectionConfig,\n            context: req.context,\n            depth,\n            doc: data.version,\n            draft: undefined,\n            fallbackLocale,\n            findMany: true,\n            global: null,\n            locale,\n            overrideAccess,\n            populate,\n            req,\n            select: typeof select?.version === 'object' ? select.version : undefined,\n            showHiddenFields,\n          }),\n        })),\n      ),\n    }\n\n    // /////////////////////////////////////\n    // afterRead - Collection\n    // /////////////////////////////////////\n\n    result = {\n      ...result,\n      docs: await Promise.all(\n        result.docs.map(async (doc) => {\n          const docRef = doc\n\n          await collectionConfig.hooks.afterRead.reduce(async (priorHook, hook) => {\n            await priorHook\n\n            docRef.version =\n              (await hook({\n                collection: collectionConfig,\n                context: req.context,\n                doc: doc.version,\n                findMany: true,\n                query: fullWhere,\n                req,\n              })) || doc.version\n          }, Promise.resolve())\n\n          return docRef\n        }),\n      ),\n    }\n\n    // /////////////////////////////////////\n    // Return results\n    // /////////////////////////////////////\n\n    result = {\n      ...result,\n      docs: result.docs.map((doc) => sanitizeInternalFields<TData>(doc)),\n    }\n\n    return result\n  } catch (error: unknown) {\n    await killTransaction(req)\n    throw error\n  }\n}\n"],"names":["executeAccess","combineQueries","validateQueryPaths","afterRead","killTransaction","sanitizeInternalFields","buildVersionCollectionFields","findVersionsOperation","args","collection","config","collectionConfig","depth","limit","overrideAccess","page","pagination","populate","req","fallbackLocale","locale","payload","select","showHiddenFields","sort","where","accessResults","access","readVersions","versionFields","fullWhere","paginatedDocs","db","findVersions","slug","result","docs","Promise","all","map","doc","docRef","version","hooks","beforeRead","reduce","priorHook","hook","context","query","resolve","data","draft","undefined","findMany","global","error"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2593, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2599, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/collections/operations/local/findVersions.ts"],"sourcesContent":["import type { PaginatedDocs } from '../../../database/types.js'\nimport type { CollectionSlug, Payload, RequestContext, TypedLocale } from '../../../index.js'\nimport type {\n  Document,\n  PayloadRequest,\n  PopulateType,\n  SelectType,\n  Sort,\n  Where,\n} from '../../../types/index.js'\nimport type { TypeWithVersion } from '../../../versions/types.js'\nimport type { DataFromCollectionSlug } from '../../config/types.js'\n\nimport { APIError } from '../../../errors/index.js'\nimport { createLocalReq } from '../../../utilities/createLocalReq.js'\nimport { findVersionsOperation } from '../findVersions.js'\n\nexport type Options<TSlug extends CollectionSlug> = {\n  collection: TSlug\n  /**\n   * context, which will then be passed to req.context, which can be read by hooks\n   */\n  context?: RequestContext\n  depth?: number\n  draft?: boolean\n  fallbackLocale?: false | TypedLocale\n  limit?: number\n  locale?: 'all' | TypedLocale\n  overrideAccess?: boolean\n  page?: number\n  populate?: PopulateType\n  req?: Partial<PayloadRequest>\n  select?: SelectType\n  showHiddenFields?: boolean\n  sort?: Sort\n  user?: Document\n  where?: Where\n}\n\nexport default async function findVersionsLocal<TSlug extends CollectionSlug>(\n  payload: Payload,\n  options: Options<TSlug>,\n): Promise<PaginatedDocs<TypeWithVersion<DataFromCollectionSlug<TSlug>>>> {\n  const {\n    collection: collectionSlug,\n    depth,\n    limit,\n    overrideAccess = true,\n    page,\n    populate,\n    select,\n    showHiddenFields,\n    sort,\n    where,\n  } = options\n\n  const collection = payload.collections[collectionSlug]\n\n  if (!collection) {\n    throw new APIError(\n      `The collection with slug ${String(collectionSlug)} can't be found. Find Versions Operation.`,\n    )\n  }\n\n  return findVersionsOperation({\n    collection,\n    depth,\n    limit,\n    overrideAccess,\n    page,\n    populate,\n    req: await createLocalReq(options, payload),\n    select,\n    showHiddenFields,\n    sort,\n    where,\n  })\n}\n"],"names":["APIError","createLocalReq","findVersionsOperation","findVersionsLocal","payload","options","collection","collectionSlug","depth","limit","overrideAccess","page","populate","select","showHiddenFields","sort","where","collections","String","req"],"mappings":";;;AAaA,SAASA,QAAQ,QAAQ,2BAA0B;AAEnD,SAASE,qBAAqB,QAAQ,qBAAoB;AAD1D,SAASD,cAAc,QAAQ,uCAAsC;;;;AAyBtD,eAAeE,kBAC5BC,OAAgB,EAChBC,OAAuB;IAEvB,MAAM,EACJC,YAAYC,cAAc,EAC1BC,KAAK,EACLC,KAAK,EACLC,iBAAiB,IAAI,EACrBC,IAAI,EACJC,QAAQ,EACRC,MAAM,EACNC,gBAAgB,EAChBC,IAAI,EACJC,KAAK,EACN,GAAGX;IAEJ,MAAMC,aAAaF,QAAQa,WAAW,CAACV,eAAe;IAEtD,IAAI,CAACD,YAAY;QACf,MAAM,+WAAIN,YAAAA,CACR,CAAC,yBAAyB,EAAEkB,OAAOX,gBAAgB,yCAAyC,CAAC;IAEjG;IAEA,8YAAOL,wBAAAA,EAAsB;QAC3BI;QACAE;QACAC;QACAC;QACAC;QACAC;QACAO,KAAK,+XAAMlB,iBAAAA,EAAeI,SAASD;QACnCS;QACAC;QACAC;QACAC;IACF;AACF","ignoreList":[0]}},
    {"offset": {"line": 2628, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2634, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/collections/operations/restoreVersion.ts"],"sourcesContent":["import httpStatus from 'http-status'\n\nimport type { FindOneArgs } from '../../database/types.js'\nimport type { PayloadRequest, PopulateType, SelectType } from '../../types/index.js'\nimport type { Collection, TypeWithID } from '../config/types.js'\n\nimport executeAccess from '../../auth/executeAccess.js'\nimport { hasWhereAccessResult } from '../../auth/types.js'\nimport { combineQueries } from '../../database/combineQueries.js'\nimport { APIError, Forbidden, NotFound } from '../../errors/index.js'\nimport { afterChange } from '../../fields/hooks/afterChange/index.js'\nimport { afterRead } from '../../fields/hooks/afterRead/index.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport { getLatestCollectionVersion } from '../../versions/getLatestCollectionVersion.js'\n\nexport type Arguments = {\n  collection: Collection\n  currentDepth?: number\n  depth?: number\n  disableErrors?: boolean\n  draft?: boolean\n  id: number | string\n  overrideAccess?: boolean\n  populate?: PopulateType\n  req: PayloadRequest\n  select?: SelectType\n  showHiddenFields?: boolean\n}\n\nexport const restoreVersionOperation = async <TData extends TypeWithID = any>(\n  args: Arguments,\n): Promise<TData> => {\n  const {\n    id,\n    collection: { config: collectionConfig },\n    depth,\n    draft,\n    overrideAccess = false,\n    populate,\n    req,\n    req: { fallbackLocale, locale, payload },\n    select,\n    showHiddenFields,\n  } = args\n\n  try {\n    if (!id) {\n      throw new APIError('Missing ID of version to restore.', httpStatus.BAD_REQUEST)\n    }\n\n    // /////////////////////////////////////\n    // Retrieve original raw version\n    // /////////////////////////////////////\n\n    const { docs: versionDocs } = await req.payload.db.findVersions({\n      collection: collectionConfig.slug,\n      limit: 1,\n      locale,\n      pagination: false,\n      req,\n      where: { id: { equals: id } },\n    })\n\n    const [rawVersion] = versionDocs\n\n    if (!rawVersion) {\n      throw new NotFound(req.t)\n    }\n\n    const parentDocID = rawVersion.parent\n\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    const accessResults = !overrideAccess\n      ? await executeAccess({ id: parentDocID, req }, collectionConfig.access.update)\n      : true\n    const hasWherePolicy = hasWhereAccessResult(accessResults)\n\n    // /////////////////////////////////////\n    // Retrieve document\n    // /////////////////////////////////////\n\n    const findOneArgs: FindOneArgs = {\n      collection: collectionConfig.slug,\n      locale,\n      req,\n      where: combineQueries({ id: { equals: parentDocID } }, accessResults),\n    }\n\n    const doc = await req.payload.db.findOne(findOneArgs)\n\n    if (!doc && !hasWherePolicy) {\n      throw new NotFound(req.t)\n    }\n    if (!doc && hasWherePolicy) {\n      throw new Forbidden(req.t)\n    }\n\n    // /////////////////////////////////////\n    // fetch previousDoc\n    // /////////////////////////////////////\n\n    const prevDocWithLocales = await getLatestCollectionVersion({\n      id: parentDocID,\n      config: collectionConfig,\n      payload,\n      query: findOneArgs,\n      req,\n    })\n\n    // /////////////////////////////////////\n    // Update\n    // /////////////////////////////////////\n\n    let result = await req.payload.db.updateOne({\n      id: parentDocID,\n      collection: collectionConfig.slug,\n      data: rawVersion.version,\n      req,\n      select,\n    })\n\n    // /////////////////////////////////////\n    // Save `previousDoc` as a version after restoring\n    // /////////////////////////////////////\n\n    const prevVersion = { ...prevDocWithLocales }\n\n    delete prevVersion.id\n\n    await payload.db.createVersion({\n      autosave: false,\n      collectionSlug: collectionConfig.slug,\n      createdAt: prevVersion.createdAt,\n      parent: parentDocID,\n      req,\n      updatedAt: new Date().toISOString(),\n      versionData: draft ? { ...rawVersion.version, _status: 'draft' } : rawVersion.version,\n    })\n\n    // /////////////////////////////////////\n    // afterRead - Fields\n    // /////////////////////////////////////\n\n    result = await afterRead({\n      collection: collectionConfig,\n      context: req.context,\n      depth,\n      doc: result,\n      draft: undefined,\n      fallbackLocale,\n      global: null,\n      locale,\n      overrideAccess,\n      populate,\n      req,\n      select,\n      showHiddenFields,\n    })\n\n    // /////////////////////////////////////\n    // afterRead - Collection\n    // /////////////////////////////////////\n\n    await collectionConfig.hooks.afterRead.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      result =\n        (await hook({\n          collection: collectionConfig,\n          context: req.context,\n          doc: result,\n          req,\n        })) || result\n    }, Promise.resolve())\n\n    // /////////////////////////////////////\n    // afterChange - Fields\n    // /////////////////////////////////////\n\n    result = await afterChange({\n      collection: collectionConfig,\n      context: req.context,\n      data: result,\n      doc: result,\n      global: null,\n      operation: 'update',\n      previousDoc: prevDocWithLocales,\n      req,\n    })\n\n    // /////////////////////////////////////\n    // afterChange - Collection\n    // /////////////////////////////////////\n\n    await collectionConfig.hooks.afterChange.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      result =\n        (await hook({\n          collection: collectionConfig,\n          context: req.context,\n          doc: result,\n          operation: 'update',\n          previousDoc: prevDocWithLocales,\n          req,\n        })) || result\n    }, Promise.resolve())\n\n    return result\n  } catch (error: unknown) {\n    await killTransaction(req)\n    throw error\n  }\n}\n"],"names":["httpStatus","executeAccess","hasWhereAccessResult","combineQueries","APIError","Forbidden","NotFound","afterChange","afterRead","killTransaction","getLatestCollectionVersion","restoreVersionOperation","args","id","collection","config","collectionConfig","depth","draft","overrideAccess","populate","req","fallbackLocale","locale","payload","select","showHiddenFields","BAD_REQUEST","docs","versionDocs","db","findVersions","slug","limit","pagination","where","equals","rawVersion","t","parentDocID","parent","accessResults","access","update","hasWherePolicy","findOneArgs","doc","findOne","prevDocWithLocales","query","result","updateOne","data","version","prevVersion","createVersion","autosave","collectionSlug","createdAt","updatedAt","Date","toISOString","versionData","_status","context","undefined","global","hooks","reduce","priorHook","hook","Promise","resolve","operation","previousDoc","error"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2813, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2819, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/collections/operations/local/restoreVersion.ts"],"sourcesContent":["import type { CollectionSlug, Payload, RequestContext, TypedLocale } from '../../../index.js'\nimport type { Document, PayloadRequest, PopulateType, SelectType } from '../../../types/index.js'\nimport type { DataFromCollectionSlug } from '../../config/types.js'\n\nimport { APIError } from '../../../errors/index.js'\nimport { createLocalReq } from '../../../utilities/createLocalReq.js'\nimport { restoreVersionOperation } from '../restoreVersion.js'\n\nexport type Options<TSlug extends CollectionSlug> = {\n  collection: TSlug\n  /**\n   * context, which will then be passed to req.context, which can be read by hooks\n   */\n  context?: RequestContext\n  depth?: number\n  draft?: boolean\n  fallbackLocale?: false | TypedLocale\n  id: string\n  locale?: TypedLocale\n  overrideAccess?: boolean\n  populate?: PopulateType\n  req?: Partial<PayloadRequest>\n  select?: SelectType\n  showHiddenFields?: boolean\n  user?: Document\n}\n\nexport default async function restoreVersionLocal<TSlug extends CollectionSlug>(\n  payload: Payload,\n  options: Options<TSlug>,\n): Promise<DataFromCollectionSlug<TSlug>> {\n  const {\n    id,\n    collection: collectionSlug,\n    depth,\n    overrideAccess = true,\n    populate,\n    select,\n    showHiddenFields,\n  } = options\n\n  const collection = payload.collections[collectionSlug]\n\n  if (!collection) {\n    throw new APIError(\n      `The collection with slug ${String(\n        collectionSlug,\n      )} can't be found. Restore Version Operation.`,\n    )\n  }\n\n  const args = {\n    id,\n    collection,\n    depth,\n    overrideAccess,\n    payload,\n    populate,\n    req: await createLocalReq(options, payload),\n    select,\n    showHiddenFields,\n  }\n\n  return restoreVersionOperation(args)\n}\n"],"names":["APIError","createLocalReq","restoreVersionOperation","restoreVersionLocal","payload","options","id","collection","collectionSlug","depth","overrideAccess","populate","select","showHiddenFields","collections","String","args","req"],"mappings":";;;AAIA,SAASA,QAAQ,QAAQ,2BAA0B;AACnD,SAASC,cAAc,QAAQ,uCAAsC;AACrE,SAASC,uBAAuB,QAAQ,uBAAsB;;;;AAqB/C,eAAeC,oBAC5BC,OAAgB,EAChBC,OAAuB;IAEvB,MAAM,EACJC,EAAE,EACFC,YAAYC,cAAc,EAC1BC,KAAK,EACLC,iBAAiB,IAAI,EACrBC,QAAQ,EACRC,MAAM,EACNC,gBAAgB,EACjB,GAAGR;IAEJ,MAAME,aAAaH,QAAQU,WAAW,CAACN,eAAe;IAEtD,IAAI,CAACD,YAAY;QACf,MAAM,gXAAIP,WAAAA,CACR,CAAC,yBAAyB,EAAEe,OAC1BP,gBACA,2CAA2C,CAAC;IAElD;IAEA,MAAMQ,OAAO;QACXV;QACAC;QACAE;QACAC;QACAN;QACAO;QACAM,KAAK,+XAAMhB,iBAAAA,EAAeI,SAASD;QACnCQ;QACAC;IACF;IAEA,gZAAOX,0BAAAA,EAAwBc;AACjC","ignoreList":[0]}},
    {"offset": {"line": 2847, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2853, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/collections/operations/update.ts"],"sourcesContent":["import type { DeepPartial } from 'ts-essentials'\n\nimport httpStatus from 'http-status'\n\nimport type { AccessResult } from '../../config/types.js'\nimport type { CollectionSlug } from '../../index.js'\nimport type { PayloadRequest, PopulateType, SelectType, Where } from '../../types/index.js'\nimport type {\n  BulkOperationResult,\n  Collection,\n  DataFromCollectionSlug,\n  RequiredDataFromCollectionSlug,\n  SelectFromCollectionSlug,\n} from '../config/types.js'\n\nimport { ensureUsernameOrEmail } from '../../auth/ensureUsernameOrEmail.js'\nimport executeAccess from '../../auth/executeAccess.js'\nimport { combineQueries } from '../../database/combineQueries.js'\nimport { validateQueryPaths } from '../../database/queryValidation/validateQueryPaths.js'\nimport { APIError } from '../../errors/index.js'\nimport { afterChange } from '../../fields/hooks/afterChange/index.js'\nimport { afterRead } from '../../fields/hooks/afterRead/index.js'\nimport { beforeChange } from '../../fields/hooks/beforeChange/index.js'\nimport { beforeValidate } from '../../fields/hooks/beforeValidate/index.js'\nimport { deleteAssociatedFiles } from '../../uploads/deleteAssociatedFiles.js'\nimport { generateFileData } from '../../uploads/generateFileData.js'\nimport { unlinkTempFiles } from '../../uploads/unlinkTempFiles.js'\nimport { uploadFiles } from '../../uploads/uploadFiles.js'\nimport { checkDocumentLockStatus } from '../../utilities/checkDocumentLockStatus.js'\nimport { commitTransaction } from '../../utilities/commitTransaction.js'\nimport { initTransaction } from '../../utilities/initTransaction.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport { buildVersionCollectionFields } from '../../versions/buildCollectionFields.js'\nimport { appendVersionToQueryKey } from '../../versions/drafts/appendVersionToQueryKey.js'\nimport { saveVersion } from '../../versions/saveVersion.js'\nimport { buildAfterOperation } from './utils.js'\n\nexport type Arguments<TSlug extends CollectionSlug> = {\n  collection: Collection\n  data: DeepPartial<RequiredDataFromCollectionSlug<TSlug>>\n  depth?: number\n  disableTransaction?: boolean\n  disableVerificationEmail?: boolean\n  draft?: boolean\n  limit?: number\n  overrideAccess?: boolean\n  overrideLock?: boolean\n  overwriteExistingFiles?: boolean\n  populate?: PopulateType\n  req: PayloadRequest\n  select?: SelectType\n  showHiddenFields?: boolean\n  where: Where\n}\n\nexport const updateOperation = async <\n  TSlug extends CollectionSlug,\n  TSelect extends SelectFromCollectionSlug<TSlug>,\n>(\n  incomingArgs: Arguments<TSlug>,\n): Promise<BulkOperationResult<TSlug, TSelect>> => {\n  let args = incomingArgs\n\n  try {\n    const shouldCommit = !args.disableTransaction && (await initTransaction(args.req))\n\n    // /////////////////////////////////////\n    // beforeOperation - Collection\n    // /////////////////////////////////////\n\n    await args.collection.config.hooks.beforeOperation.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      args =\n        (await hook({\n          args,\n          collection: args.collection.config,\n          context: args.req.context,\n          operation: 'update',\n          req: args.req,\n        })) || args\n    }, Promise.resolve())\n\n    const {\n      collection: { config: collectionConfig },\n      collection,\n      depth,\n      draft: draftArg = false,\n      limit = 0,\n      overrideAccess,\n      overrideLock,\n      overwriteExistingFiles = false,\n      populate,\n      req: {\n        fallbackLocale,\n        locale,\n        payload: { config },\n        payload,\n      },\n      req,\n      select,\n      showHiddenFields,\n      where,\n    } = args\n\n    if (!where) {\n      throw new APIError(\"Missing 'where' query of documents to update.\", httpStatus.BAD_REQUEST)\n    }\n\n    const { data: bulkUpdateData } = args\n    const shouldSaveDraft = Boolean(draftArg && collectionConfig.versions.drafts)\n\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    let accessResult: AccessResult\n    if (!overrideAccess) {\n      accessResult = await executeAccess({ req }, collectionConfig.access.update)\n    }\n\n    await validateQueryPaths({\n      collectionConfig,\n      overrideAccess,\n      req,\n      where,\n    })\n\n    // /////////////////////////////////////\n    // Retrieve documents\n    // /////////////////////////////////////\n\n    const fullWhere = combineQueries(where, accessResult)\n\n    let docs\n\n    if (collectionConfig.versions?.drafts && shouldSaveDraft) {\n      const versionsWhere = appendVersionToQueryKey(fullWhere)\n\n      await validateQueryPaths({\n        collectionConfig: collection.config,\n        overrideAccess,\n        req,\n        versionFields: buildVersionCollectionFields(payload.config, collection.config, true),\n        where: appendVersionToQueryKey(where),\n      })\n\n      const query = await payload.db.queryDrafts<DataFromCollectionSlug<TSlug>>({\n        collection: collectionConfig.slug,\n        limit,\n        locale,\n        pagination: false,\n        req,\n        where: versionsWhere,\n      })\n\n      docs = query.docs\n    } else {\n      const query = await payload.db.find({\n        collection: collectionConfig.slug,\n        limit,\n        locale,\n        pagination: false,\n        req,\n        where: fullWhere,\n      })\n\n      docs = query.docs\n    }\n\n    // /////////////////////////////////////\n    // Generate data for all files and sizes\n    // /////////////////////////////////////\n\n    const { data: newFileData, files: filesToUpload } = await generateFileData({\n      collection,\n      config,\n      data: bulkUpdateData,\n      operation: 'update',\n      overwriteExistingFiles,\n      req,\n      throwOnMissingFile: false,\n    })\n\n    const errors = []\n\n    const promises = docs.map(async (doc) => {\n      const { id } = doc\n      let data = {\n        ...newFileData,\n        ...bulkUpdateData,\n      }\n\n      try {\n        // /////////////////////////////////////\n        // Handle potentially locked documents\n        // /////////////////////////////////////\n\n        await checkDocumentLockStatus({\n          id,\n          collectionSlug: collectionConfig.slug,\n          lockErrorMessage: `Document with ID ${id} is currently locked by another user and cannot be updated.`,\n          overrideLock,\n          req,\n        })\n\n        const originalDoc = await afterRead({\n          collection: collectionConfig,\n          context: req.context,\n          depth: 0,\n          doc,\n          draft: draftArg,\n          fallbackLocale,\n          global: null,\n          locale,\n          overrideAccess: true,\n          req,\n          showHiddenFields: true,\n        })\n\n        await deleteAssociatedFiles({\n          collectionConfig,\n          config,\n          doc,\n          files: filesToUpload,\n          overrideDelete: false,\n          req,\n        })\n\n        if (args.collection.config.auth) {\n          ensureUsernameOrEmail<TSlug>({\n            authOptions: args.collection.config.auth,\n            collectionSlug: args.collection.config.slug,\n            data: args.data,\n            operation: 'update',\n            originalDoc,\n            req: args.req,\n          })\n        }\n\n        // /////////////////////////////////////\n        // beforeValidate - Fields\n        // /////////////////////////////////////\n\n        data = await beforeValidate<DeepPartial<DataFromCollectionSlug<TSlug>>>({\n          id,\n          collection: collectionConfig,\n          context: req.context,\n          data,\n          doc: originalDoc,\n          global: null,\n          operation: 'update',\n          overrideAccess,\n          req,\n        })\n\n        // /////////////////////////////////////\n        // beforeValidate - Collection\n        // /////////////////////////////////////\n\n        await collectionConfig.hooks.beforeValidate.reduce(async (priorHook, hook) => {\n          await priorHook\n\n          data =\n            (await hook({\n              collection: collectionConfig,\n              context: req.context,\n              data,\n              operation: 'update',\n              originalDoc,\n              req,\n            })) || data\n        }, Promise.resolve())\n\n        // /////////////////////////////////////\n        // Write files to local storage\n        // /////////////////////////////////////\n\n        if (!collectionConfig.upload.disableLocalStorage) {\n          await uploadFiles(payload, filesToUpload, req)\n        }\n\n        // /////////////////////////////////////\n        // beforeChange - Collection\n        // /////////////////////////////////////\n\n        await collectionConfig.hooks.beforeChange.reduce(async (priorHook, hook) => {\n          await priorHook\n\n          data =\n            (await hook({\n              collection: collectionConfig,\n              context: req.context,\n              data,\n              operation: 'update',\n              originalDoc,\n              req,\n            })) || data\n        }, Promise.resolve())\n\n        // /////////////////////////////////////\n        // beforeChange - Fields\n        // /////////////////////////////////////\n\n        let result = await beforeChange({\n          id,\n          collection: collectionConfig,\n          context: req.context,\n          data,\n          doc: originalDoc,\n          docWithLocales: doc,\n          global: null,\n          operation: 'update',\n          req,\n          skipValidation:\n            shouldSaveDraft &&\n            collectionConfig.versions.drafts &&\n            !collectionConfig.versions.drafts.validate &&\n            data._status !== 'published',\n        })\n\n        // /////////////////////////////////////\n        // Update\n        // /////////////////////////////////////\n\n        if (!shouldSaveDraft || data._status === 'published') {\n          result = await req.payload.db.updateOne({\n            id,\n            collection: collectionConfig.slug,\n            data: result,\n            locale,\n            req,\n            select,\n          })\n        }\n\n        // /////////////////////////////////////\n        // Create version\n        // /////////////////////////////////////\n\n        if (collectionConfig.versions) {\n          result = await saveVersion({\n            id,\n            collection: collectionConfig,\n            docWithLocales: result,\n            payload,\n            req,\n            select,\n          })\n        }\n\n        // /////////////////////////////////////\n        // afterRead - Fields\n        // /////////////////////////////////////\n\n        result = await afterRead({\n          collection: collectionConfig,\n          context: req.context,\n          depth,\n          doc: result,\n          draft: draftArg,\n          fallbackLocale: null,\n          global: null,\n          locale,\n          overrideAccess,\n          populate,\n          req,\n          select,\n          showHiddenFields,\n        })\n\n        // /////////////////////////////////////\n        // afterRead - Collection\n        // /////////////////////////////////////\n\n        await collectionConfig.hooks.afterRead.reduce(async (priorHook, hook) => {\n          await priorHook\n\n          result =\n            (await hook({\n              collection: collectionConfig,\n              context: req.context,\n              doc: result,\n              req,\n            })) || result\n        }, Promise.resolve())\n\n        // /////////////////////////////////////\n        // afterChange - Fields\n        // /////////////////////////////////////\n\n        result = await afterChange({\n          collection: collectionConfig,\n          context: req.context,\n          data,\n          doc: result,\n          global: null,\n          operation: 'update',\n          previousDoc: originalDoc,\n          req,\n        })\n\n        // /////////////////////////////////////\n        // afterChange - Collection\n        // /////////////////////////////////////\n\n        await collectionConfig.hooks.afterChange.reduce(async (priorHook, hook) => {\n          await priorHook\n\n          result =\n            (await hook({\n              collection: collectionConfig,\n              context: req.context,\n              doc: result,\n              operation: 'update',\n              previousDoc: originalDoc,\n              req,\n            })) || result\n        }, Promise.resolve())\n\n        await unlinkTempFiles({\n          collectionConfig,\n          config,\n          req,\n        })\n\n        // /////////////////////////////////////\n        // Return results\n        // /////////////////////////////////////\n\n        return result\n      } catch (error) {\n        errors.push({\n          id,\n          message: error.message,\n        })\n      }\n      return null\n    })\n\n    const awaitedDocs = await Promise.all(promises)\n\n    let result = {\n      docs: awaitedDocs.filter(Boolean),\n      errors,\n    }\n\n    // /////////////////////////////////////\n    // afterOperation - Collection\n    // /////////////////////////////////////\n\n    result = await buildAfterOperation({\n      args,\n      collection: collectionConfig,\n      operation: 'update',\n      result,\n    })\n\n    if (shouldCommit) {\n      await commitTransaction(req)\n    }\n\n    return result\n  } catch (error: unknown) {\n    await killTransaction(args.req)\n    throw error\n  }\n}\n"],"names":["httpStatus","ensureUsernameOrEmail","executeAccess","combineQueries","validateQueryPaths","APIError","afterChange","afterRead","beforeChange","beforeValidate","deleteAssociatedFiles","generateFileData","unlinkTempFiles","uploadFiles","checkDocumentLockStatus","commitTransaction","initTransaction","killTransaction","buildVersionCollectionFields","appendVersionToQueryKey","saveVersion","buildAfterOperation","updateOperation","incomingArgs","args","shouldCommit","disableTransaction","req","collection","config","hooks","beforeOperation","reduce","priorHook","hook","context","operation","Promise","resolve","collectionConfig","depth","draft","draftArg","limit","overrideAccess","overrideLock","overwriteExistingFiles","populate","fallbackLocale","locale","payload","select","showHiddenFields","where","BAD_REQUEST","data","bulkUpdateData","shouldSaveDraft","Boolean","versions","drafts","accessResult","access","update","fullWhere","docs","versionsWhere","versionFields","query","db","queryDrafts","slug","pagination","find","newFileData","files","filesToUpload","throwOnMissingFile","errors","promises","map","doc","id","collectionSlug","lockErrorMessage","originalDoc","global","overrideDelete","auth","authOptions","upload","disableLocalStorage","result","docWithLocales","skipValidation","validate","_status","updateOne","previousDoc","error","push","message","awaitedDocs","all","filter"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3219, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3225, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/collections/operations/updateByID.ts"],"sourcesContent":["import type { DeepPartial } from 'ts-essentials'\n\nimport httpStatus from 'http-status'\n\nimport type { FindOneArgs } from '../../database/types.js'\nimport type { Args } from '../../fields/hooks/beforeChange/index.js'\nimport type { CollectionSlug } from '../../index.js'\nimport type {\n  PayloadRequest,\n  PopulateType,\n  SelectType,\n  TransformCollectionWithSelect,\n} from '../../types/index.js'\nimport type {\n  Collection,\n  DataFromCollectionSlug,\n  RequiredDataFromCollectionSlug,\n  SelectFromCollectionSlug,\n} from '../config/types.js'\n\nimport { ensureUsernameOrEmail } from '../../auth/ensureUsernameOrEmail.js'\nimport executeAccess from '../../auth/executeAccess.js'\nimport { generatePasswordSaltHash } from '../../auth/strategies/local/generatePasswordSaltHash.js'\nimport { hasWhereAccessResult } from '../../auth/types.js'\nimport { combineQueries } from '../../database/combineQueries.js'\nimport { APIError, Forbidden, NotFound } from '../../errors/index.js'\nimport { afterChange } from '../../fields/hooks/afterChange/index.js'\nimport { afterRead } from '../../fields/hooks/afterRead/index.js'\nimport { beforeChange } from '../../fields/hooks/beforeChange/index.js'\nimport { beforeValidate } from '../../fields/hooks/beforeValidate/index.js'\nimport { deleteAssociatedFiles } from '../../uploads/deleteAssociatedFiles.js'\nimport { generateFileData } from '../../uploads/generateFileData.js'\nimport { unlinkTempFiles } from '../../uploads/unlinkTempFiles.js'\nimport { uploadFiles } from '../../uploads/uploadFiles.js'\nimport { checkDocumentLockStatus } from '../../utilities/checkDocumentLockStatus.js'\nimport { commitTransaction } from '../../utilities/commitTransaction.js'\nimport { initTransaction } from '../../utilities/initTransaction.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport { getLatestCollectionVersion } from '../../versions/getLatestCollectionVersion.js'\nimport { saveVersion } from '../../versions/saveVersion.js'\nimport { buildAfterOperation } from './utils.js'\n\nexport type Arguments<TSlug extends CollectionSlug> = {\n  autosave?: boolean\n  collection: Collection\n  data: DeepPartial<RequiredDataFromCollectionSlug<TSlug>>\n  depth?: number\n  disableTransaction?: boolean\n  disableVerificationEmail?: boolean\n  draft?: boolean\n  id: number | string\n  overrideAccess?: boolean\n  overrideLock?: boolean\n  overwriteExistingFiles?: boolean\n  populate?: PopulateType\n  publishSpecificLocale?: string\n  req: PayloadRequest\n  select?: SelectType\n  showHiddenFields?: boolean\n}\n\nexport const updateByIDOperation = async <\n  TSlug extends CollectionSlug,\n  TSelect extends SelectFromCollectionSlug<TSlug> = SelectType,\n>(\n  incomingArgs: Arguments<TSlug>,\n): Promise<TransformCollectionWithSelect<TSlug, TSelect>> => {\n  let args = incomingArgs\n\n  try {\n    const shouldCommit = !args.disableTransaction && (await initTransaction(args.req))\n\n    // /////////////////////////////////////\n    // beforeOperation - Collection\n    // /////////////////////////////////////\n\n    await args.collection.config.hooks.beforeOperation.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      args =\n        (await hook({\n          args,\n          collection: args.collection.config,\n          context: args.req.context,\n          operation: 'update',\n          req: args.req,\n        })) || args\n    }, Promise.resolve())\n\n    if (args.publishSpecificLocale) {\n      args.req.locale = args.publishSpecificLocale\n    }\n\n    const {\n      id,\n      autosave = false,\n      collection: { config: collectionConfig },\n      collection,\n      depth,\n      draft: draftArg = false,\n      overrideAccess,\n      overrideLock,\n      overwriteExistingFiles = false,\n      populate,\n      publishSpecificLocale,\n      req: {\n        fallbackLocale,\n        locale,\n        payload: { config },\n        payload,\n      },\n      req,\n      select,\n      showHiddenFields,\n    } = args\n\n    if (!id) {\n      throw new APIError('Missing ID of document to update.', httpStatus.BAD_REQUEST)\n    }\n\n    let { data } = args\n    const password = data?.password\n    const shouldSaveDraft = Boolean(draftArg && collectionConfig.versions.drafts)\n    const shouldSavePassword = Boolean(password && collectionConfig.auth && !shouldSaveDraft)\n\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    const accessResults = !overrideAccess\n      ? await executeAccess({ id, data, req }, collectionConfig.access.update)\n      : true\n    const hasWherePolicy = hasWhereAccessResult(accessResults)\n\n    // /////////////////////////////////////\n    // Retrieve document\n    // /////////////////////////////////////\n\n    const findOneArgs: FindOneArgs = {\n      collection: collectionConfig.slug,\n      locale,\n      req,\n      where: combineQueries({ id: { equals: id } }, accessResults),\n    }\n\n    const docWithLocales = await getLatestCollectionVersion({\n      id,\n      config: collectionConfig,\n      payload,\n      query: findOneArgs,\n      req,\n    })\n\n    if (!docWithLocales && !hasWherePolicy) {\n      throw new NotFound(req.t)\n    }\n    if (!docWithLocales && hasWherePolicy) {\n      throw new Forbidden(req.t)\n    }\n\n    // /////////////////////////////////////\n    // Handle potentially locked documents\n    // /////////////////////////////////////\n\n    await checkDocumentLockStatus({\n      id,\n      collectionSlug: collectionConfig.slug,\n      lockErrorMessage: `Document with ID ${id} is currently locked by another user and cannot be updated.`,\n      overrideLock,\n      req,\n    })\n\n    const originalDoc = await afterRead({\n      collection: collectionConfig,\n      context: req.context,\n      depth: 0,\n      doc: docWithLocales,\n      draft: draftArg,\n      fallbackLocale: null,\n      global: null,\n      locale,\n      overrideAccess: true,\n      req,\n      showHiddenFields: true,\n    })\n\n    if (args.collection.config.auth) {\n      ensureUsernameOrEmail<TSlug>({\n        authOptions: args.collection.config.auth,\n        collectionSlug: args.collection.config.slug,\n        data: args.data,\n        operation: 'update',\n        originalDoc,\n        req: args.req,\n      })\n    }\n\n    // /////////////////////////////////////\n    // Generate data for all files and sizes\n    // /////////////////////////////////////\n\n    const { data: newFileData, files: filesToUpload } = await generateFileData({\n      collection,\n      config,\n      data,\n      operation: 'update',\n      overwriteExistingFiles,\n      req,\n      throwOnMissingFile: false,\n    })\n\n    data = newFileData\n\n    // /////////////////////////////////////\n    // Delete any associated files\n    // /////////////////////////////////////\n\n    await deleteAssociatedFiles({\n      collectionConfig,\n      config,\n      doc: docWithLocales,\n      files: filesToUpload,\n      overrideDelete: false,\n      req,\n    })\n\n    // /////////////////////////////////////\n    // beforeValidate - Fields\n    // /////////////////////////////////////\n\n    data = await beforeValidate<DeepPartial<DataFromCollectionSlug<TSlug>>>({\n      id,\n      collection: collectionConfig,\n      context: req.context,\n      data,\n      doc: originalDoc,\n      global: null,\n      operation: 'update',\n      overrideAccess,\n      req,\n    })\n\n    // /////////////////////////////////////\n    // beforeValidate - Collection\n    // /////////////////////////////////////\n\n    await collectionConfig.hooks.beforeValidate.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      data =\n        (await hook({\n          collection: collectionConfig,\n          context: req.context,\n          data,\n          operation: 'update',\n          originalDoc,\n          req,\n        })) || data\n    }, Promise.resolve())\n\n    // /////////////////////////////////////\n    // Write files to local storage\n    // /////////////////////////////////////\n\n    if (!collectionConfig.upload.disableLocalStorage) {\n      await uploadFiles(payload, filesToUpload, req)\n    }\n\n    // /////////////////////////////////////\n    // beforeChange - Collection\n    // /////////////////////////////////////\n\n    await collectionConfig.hooks.beforeChange.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      data =\n        (await hook({\n          collection: collectionConfig,\n          context: req.context,\n          data,\n          operation: 'update',\n          originalDoc,\n          req,\n        })) || data\n    }, Promise.resolve())\n\n    // /////////////////////////////////////\n    // beforeChange - Fields\n    // /////////////////////////////////////\n\n    let publishedDocWithLocales = docWithLocales\n    let versionSnapshotResult\n\n    const beforeChangeArgs: Args<DataFromCollectionSlug<TSlug>> = {\n      id,\n      collection: collectionConfig,\n      context: req.context,\n      data: { ...data, id },\n      doc: originalDoc,\n      docWithLocales: undefined,\n      global: null,\n      operation: 'update',\n      req,\n      skipValidation:\n        shouldSaveDraft &&\n        collectionConfig.versions.drafts &&\n        !collectionConfig.versions.drafts.validate &&\n        data._status !== 'published',\n    }\n\n    if (publishSpecificLocale) {\n      versionSnapshotResult = await beforeChange({\n        ...beforeChangeArgs,\n        docWithLocales,\n      })\n\n      const lastPublished = await getLatestCollectionVersion({\n        id,\n        config: collectionConfig,\n        payload,\n        published: true,\n        query: findOneArgs,\n        req,\n      })\n\n      publishedDocWithLocales = lastPublished ? lastPublished : {}\n    }\n\n    let result = await beforeChange({\n      ...beforeChangeArgs,\n      docWithLocales: publishedDocWithLocales,\n    })\n\n    // /////////////////////////////////////\n    // Handle potential password update\n    // /////////////////////////////////////\n\n    const dataToUpdate: Record<string, unknown> = { ...result }\n\n    if (shouldSavePassword && typeof password === 'string') {\n      const { hash, salt } = await generatePasswordSaltHash({\n        collection: collectionConfig,\n        password,\n        req,\n      })\n      dataToUpdate.salt = salt\n      dataToUpdate.hash = hash\n      delete dataToUpdate.password\n      delete data.password\n    }\n\n    // /////////////////////////////////////\n    // Update\n    // /////////////////////////////////////\n\n    if (!shouldSaveDraft || data._status === 'published') {\n      result = await req.payload.db.updateOne({\n        id,\n        collection: collectionConfig.slug,\n        data: dataToUpdate,\n        locale,\n        req,\n        select,\n      })\n    }\n\n    // /////////////////////////////////////\n    // Create version\n    // /////////////////////////////////////\n\n    if (collectionConfig.versions) {\n      result = await saveVersion({\n        id,\n        autosave,\n        collection: collectionConfig,\n        docWithLocales: result,\n        draft: shouldSaveDraft,\n        payload,\n        publishSpecificLocale,\n        req,\n        select,\n        snapshot: versionSnapshotResult,\n      })\n    }\n\n    // /////////////////////////////////////\n    // afterRead - Fields\n    // /////////////////////////////////////\n\n    result = await afterRead({\n      collection: collectionConfig,\n      context: req.context,\n      depth,\n      doc: result,\n      draft: draftArg,\n      fallbackLocale,\n      global: null,\n      locale,\n      overrideAccess,\n      populate,\n      req,\n      select,\n      showHiddenFields,\n    })\n\n    // /////////////////////////////////////\n    // afterRead - Collection\n    // /////////////////////////////////////\n\n    await collectionConfig.hooks.afterRead.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      result =\n        (await hook({\n          collection: collectionConfig,\n          context: req.context,\n          doc: result,\n          req,\n        })) || result\n    }, Promise.resolve())\n\n    // /////////////////////////////////////\n    // afterChange - Fields\n    // /////////////////////////////////////\n\n    result = await afterChange({\n      collection: collectionConfig,\n      context: req.context,\n      data,\n      doc: result,\n      global: null,\n      operation: 'update',\n      previousDoc: originalDoc,\n      req,\n    })\n\n    // /////////////////////////////////////\n    // afterChange - Collection\n    // /////////////////////////////////////\n\n    await collectionConfig.hooks.afterChange.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      result =\n        (await hook({\n          collection: collectionConfig,\n          context: req.context,\n          doc: result,\n          operation: 'update',\n          previousDoc: originalDoc,\n          req,\n        })) || result\n    }, Promise.resolve())\n\n    // /////////////////////////////////////\n    // afterOperation - Collection\n    // /////////////////////////////////////\n\n    result = await buildAfterOperation({\n      args,\n      collection: collectionConfig,\n      operation: 'updateByID',\n      result,\n    })\n\n    await unlinkTempFiles({\n      collectionConfig,\n      config,\n      req,\n    })\n\n    // /////////////////////////////////////\n    // Return results\n    // /////////////////////////////////////\n\n    if (shouldCommit) {\n      await commitTransaction(req)\n    }\n\n    return result as TransformCollectionWithSelect<TSlug, TSelect>\n  } catch (error: unknown) {\n    await killTransaction(args.req)\n    throw error\n  }\n}\n"],"names":["httpStatus","ensureUsernameOrEmail","executeAccess","generatePasswordSaltHash","hasWhereAccessResult","combineQueries","APIError","Forbidden","NotFound","afterChange","afterRead","beforeChange","beforeValidate","deleteAssociatedFiles","generateFileData","unlinkTempFiles","uploadFiles","checkDocumentLockStatus","commitTransaction","initTransaction","killTransaction","getLatestCollectionVersion","saveVersion","buildAfterOperation","updateByIDOperation","incomingArgs","args","shouldCommit","disableTransaction","req","collection","config","hooks","beforeOperation","reduce","priorHook","hook","context","operation","Promise","resolve","publishSpecificLocale","locale","id","autosave","collectionConfig","depth","draft","draftArg","overrideAccess","overrideLock","overwriteExistingFiles","populate","fallbackLocale","payload","select","showHiddenFields","BAD_REQUEST","data","password","shouldSaveDraft","Boolean","versions","drafts","shouldSavePassword","auth","accessResults","access","update","hasWherePolicy","findOneArgs","slug","where","equals","docWithLocales","query","t","collectionSlug","lockErrorMessage","originalDoc","doc","global","authOptions","newFileData","files","filesToUpload","throwOnMissingFile","overrideDelete","upload","disableLocalStorage","publishedDocWithLocales","versionSnapshotResult","beforeChangeArgs","undefined","skipValidation","validate","_status","lastPublished","published","result","dataToUpdate","hash","salt","db","updateOne","snapshot","previousDoc","error"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3611, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3617, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/collections/operations/local/update.ts"],"sourcesContent":["import type { DeepPartial } from 'ts-essentials'\n\nimport type { CollectionSlug, Payload, RequestContext, TypedLocale } from '../../../index.js'\nimport type {\n  Document,\n  PayloadRequest,\n  PopulateType,\n  SelectType,\n  TransformCollectionWithSelect,\n  Where,\n} from '../../../types/index.js'\nimport type { File } from '../../../uploads/types.js'\nimport type {\n  BulkOperationResult,\n  RequiredDataFromCollectionSlug,\n  SelectFromCollectionSlug,\n} from '../../config/types.js'\n\nimport { APIError } from '../../../errors/index.js'\nimport { getFileByPath } from '../../../uploads/getFileByPath.js'\nimport { createLocalReq } from '../../../utilities/createLocalReq.js'\nimport { updateOperation } from '../update.js'\nimport { updateByIDOperation } from '../updateByID.js'\n\nexport type BaseOptions<TSlug extends CollectionSlug, TSelect extends SelectType> = {\n  autosave?: boolean\n  collection: TSlug\n  /**\n   * context, which will then be passed to req.context, which can be read by hooks\n   */\n  context?: RequestContext\n  data: DeepPartial<RequiredDataFromCollectionSlug<TSlug>>\n  depth?: number\n  disableTransaction?: boolean\n  draft?: boolean\n  fallbackLocale?: false | TypedLocale\n  file?: File\n  filePath?: string\n  locale?: TypedLocale\n  overrideAccess?: boolean\n  overrideLock?: boolean\n  overwriteExistingFiles?: boolean\n  populate?: PopulateType\n  publishSpecificLocale?: string\n  req?: Partial<PayloadRequest>\n  select?: TSelect\n  showHiddenFields?: boolean\n  user?: Document\n}\n\nexport type ByIDOptions<\n  TSlug extends CollectionSlug,\n  TSelect extends SelectFromCollectionSlug<TSlug>,\n> = {\n  id: number | string\n  limit?: never\n  where?: never\n} & BaseOptions<TSlug, TSelect>\n\nexport type ManyOptions<\n  TSlug extends CollectionSlug,\n  TSelect extends SelectFromCollectionSlug<TSlug>,\n> = {\n  id?: never\n  limit?: number\n  where: Where\n} & BaseOptions<TSlug, TSelect>\n\nexport type Options<\n  TSlug extends CollectionSlug,\n  TSelect extends SelectFromCollectionSlug<TSlug>,\n> = ByIDOptions<TSlug, TSelect> | ManyOptions<TSlug, TSelect>\n\nasync function updateLocal<\n  TSlug extends CollectionSlug,\n  TSelect extends SelectFromCollectionSlug<TSlug>,\n>(\n  payload: Payload,\n  options: ByIDOptions<TSlug, TSelect>,\n): Promise<TransformCollectionWithSelect<TSlug, TSelect>>\nasync function updateLocal<\n  TSlug extends CollectionSlug,\n  TSelect extends SelectFromCollectionSlug<TSlug>,\n>(\n  payload: Payload,\n  options: ManyOptions<TSlug, TSelect>,\n): Promise<BulkOperationResult<TSlug, TSelect>>\nasync function updateLocal<\n  TSlug extends CollectionSlug,\n  TSelect extends SelectFromCollectionSlug<TSlug>,\n>(\n  payload: Payload,\n  options: Options<TSlug, TSelect>,\n): Promise<BulkOperationResult<TSlug, TSelect> | TransformCollectionWithSelect<TSlug, TSelect>>\nasync function updateLocal<\n  TSlug extends CollectionSlug,\n  TSelect extends SelectFromCollectionSlug<TSlug>,\n>(\n  payload: Payload,\n  options: Options<TSlug, TSelect>,\n): Promise<BulkOperationResult<TSlug, TSelect> | TransformCollectionWithSelect<TSlug, TSelect>> {\n  const {\n    id,\n    autosave,\n    collection: collectionSlug,\n    data,\n    depth,\n    disableTransaction,\n    draft,\n    file,\n    filePath,\n    limit,\n    overrideAccess = true,\n    overrideLock,\n    overwriteExistingFiles = false,\n    populate,\n    publishSpecificLocale,\n    select,\n    showHiddenFields,\n    where,\n  } = options\n\n  const collection = payload.collections[collectionSlug]\n\n  if (!collection) {\n    throw new APIError(\n      `The collection with slug ${String(collectionSlug)} can't be found. Update Operation.`,\n    )\n  }\n\n  const req = await createLocalReq(options, payload)\n  req.file = file ?? (await getFileByPath(filePath))\n\n  const args = {\n    id,\n    autosave,\n    collection,\n    data,\n    depth,\n    disableTransaction,\n    draft,\n    limit,\n    overrideAccess,\n    overrideLock,\n    overwriteExistingFiles,\n    payload,\n    populate,\n    publishSpecificLocale,\n    req,\n    select,\n    showHiddenFields,\n    where,\n  }\n\n  if (options.id) {\n    return updateByIDOperation<TSlug, TSelect>(args)\n  }\n  return updateOperation<TSlug, TSelect>(args)\n}\n\nexport default updateLocal\n"],"names":["APIError","getFileByPath","createLocalReq","updateOperation","updateByIDOperation","updateLocal","payload","options","id","autosave","collection","collectionSlug","data","depth","disableTransaction","draft","file","filePath","limit","overrideAccess","overrideLock","overwriteExistingFiles","populate","publishSpecificLocale","select","showHiddenFields","where","collections","String","req","args"],"mappings":";;;AAkBA,SAASA,QAAQ,QAAQ,2BAA0B;AAEnD,SAASE,cAAc,QAAQ,uCAAsC;AADrE,SAASD,aAAa,QAAQ,oCAAmC;AAEjE,SAASE,eAAe,QAAQ,eAAc;AAC9C,SAASC,mBAAmB,QAAQ,mBAAkB;;;;;;AAwEtD,eAAeC,YAIbC,OAAgB,EAChBC,OAAgC;IAEhC,MAAM,EACJC,EAAE,EACFC,QAAQ,EACRC,YAAYC,cAAc,EAC1BC,IAAI,EACJC,KAAK,EACLC,kBAAkB,EAClBC,KAAK,EACLC,IAAI,EACJC,QAAQ,EACRC,KAAK,EACLC,iBAAiB,IAAI,EACrBC,YAAY,EACZC,yBAAyB,KAAK,EAC9BC,QAAQ,EACRC,qBAAqB,EACrBC,MAAM,EACNC,gBAAgB,EAChBC,KAAK,EACN,GAAGnB;IAEJ,MAAMG,aAAaJ,QAAQqB,WAAW,CAAChB,eAAe;IAEtD,IAAI,CAACD,YAAY;QACf,MAAM,gXAAIV,WAAAA,CACR,CAAC,yBAAyB,EAAE4B,OAAOjB,gBAAgB,kCAAkC,CAAC;IAE1F;IAEA,MAAMkB,MAAM,MAAM3B,0YAAAA,EAAeK,SAASD;IAC1CuB,IAAIb,IAAI,GAAGA,QAAS,OAAMf,qYAAAA,EAAcgB;IAExC,MAAMa,OAAO;QACXtB;QACAC;QACAC;QACAE;QACAC;QACAC;QACAC;QACAG;QACAC;QACAC;QACAC;QACAf;QACAgB;QACAC;QACAM;QACAL;QACAC;QACAC;IACF;IAEA,IAAInB,QAAQC,EAAE,EAAE;QACd,OAAOJ,2ZAAAA,EAAoC0B;IAC7C;IACA,wYAAO3B,kBAAAA,EAAgC2B;AACzC;uCAEezB,YAAW","ignoreList":[0]}},
    {"offset": {"line": 3665, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3671, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/collections/operations/local/index.ts"],"sourcesContent":["/* eslint-disable no-restricted-exports */\nimport * as auth from '../../../auth/operations/local/index.js'\nimport count from './count.js'\nimport countVersions from './countVersions.js'\nimport create from './create.js'\nimport deleteLocal from './delete.js'\nimport { duplicate } from './duplicate.js'\nimport { findLocal } from './find.js'\nimport findByID from './findByID.js'\nimport findVersionByID from './findVersionByID.js'\nimport findVersions from './findVersions.js'\nimport restoreVersion from './restoreVersion.js'\nimport update from './update.js'\n\nexport default {\n  auth,\n  count,\n  countVersions,\n  create,\n  deleteLocal,\n  duplicate,\n  find: findLocal,\n  findByID,\n  findVersionByID,\n  findVersions,\n  restoreVersion,\n  update,\n}\n"],"names":["auth","count","countVersions","create","deleteLocal","duplicate","findLocal","findByID","findVersionByID","findVersions","restoreVersion","update","find"],"mappings":"AAAA,wCAAwC;;;AACxC,YAAYA,UAAU,0CAAyC;AAC/D,OAAOC,WAAW,aAAY;AAC9B,OAAOC,mBAAmB,qBAAoB;AAC9C,OAAOC,YAAY,cAAa;AAChC,OAAOC,iBAAiB,cAAa;AACrC,SAASC,SAAS,QAAQ,iBAAgB;AAC1C,SAASC,SAAS,QAAQ,YAAW;AACrC,OAAOC,cAAc,gBAAe;AACpC,OAAOC,qBAAqB,uBAAsB;AAClD,OAAOC,kBAAkB,oBAAmB;AAC5C,OAAOC,oBAAoB,sBAAqB;AAChD,OAAOC,YAAY,cAAa;;;;;;;;;;;;;uCAEjB;UACbX;gZACAC,UAAAA;gaACAC,UAAAA;kZACAC,UAAAA;uZACAC,UAAAA;wZACAC,YAAAA;IACAO,0YAAMN,YAAAA;sZACNC,UAAAA;oaACAC,UAAAA;8ZACAC,UAAAA;kaACAC,UAAAA;kZACAC,UAAAA;AACF,EAAC","ignoreList":[0]}},
    {"offset": {"line": 3713, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3719, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/collections/config/client.ts"],"sourcesContent":["import type { I18nClient } from '@payloadcms/translations'\n\nimport type { StaticDescription } from '../../admin/types.js'\nimport type { ImportMap } from '../../bin/generateImportMap/index.js'\nimport type {\n  LivePreviewConfig,\n  ServerOnlyLivePreviewProperties,\n  StaticLabel,\n} from '../../config/types.js'\nimport type { ClientField } from '../../fields/config/client.js'\nimport type { Payload } from '../../types/index.js'\nimport type { SanitizedUploadConfig } from '../../uploads/types.js'\nimport type { SanitizedCollectionConfig } from './types.js'\n\nimport { createClientFields } from '../../fields/config/client.js'\n\nexport type ServerOnlyCollectionProperties = keyof Pick<\n  SanitizedCollectionConfig,\n  'access' | 'custom' | 'endpoints' | 'flattenedFields' | 'hooks' | 'joins'\n>\n\nexport type ServerOnlyCollectionAdminProperties = keyof Pick<\n  SanitizedCollectionConfig['admin'],\n  'baseListFilter' | 'components' | 'hidden'\n>\n\nexport type ServerOnlyUploadProperties = keyof Pick<\n  SanitizedCollectionConfig['upload'],\n  | 'adminThumbnail'\n  | 'externalFileHeaderFilter'\n  | 'handlers'\n  | 'modifyResponseHeaders'\n  | 'withMetadata'\n>\n\nexport type ClientCollectionConfig = {\n  admin: {\n    description?: StaticDescription\n    livePreview?: Omit<LivePreviewConfig, ServerOnlyLivePreviewProperties>\n    preview?: boolean\n  } & Omit<\n    SanitizedCollectionConfig['admin'],\n    | 'components'\n    | 'description'\n    | 'joins'\n    | 'livePreview'\n    | 'preview'\n    | ServerOnlyCollectionAdminProperties\n  >\n  auth?: { verify?: true } & Omit<\n    SanitizedCollectionConfig['auth'],\n    'forgotPassword' | 'strategies' | 'verify'\n  >\n  fields: ClientField[]\n  labels: {\n    plural: StaticLabel\n    singular: StaticLabel\n  }\n} & Omit<\n  SanitizedCollectionConfig,\n  'admin' | 'auth' | 'fields' | 'labels' | ServerOnlyCollectionProperties\n>\n\nconst serverOnlyCollectionProperties: Partial<ServerOnlyCollectionProperties>[] = [\n  'hooks',\n  'access',\n  'endpoints',\n  'custom',\n  'joins',\n  'flattenedFields',\n  // `upload`\n  // `admin`\n  // are all handled separately\n]\n\nconst serverOnlyUploadProperties: Partial<ServerOnlyUploadProperties>[] = [\n  'adminThumbnail',\n  'externalFileHeaderFilter',\n  'handlers',\n  'modifyResponseHeaders',\n  'withMetadata',\n]\n\nconst serverOnlyCollectionAdminProperties: Partial<ServerOnlyCollectionAdminProperties>[] = [\n  'hidden',\n  'baseListFilter',\n  'components',\n  // 'preview' is handled separately\n  // `livePreview` is handled separately\n]\n\nexport const createClientCollectionConfig = ({\n  collection,\n  defaultIDType,\n  i18n,\n  importMap,\n}: {\n  collection: SanitizedCollectionConfig\n  defaultIDType: Payload['config']['db']['defaultIDType']\n  i18n: I18nClient\n  importMap: ImportMap\n}): ClientCollectionConfig => {\n  const clientCollection = {} as Partial<ClientCollectionConfig>\n\n  for (const key in collection) {\n    if (serverOnlyCollectionProperties.includes(key as any)) {\n      continue\n    }\n    switch (key) {\n      case 'admin':\n        if (!collection.admin) {\n          break\n        }\n        clientCollection.admin = {} as ClientCollectionConfig['admin']\n        for (const adminKey in collection.admin) {\n          if (serverOnlyCollectionAdminProperties.includes(adminKey as any)) {\n            continue\n          }\n\n          switch (adminKey) {\n            case 'description':\n              if (\n                typeof collection.admin.description === 'string' ||\n                typeof collection.admin.description === 'object'\n              ) {\n                if (collection.admin.description) {\n                  clientCollection.admin.description = collection.admin.description\n                }\n              } else if (typeof collection.admin.description === 'function') {\n                const description = collection.admin.description({ t: i18n.t })\n                if (description) {\n                  clientCollection.admin.description = description\n                }\n              }\n              break\n            case 'livePreview':\n              clientCollection.admin.livePreview =\n                {} as ClientCollectionConfig['admin']['livePreview']\n              if (collection.admin.livePreview.breakpoints) {\n                clientCollection.admin.livePreview.breakpoints =\n                  collection.admin.livePreview.breakpoints\n              }\n              break\n            case 'preview':\n              if (collection.admin.preview) {\n                clientCollection.admin.preview = true\n              }\n              break\n            default:\n              clientCollection.admin[adminKey] = collection.admin[adminKey]\n          }\n        }\n        break\n      case 'auth':\n        if (!collection.auth) {\n          break\n        }\n        clientCollection.auth = {} as { verify?: true } & SanitizedCollectionConfig['auth']\n        if (collection.auth.cookies) {\n          clientCollection.auth.cookies = collection.auth.cookies\n        }\n        if (collection.auth.depth !== undefined) {\n          // Check for undefined as it can be a number (0)\n          clientCollection.auth.depth = collection.auth.depth\n        }\n        if (collection.auth.disableLocalStrategy) {\n          clientCollection.auth.disableLocalStrategy = collection.auth.disableLocalStrategy\n        }\n        if (collection.auth.lockTime !== undefined) {\n          // Check for undefined as it can be a number (0)\n          clientCollection.auth.lockTime = collection.auth.lockTime\n        }\n        if (collection.auth.loginWithUsername) {\n          clientCollection.auth.loginWithUsername = collection.auth.loginWithUsername\n        }\n        if (collection.auth.maxLoginAttempts !== undefined) {\n          // Check for undefined as it can be a number (0)\n          clientCollection.auth.maxLoginAttempts = collection.auth.maxLoginAttempts\n        }\n        if (collection.auth.removeTokenFromResponses) {\n          clientCollection.auth.removeTokenFromResponses = collection.auth.removeTokenFromResponses\n        }\n\n        if (collection.auth.useAPIKey) {\n          clientCollection.auth.useAPIKey = collection.auth.useAPIKey\n        }\n        if (collection.auth.tokenExpiration) {\n          clientCollection.auth.tokenExpiration = collection.auth.tokenExpiration\n        }\n        if (collection.auth.verify) {\n          clientCollection.auth.verify = true\n        }\n        break\n      case 'fields':\n        clientCollection.fields = createClientFields({\n          defaultIDType,\n          fields: collection.fields,\n          i18n,\n          importMap,\n        })\n        break\n      case 'labels':\n        clientCollection.labels = {\n          plural:\n            typeof collection.labels.plural === 'function'\n              ? collection.labels.plural({ t: i18n.t })\n              : collection.labels.plural,\n          singular:\n            typeof collection.labels.singular === 'function'\n              ? collection.labels.singular({ t: i18n.t })\n              : collection.labels.singular,\n        }\n        break\n      case 'upload':\n        if (!collection.upload) {\n          break\n        }\n        clientCollection.upload = {} as SanitizedUploadConfig\n        for (const uploadKey in collection.upload) {\n          if (serverOnlyUploadProperties.includes(uploadKey as any)) {\n            continue\n          }\n          if (uploadKey === 'imageSizes') {\n            clientCollection.upload.imageSizes = collection.upload.imageSizes.map((size) => {\n              const sanitizedSize = { ...size }\n              if ('generateImageName' in sanitizedSize) {\n                delete sanitizedSize.generateImageName\n              }\n              return sanitizedSize\n            })\n          } else {\n            clientCollection.upload[uploadKey] = collection.upload[uploadKey]\n          }\n        }\n        break\n\n      default:\n        clientCollection[key] = collection[key]\n    }\n  }\n\n  return clientCollection as ClientCollectionConfig\n}\n\nexport const createClientCollectionConfigs = ({\n  collections,\n  defaultIDType,\n  i18n,\n  importMap,\n}: {\n  collections: SanitizedCollectionConfig[]\n  defaultIDType: Payload['config']['db']['defaultIDType']\n  i18n: I18nClient\n  importMap: ImportMap\n}): ClientCollectionConfig[] => {\n  const clientCollections = new Array(collections.length)\n\n  for (let i = 0; i < collections.length; i++) {\n    const collection = collections[i]\n\n    clientCollections[i] = createClientCollectionConfig({\n      collection,\n      defaultIDType,\n      i18n,\n      importMap,\n    })\n  }\n\n  return clientCollections\n}\n"],"names":["createClientFields","serverOnlyCollectionProperties","serverOnlyUploadProperties","serverOnlyCollectionAdminProperties","createClientCollectionConfig","collection","defaultIDType","i18n","importMap","clientCollection","key","includes","admin","adminKey","description","t","livePreview","breakpoints","preview","auth","cookies","depth","undefined","disableLocalStrategy","lockTime","loginWithUsername","maxLoginAttempts","removeTokenFromResponses","useAPIKey","tokenExpiration","verify","fields","labels","plural","singular","upload","uploadKey","imageSizes","map","size","sanitizedSize","generateImageName","createClientCollectionConfigs","collections","clientCollections","Array","length","i"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3892, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3898, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/payload/node_modules/.pnpm/payload%403.11.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/collections/operations/docAccess.ts"],"sourcesContent":["import type { SanitizedCollectionPermission } from '../../auth/index.js'\nimport type { AllOperations, PayloadRequest } from '../../types/index.js'\nimport type { Collection } from '../config/types.js'\n\nimport { getEntityPolicies } from '../../utilities/getEntityPolicies.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport { sanitizePermissions } from '../../utilities/sanitizePermissions.js'\n\nconst allOperations: AllOperations[] = ['create', 'read', 'update', 'delete']\n\ntype Arguments = {\n  collection: Collection\n  id: string\n  req: PayloadRequest\n}\n\nexport async function docAccessOperation(args: Arguments): Promise<SanitizedCollectionPermission> {\n  const {\n    id,\n    collection: { config },\n    req,\n  } = args\n\n  const collectionOperations = [...allOperations]\n\n  if (\n    config.auth &&\n    typeof config.auth.maxLoginAttempts !== 'undefined' &&\n    config.auth.maxLoginAttempts !== 0\n  ) {\n    collectionOperations.push('unlock')\n  }\n\n  if (config.versions) {\n    collectionOperations.push('readVersions')\n  }\n\n  try {\n    const result = await getEntityPolicies({\n      id,\n      type: 'collection',\n      entity: config,\n      operations: collectionOperations,\n      req,\n    })\n\n    const sanitizedPermissions = sanitizePermissions({\n      collections: {\n        [config.slug]: result,\n      },\n    })\n\n    return sanitizedPermissions?.collections?.[config.slug]\n  } catch (e: unknown) {\n    await killTransaction(req)\n    throw e\n  }\n}\n"],"names":["getEntityPolicies","killTransaction","sanitizePermissions","allOperations","docAccessOperation","args","id","collection","config","req","collectionOperations","auth","maxLoginAttempts","push","versions","result","type","entity","operations","sanitizedPermissions","collections","slug","e"],"mappings":";;;AAIA,SAASA,iBAAiB,QAAQ,uCAAsC;AAExE,SAASE,mBAAmB,QAAQ,yCAAwC;AAD5E,SAASD,eAAe,QAAQ,qCAAoC;;;;AAGpE,MAAME,gBAAiC;IAAC;IAAU;IAAQ;IAAU;CAAS;AAQtE,eAAeC,mBAAmBC,IAAe;IACtD,MAAM,EACJC,EAAE,EACFC,YAAY,EAAEC,MAAM,EAAE,EACtBC,GAAG,EACJ,GAAGJ;IAEJ,MAAMK,uBAAuB;WAAIP;KAAc;IAE/C,IACEK,OAAOG,IAAI,IACX,OAAOH,OAAOG,IAAI,CAACC,gBAAgB,KAAK,eACxCJ,OAAOG,IAAI,CAACC,gBAAgB,KAAK,GACjC;QACAF,qBAAqBG,IAAI,CAAC;IAC5B;IAEA,IAAIL,OAAOM,QAAQ,EAAE;QACnBJ,qBAAqBG,IAAI,CAAC;IAC5B;IAEA,IAAI;QACF,MAAME,SAAS,MAAMf,gZAAAA,EAAkB;YACrCM;YACAU,MAAM;YACNC,QAAQT;YACRU,YAAYR;YACZD;QACF;QAEA,MAAMU,qZAAuBjB,sBAAAA,EAAoB;YAC/CkB,aAAa;gBACX,CAACZ,OAAOa,IAAI,CAAC,EAAEN;YACjB;QACF;QAEA,OAAOI,sBAAsBC,aAAa,CAACZ,OAAOa,IAAI,CAAC;IACzD,EAAE,OAAOC,GAAY;QACnB,gYAAMrB,kBAAAA,EAAgBQ;QACtB,MAAMa;IACR;AACF","ignoreList":[0]}},
    {"offset": {"line": 3943, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}