{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/packages/graphql-query-complexity/QueryComplexity.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/no-unsafe-enum-comparison */\n/**\n * Created by Ivo Mei√üner on 28.07.17.\n */\n\nimport type {\n  DocumentNode,\n  FieldNode,\n  FragmentDefinitionNode,\n  FragmentSpreadNode,\n  GraphQLCompositeType,\n  GraphQLDirective,\n  GraphQLField,\n  GraphQLFieldMap,\n  GraphQLNamedType,\n  GraphQLSchema,\n  GraphQLUnionType,\n  InlineFragmentNode,\n  OperationDefinitionNode,\n} from 'graphql'\n\nimport {\n  getNamedType,\n  GraphQLError,\n  GraphQLInterfaceType,\n  GraphQLObjectType,\n  isAbstractType,\n  isCompositeType,\n  Kind,\n  TypeInfo,\n  ValidationContext,\n  visit,\n  visitWithTypeInfo,\n} from 'graphql'\nimport {\n  getArgumentValues,\n  getDirectiveValues,\n  getVariableValues,\n} from 'graphql/execution/values.js'\n\nexport type ComplexityEstimatorArgs = {\n  args: { [key: string]: any }\n  childComplexity: number\n  context?: Record<string, any>\n  field: GraphQLField<any, any>\n  node: FieldNode\n  type: GraphQLCompositeType\n}\n\nexport type ComplexityEstimator = (options: ComplexityEstimatorArgs) => number | void\n\n// Complexity can be anything that is supported by the configured estimators\nexport type Complexity = any\n\n// Map of complexities for possible types (of Union, Interface types)\ntype ComplexityMap = {\n  [typeName: string]: number\n}\n\nexport interface QueryComplexityOptions {\n  // Pass request context to the estimators via estimationContext\n  context?: Record<string, any>\n\n  // The query variables. This is needed because the variables are not available\n  // Optional function to create a custom error\n  createError?: (max: number, actual: number) => GraphQLError\n\n  // An array of complexity estimators to use for estimating the complexity\n  estimators: Array<ComplexityEstimator>\n\n  // Optional callback function to retrieve the determined query complexity\n  // Will be invoked whether the query is rejected or not\n  // The maximum allowed query complexity, queries above this threshold will be rejected\n  maximumComplexity: number\n\n  // This can be used for logging or to implement rate limiting\n  onComplete?: (complexity: number) => void\n\n  // specify operation name only when pass multi-operation documents\n  operationName?: string\n\n  // in the visitor of the graphql-js library\n  variables?: Record<string, any>\n}\n\nfunction queryComplexityMessage(max: number, actual: number): string {\n  return `The query exceeds the maximum complexity of ${max}. ` + `Actual complexity is ${actual}`\n}\n\nexport function getComplexity(options: {\n  context?: Record<string, any>\n  estimators: ComplexityEstimator[]\n  operationName?: string\n  query: DocumentNode\n  schema: GraphQLSchema\n  variables?: Record<string, any>\n}): number {\n  const typeInfo = new TypeInfo(options.schema)\n\n  const errors: GraphQLError[] = []\n  const context = new ValidationContext(options.schema, options.query, typeInfo, (error) =>\n    errors.push(error),\n  )\n  const visitor = new QueryComplexity(context, {\n    // Maximum complexity does not matter since we're only interested in the calculated complexity.\n    context: options.context,\n    estimators: options.estimators,\n    maximumComplexity: Infinity,\n    operationName: options.operationName,\n    variables: options.variables,\n  })\n\n  visit(options.query, visitWithTypeInfo(typeInfo, visitor))\n\n  // Throw first error if any\n  if (errors.length) {\n    throw errors.pop()\n  }\n\n  return visitor.complexity\n}\n\nexport class QueryComplexity {\n  complexity: number\n  context: ValidationContext\n  estimators: Array<ComplexityEstimator>\n  includeDirectiveDef: GraphQLDirective\n  OperationDefinition: Record<string, any>\n  options: QueryComplexityOptions\n  requestContext?: Record<string, any>\n  skipDirectiveDef: GraphQLDirective\n  variableValues: Record<string, any>\n\n  constructor(context: ValidationContext, options: QueryComplexityOptions) {\n    if (!(typeof options.maximumComplexity === 'number' && options.maximumComplexity > 0)) {\n      throw new Error('Maximum query complexity must be a positive number')\n    }\n\n    this.context = context\n    this.complexity = 0\n    this.options = options\n\n    this.includeDirectiveDef = this.context.getSchema().getDirective('include')\n    this.skipDirectiveDef = this.context.getSchema().getDirective('skip')\n    this.estimators = options.estimators\n    this.variableValues = {}\n    this.requestContext = options.context\n\n    this.OperationDefinition = {\n      enter: this.onOperationDefinitionEnter,\n      leave: this.onOperationDefinitionLeave,\n    }\n  }\n\n  createError(): GraphQLError {\n    if (typeof this.options.createError === 'function') {\n      return this.options.createError(this.options.maximumComplexity, this.complexity)\n    }\n    return new GraphQLError(queryComplexityMessage(this.options.maximumComplexity, this.complexity))\n  }\n\n  nodeComplexity(\n    node: FieldNode | FragmentDefinitionNode | InlineFragmentNode | OperationDefinitionNode,\n    typeDef: GraphQLInterfaceType | GraphQLObjectType | GraphQLUnionType,\n  ): number {\n    if (node.selectionSet) {\n      let fields: GraphQLFieldMap<any, any> = {}\n      if (typeDef instanceof GraphQLObjectType || typeDef instanceof GraphQLInterfaceType) {\n        fields = typeDef.getFields()\n      }\n\n      // Determine all possible types of the current node\n      let possibleTypeNames: string[]\n      if (isAbstractType(typeDef)) {\n        possibleTypeNames = this.context\n          .getSchema()\n          .getPossibleTypes(typeDef)\n          .map((t) => t.name)\n      } else {\n        possibleTypeNames = [typeDef.name]\n      }\n\n      // Collect complexities for all possible types individually\n      const selectionSetComplexities: ComplexityMap = node.selectionSet.selections.reduce(\n        (\n          complexities: ComplexityMap,\n          childNode: FieldNode | FragmentSpreadNode | InlineFragmentNode,\n        ): ComplexityMap => {\n          // let nodeComplexity = 0;\n          let innerComplexities = complexities\n\n          let includeNode = true\n          let skipNode = false\n\n          for (const directive of childNode.directives ?? []) {\n            const directiveName = directive.name.value\n            switch (directiveName) {\n              case 'include': {\n                const values = getDirectiveValues(\n                  this.includeDirectiveDef,\n                  childNode,\n                  this.variableValues || {},\n                )\n                if (typeof values.if === 'boolean') {\n                  includeNode = values.if\n                }\n                break\n              }\n              case 'skip': {\n                const values = getDirectiveValues(\n                  this.skipDirectiveDef,\n                  childNode,\n                  this.variableValues || {},\n                )\n                if (typeof values.if === 'boolean') {\n                  skipNode = values.if\n                }\n                break\n              }\n            }\n          }\n\n          if (!includeNode || skipNode) {\n            return complexities\n          }\n\n          switch (childNode.kind) {\n            case Kind.FIELD: {\n              const field = fields[childNode.name.value]\n              // Invalid field, should be caught by other validation rules\n              if (!field) {\n                break\n              }\n              const fieldType = getNamedType(field.type)\n\n              // Get arguments\n              let args: { [key: string]: any }\n              try {\n                args = getArgumentValues(field, childNode, this.variableValues || {})\n              } catch (e) {\n                this.context.reportError(e)\n                return complexities\n              }\n\n              // Check if we have child complexity\n              let childComplexity = 0\n              if (isCompositeType(fieldType)) {\n                childComplexity = this.nodeComplexity(childNode, fieldType)\n              }\n\n              // Run estimators one after another and return first valid complexity\n              // score\n              const estimatorArgs: ComplexityEstimatorArgs = {\n                type: typeDef,\n                args,\n                childComplexity,\n                context: this.requestContext,\n                field,\n                node: childNode,\n              }\n              const validScore = this.estimators.find((estimator) => {\n                const tmpComplexity = estimator(estimatorArgs)\n\n                if (typeof tmpComplexity === 'number' && !isNaN(tmpComplexity)) {\n                  innerComplexities = addComplexities(\n                    tmpComplexity,\n                    complexities,\n                    possibleTypeNames,\n                  )\n                  return true\n                }\n\n                return false\n              })\n              if (!validScore) {\n                this.context.reportError(\n                  new GraphQLError(\n                    `No complexity could be calculated for field ${typeDef.name}.${field.name}. ` +\n                      'At least one complexity estimator has to return a complexity score.',\n                  ),\n                )\n                return complexities\n              }\n              break\n            }\n            case Kind.FRAGMENT_SPREAD: {\n              const fragment = this.context.getFragment(childNode.name.value)\n              // Unknown fragment, should be caught by other validation rules\n              if (!fragment) {\n                break\n              }\n              const fragmentType = this.context\n                .getSchema()\n                .getType(fragment.typeCondition.name.value)\n              // Invalid fragment type, ignore. Should be caught by other validation rules\n              if (!isCompositeType(fragmentType)) {\n                break\n              }\n              const nodeComplexity = this.nodeComplexity(fragment, fragmentType)\n              if (isAbstractType(fragmentType)) {\n                // Add fragment complexity for all possible types\n                innerComplexities = addComplexities(\n                  nodeComplexity,\n                  complexities,\n                  this.context\n                    .getSchema()\n                    .getPossibleTypes(fragmentType)\n                    .map((t) => t.name),\n                )\n              } else {\n                // Add complexity for object type\n                innerComplexities = addComplexities(nodeComplexity, complexities, [\n                  fragmentType.name,\n                ])\n              }\n              break\n            }\n            case Kind.INLINE_FRAGMENT: {\n              let inlineFragmentType: GraphQLNamedType = typeDef\n              if (childNode.typeCondition && childNode.typeCondition.name) {\n                inlineFragmentType = this.context\n                  .getSchema()\n                  .getType(childNode.typeCondition.name.value)\n                if (!isCompositeType(inlineFragmentType)) {\n                  break\n                }\n              }\n\n              const nodeComplexity = this.nodeComplexity(childNode, inlineFragmentType)\n              if (isAbstractType(inlineFragmentType)) {\n                // Add fragment complexity for all possible types\n                innerComplexities = addComplexities(\n                  nodeComplexity,\n                  complexities,\n                  this.context\n                    .getSchema()\n                    .getPossibleTypes(inlineFragmentType)\n                    .map((t) => t.name),\n                )\n              } else {\n                // Add complexity for object type\n                innerComplexities = addComplexities(nodeComplexity, complexities, [\n                  inlineFragmentType.name,\n                ])\n              }\n              break\n            }\n            default: {\n              innerComplexities = addComplexities(\n                this.nodeComplexity(childNode, typeDef),\n                complexities,\n                possibleTypeNames,\n              )\n              break\n            }\n          }\n\n          return innerComplexities\n        },\n        {},\n      )\n      // Only return max complexity of all possible types\n      if (!selectionSetComplexities) {\n        return NaN\n      }\n      return Math.max(...Object.values(selectionSetComplexities), 0)\n    }\n    return 0\n  }\n\n  onOperationDefinitionEnter(operation: OperationDefinitionNode): void {\n    if (\n      typeof this.options.operationName === 'string' &&\n      this.options.operationName !== operation.name.value\n    ) {\n      return\n    }\n\n    // Get variable values from variables that are passed from options, merged\n    // with default values defined in the operation\n    const { coerced, errors } = getVariableValues(\n      this.context.getSchema(),\n      // We have to create a new array here because input argument is not readonly in graphql ~14.6.0\n      operation.variableDefinitions ? [...operation.variableDefinitions] : [],\n      this.options.variables ?? {},\n    )\n    if (errors && errors.length) {\n      // We have input validation errors, report errors and abort\n      errors.forEach((error) => this.context.reportError(error))\n      return\n    }\n    this.variableValues = coerced\n\n    switch (operation.operation) {\n      case 'mutation':\n        this.complexity += this.nodeComplexity(\n          operation,\n          this.context.getSchema().getMutationType(),\n        )\n        break\n      case 'query':\n        this.complexity += this.nodeComplexity(operation, this.context.getSchema().getQueryType())\n        break\n      case 'subscription':\n        this.complexity += this.nodeComplexity(\n          operation,\n          this.context.getSchema().getSubscriptionType(),\n        )\n        break\n      default:\n        throw new Error(\n          `Query complexity could not be calculated for operation of type ${operation.operation}`,\n        )\n    }\n  }\n\n  onOperationDefinitionLeave(operation: OperationDefinitionNode): GraphQLError | void {\n    if (\n      typeof this.options.operationName === 'string' &&\n      this.options.operationName !== operation.name.value\n    ) {\n      return\n    }\n\n    if (this.options.onComplete) {\n      this.options.onComplete(this.complexity)\n    }\n\n    if (this.complexity > this.options.maximumComplexity) {\n      return this.context.reportError(this.createError())\n    }\n  }\n}\n\n/**\n * Adds a complexity to the complexity map for all possible types\n * @param complexity\n * @param complexityMap\n * @param possibleTypes\n */\nfunction addComplexities(\n  complexity: number,\n  complexityMap: ComplexityMap,\n  possibleTypes: string[],\n): ComplexityMap {\n  for (const type of possibleTypes) {\n    if (Object.prototype.hasOwnProperty.call(complexityMap, type)) {\n      complexityMap[type] += complexity\n    } else {\n      complexityMap[type] = complexity\n    }\n  }\n  return complexityMap\n}\n"],"names":["getNamedType","GraphQLError","GraphQLInterfaceType","GraphQLObjectType","isAbstractType","isCompositeType","Kind","TypeInfo","ValidationContext","visit","visitWithTypeInfo","getArgumentValues","getDirectiveValues","getVariableValues","queryComplexityMessage","max","actual","getComplexity","options","typeInfo","schema","errors","context","query","error","push","visitor","QueryComplexity","estimators","maximumComplexity","Infinity","operationName","variables","length","pop","complexity","includeDirectiveDef","OperationDefinition","requestContext","skipDirectiveDef","variableValues","constructor","Error","getSchema","getDirective","enter","onOperationDefinitionEnter","leave","onOperationDefinitionLeave","createError","nodeComplexity","node","typeDef","selectionSet","fields","getFields","possibleTypeNames","getPossibleTypes","map","t","name","selectionSetComplexities","selections","reduce","complexities","childNode","innerComplexities","includeNode","skipNode","directive","directives","directiveName","value","values","if","kind","FIELD","field","fieldType","type","args","e","reportError","childComplexity","estimatorArgs","validScore","find","estimator","tmpComplexity","isNaN","addComplexities","FRAGMENT_SPREAD","fragment","getFragment","fragmentType","getType","typeCondition","INLINE_FRAGMENT","inlineFragmentType","NaN","Math","Object","operation","coerced","variableDefinitions","forEach","getMutationType","getQueryType","getSubscriptionType","onComplete","complexityMap","possibleTypes","prototype","hasOwnProperty","call"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 280, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 286, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/packages/graphql-query-complexity/createComplexityRule.ts"],"sourcesContent":["import type { ValidationContext } from 'graphql'\n\nimport type { QueryComplexityOptions } from './QueryComplexity.js'\n\nimport { QueryComplexity } from './QueryComplexity.js'\n\nexport function createComplexityRule(\n  options: QueryComplexityOptions,\n): (context: ValidationContext) => QueryComplexity {\n  return (context: ValidationContext): QueryComplexity => {\n    return new QueryComplexity(context, options)\n  }\n}\n"],"names":["QueryComplexity","createComplexityRule","options","context"],"mappings":";;;AAIA,SAASA,eAAe,QAAQ,uBAAsB;;AAE/C,SAASC,qBACdC,OAA+B;IAE/B,OAAO,CAACC;QACN,OAAO,iaAAIH,kBAAAA,CAAgBG,SAASD;IACtC;AACF","ignoreList":[0]}},
    {"offset": {"line": 296, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 302, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/packages/graphql-query-complexity/estimators/fieldExtensions/index.ts"],"sourcesContent":["import type { ComplexityEstimator, ComplexityEstimatorArgs } from '../../QueryComplexity.js'\n\nexport const fieldExtensionsEstimator = (): ComplexityEstimator => {\n  return (args: ComplexityEstimatorArgs): number | void => {\n    if (args.field.extensions) {\n      // Calculate complexity score\n      if (typeof args.field.extensions.complexity === 'number') {\n        return args.childComplexity + args.field.extensions.complexity\n      } else if (typeof args.field.extensions.complexity === 'function') {\n        return args.field.extensions.complexity(args)\n      }\n    }\n  }\n}\n"],"names":["fieldExtensionsEstimator","args","field","extensions","complexity","childComplexity"],"mappings":";;;AAEO,MAAMA,2BAA2B;IACtC,OAAO,CAACC;QACN,IAAIA,KAAKC,KAAK,CAACC,UAAU,EAAE;YACzB,6BAA6B;YAC7B,IAAI,OAAOF,KAAKC,KAAK,CAACC,UAAU,CAACC,UAAU,KAAK,UAAU;gBACxD,OAAOH,KAAKI,eAAe,GAAGJ,KAAKC,KAAK,CAACC,UAAU,CAACC,UAAU;YAChE,OAAO,IAAI,OAAOH,KAAKC,KAAK,CAACC,UAAU,CAACC,UAAU,KAAK,YAAY;gBACjE,OAAOH,KAAKC,KAAK,CAACC,UAAU,CAACC,UAAU,CAACH;YAC1C;QACF;IACF;AACF,EAAC","ignoreList":[0]}},
    {"offset": {"line": 317, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 323, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/packages/graphql-query-complexity/estimators/simple/index.ts"],"sourcesContent":["import type { ComplexityEstimator, ComplexityEstimatorArgs } from '../../QueryComplexity.js'\n\nexport const simpleEstimator = (options?: { defaultComplexity?: number }): ComplexityEstimator => {\n  const defaultComplexity =\n    options && typeof options.defaultComplexity === 'number' ? options.defaultComplexity : 1\n  return (args: ComplexityEstimatorArgs): number | void => {\n    return defaultComplexity + args.childComplexity\n  }\n}\n"],"names":["simpleEstimator","options","defaultComplexity","args","childComplexity"],"mappings":";;;AAEO,MAAMA,kBAAkB,CAACC;IAC9B,MAAMC,oBACJD,WAAW,OAAOA,QAAQC,iBAAiB,KAAK,WAAWD,QAAQC,iBAAiB,GAAG;IACzF,OAAO,CAACC;QACN,OAAOD,oBAAoBC,KAAKC,eAAe;IACjD;AACF,EAAC","ignoreList":[0]}},
    {"offset": {"line": 332, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 338, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/packages/graphql-query-complexity/index.ts"],"sourcesContent":["export { createComplexityRule } from './createComplexityRule.js'\nexport { fieldExtensionsEstimator } from './estimators/fieldExtensions/index.js'\nexport { simpleEstimator } from './estimators/simple/index.js'\n"],"names":["createComplexityRule","fieldExtensionsEstimator","simpleEstimator"],"mappings":"","ignoreList":[0]}},
    {"offset": {"line": 343, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 360, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/utilities/formatName.ts"],"sourcesContent":["const numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n\nexport const formatName = (string: string): string => {\n  let sanitizedString = String(string)\n\n  const firstLetter = sanitizedString.substring(0, 1)\n\n  if (numbers.indexOf(firstLetter) > -1) {\n    sanitizedString = `_${sanitizedString}`\n  }\n\n  const formatted = sanitizedString\n    // Convert accented characters\n    .normalize('NFKD')\n    .replace(/[\\u0300-\\u036f]/g, '')\n\n    .replace(/\\./g, '_')\n    .replace(/-|\\//g, '_')\n    .replace(/\\+/g, '_')\n    .replace(/,/g, '_')\n    .replace(/\\(/g, '_')\n    .replace(/\\)/g, '_')\n    .replace(/'/g, '_')\n    .replace(/ /g, '')\n\n  return formatted || '_'\n}\n"],"names":["numbers","formatName","string","sanitizedString","String","firstLetter","substring","indexOf","formatted","normalize","replace"],"mappings":";;;AAAA,MAAMA,UAAU;IAAC;IAAK;IAAK;IAAK;IAAK;IAAK;IAAK;IAAK;IAAK;IAAK;CAAI;AAE3D,MAAMC,aAAa,CAACC;IACzB,IAAIC,kBAAkBC,OAAOF;IAE7B,MAAMG,cAAcF,gBAAgBG,SAAS,CAAC,GAAG;IAEjD,IAAIN,QAAQO,OAAO,CAACF,eAAe,CAAC,GAAG;QACrCF,kBAAkB,CAAC,CAAC,EAAEA,iBAAiB;IACzC;IAEA,MAAMK,YAAYL,gBAChB,8BAA8B;KAC7BM,SAAS,CAAC,QACVC,OAAO,CAAC,oBAAoB,IAE5BA,OAAO,CAAC,OAAO,KACfA,OAAO,CAAC,SAAS,KACjBA,OAAO,CAAC,OAAO,KACfA,OAAO,CAAC,MAAM,KACdA,OAAO,CAAC,OAAO,KACfA,OAAO,CAAC,OAAO,KACfA,OAAO,CAAC,MAAM,KACdA,OAAO,CAAC,MAAM;IAEjB,OAAOF,aAAa;AACtB,EAAC","ignoreList":[0]}},
    {"offset": {"line": 385, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 391, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/resolvers/auth/access.ts"],"sourcesContent":["import type { SanitizedConfig } from 'payload'\n\nimport { accessOperation, isolateObjectProperty } from 'payload'\n\nimport type { Context } from '../types.js'\n\nimport { formatName } from '../../utilities/formatName.js'\nconst formatConfigNames = (results, configs) => {\n  const formattedResults = { ...results }\n\n  configs.forEach(({ slug }) => {\n    const result = { ...(formattedResults[slug] || {}) }\n    delete formattedResults[slug]\n    formattedResults[formatName(slug)] = result\n  })\n\n  return formattedResults\n}\n\nexport function accessResolver(config: SanitizedConfig) {\n  async function resolver(_, args, context: Context) {\n    const options = {\n      req: isolateObjectProperty<any>(context.req, 'transactionID'),\n    }\n\n    const accessResults = await accessOperation(options)\n\n    return {\n      ...accessResults,\n      ...formatConfigNames(accessResults.collections, config.collections),\n      ...formatConfigNames(accessResults.globals, config.globals),\n    }\n  }\n\n  return resolver\n}\n"],"names":["accessOperation","isolateObjectProperty","formatName","formatConfigNames","results","configs","formattedResults","forEach","slug","result","accessResolver","config","resolver","_","args","context","options","req","accessResults","collections","globals"],"mappings":";;;AAMA,SAASE,UAAU,QAAQ,gCAA+B;AAJ1D,SAASF,eAAe,EAAEC,qBAAqB,QAAQ,UAAS;;;;AAKhE,MAAME,oBAAoB,CAACC,SAASC;IAClC,MAAMC,mBAAmB;QAAE,GAAGF,OAAO;IAAC;IAEtCC,QAAQE,OAAO,CAAC,CAAC,EAAEC,IAAI,EAAE;QACvB,MAAMC,SAAS;YAAE,GAAIH,gBAAgB,CAACE,KAAK,IAAI,CAAC,CAAC;QAAE;QACnD,OAAOF,gBAAgB,CAACE,KAAK;QAC7BF,gBAAgB,4XAACJ,aAAAA,EAAWM,MAAM,GAAGC;IACvC;IAEA,OAAOH;AACT;AAEO,SAASI,eAAeC,MAAuB;IACpD,eAAeC,SAASC,CAAC,EAAEC,IAAI,EAAEC,OAAgB;QAC/C,MAAMC,UAAU;YACdC,2bAAKhB,wBAAAA,EAA2Bc,QAAQE,GAAG,EAAE;QAC/C;QAEA,MAAMC,gBAAgB,kYAAMlB,kBAAAA,EAAgBgB;QAE5C,OAAO;YACL,GAAGE,aAAa;YAChB,GAAGf,kBAAkBe,cAAcC,WAAW,EAAER,OAAOQ,WAAW,CAAC;YACnE,GAAGhB,kBAAkBe,cAAcE,OAAO,EAAET,OAAOS,OAAO,CAAC;QAC7D;IACF;IAEA,OAAOR;AACT","ignoreList":[0]}},
    {"offset": {"line": 426, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 432, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/schema/buildFallbackLocaleInputType.ts"],"sourcesContent":["import type { SanitizedLocalizationConfig } from 'payload'\n\nimport { GraphQLEnumType } from 'graphql'\n\nimport { formatName } from '../utilities/formatName.js'\n\nexport const buildFallbackLocaleInputType = (\n  localization: SanitizedLocalizationConfig,\n): GraphQLEnumType => {\n  return new GraphQLEnumType({\n    name: 'FallbackLocaleInputType',\n    values: [...localization.localeCodes, 'none'].reduce(\n      (values, locale) => ({\n        ...values,\n        [formatName(locale)]: {\n          value: locale,\n        },\n      }),\n      {},\n    ),\n  })\n}\n"],"names":["GraphQLEnumType","formatName","buildFallbackLocaleInputType","localization","name","values","localeCodes","reduce","locale","value"],"mappings":";;;AAEA,SAASA,eAAe,QAAQ,UAAS;AAEzC,SAASC,UAAU,QAAQ,6BAA4B;;;AAEhD,MAAMC,+BAA+B,CAC1CC;IAEA,OAAO,4GAAIH,kBAAAA,CAAgB;QACzBI,MAAM;QACNC,QAAQ;eAAIF,aAAaG,WAAW;YAAE;SAAO,CAACC,MAAM,CAClD,CAACF,QAAQG,SAAY,CAAA;gBACnB,GAAGH,MAAM;gBACT,4XAACJ,aAAAA,EAAWO,QAAQ,EAAE;oBACpBC,OAAOD;gBACT;YACF,CAAA,GACA,CAAC;IAEL;AACF,EAAC","ignoreList":[0]}},
    {"offset": {"line": 453, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 459, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/schema/buildLocaleInputType.ts"],"sourcesContent":["import type { GraphQLScalarType } from 'graphql'\nimport type { SanitizedLocalizationConfig } from 'payload'\n\nimport { GraphQLEnumType } from 'graphql'\n\nimport { formatName } from '../utilities/formatName.js'\n\nexport const buildLocaleInputType = (\n  localization: SanitizedLocalizationConfig,\n): GraphQLEnumType | GraphQLScalarType => {\n  return new GraphQLEnumType({\n    name: 'LocaleInputType',\n    values: localization.localeCodes.reduce(\n      (values, locale) => ({\n        ...values,\n        [formatName(locale)]: {\n          value: locale,\n        },\n      }),\n      {},\n    ),\n  })\n}\n"],"names":["GraphQLEnumType","formatName","buildLocaleInputType","localization","name","values","localeCodes","reduce","locale","value"],"mappings":";;;AAGA,SAASA,eAAe,QAAQ,UAAS;AAEzC,SAASC,UAAU,QAAQ,6BAA4B;;;AAEhD,MAAMC,uBAAuB,CAClCC;IAEA,OAAO,4GAAIH,kBAAAA,CAAgB;QACzBI,MAAM;QACNC,QAAQF,aAAaG,WAAW,CAACC,MAAM,CACrC,CAACF,QAAQG,SAAY,CAAA;gBACnB,GAAGH,MAAM;gBACT,4XAACJ,aAAAA,EAAWO,QAAQ,EAAE;oBACpBC,OAAOD;gBACT;YACF,CAAA,GACA,CAAC;IAEL;AACF,EAAC","ignoreList":[0]}},
    {"offset": {"line": 477, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 483, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/packages/graphql-type-json/index.ts"],"sourcesContent":["import { GraphQLScalarType } from 'graphql'\nimport { Kind, print } from 'graphql/language/index.js'\n\nfunction identity(value) {\n  return value\n}\n\nfunction ensureObject(value) {\n  if (typeof value !== 'object' || value === null || Array.isArray(value)) {\n    throw new TypeError(`JSONObject cannot represent non-object value: ${value}`)\n  }\n\n  return value\n}\n\nfunction parseObject(typeName, ast, variables) {\n  const value = Object.create(null)\n  ast.fields.forEach((field) => {\n    value[field.name.value] = parseLiteral(typeName, field.value, variables)\n  })\n\n  return value\n}\n\nfunction parseLiteral(typeName, ast, variables) {\n  switch (ast.kind) {\n    case Kind.BOOLEAN:\n    case Kind.STRING:\n      return ast.value\n    case Kind.FLOAT:\n    case Kind.INT:\n      return parseFloat(ast.value)\n    case Kind.LIST:\n      return ast.values.map((n) => parseLiteral(typeName, n, variables))\n    case Kind.NULL:\n      return null\n    case Kind.OBJECT:\n      return parseObject(typeName, ast, variables)\n    case Kind.VARIABLE:\n      return variables ? variables[ast.name.value] : undefined\n    default:\n      throw new TypeError(`${typeName} cannot represent value: ${print(ast)}`)\n  }\n}\n\n// This named export is intended for users of CommonJS. Users of ES modules\n//  should instead use the default export.\nexport const GraphQLJSON = new GraphQLScalarType({\n  name: 'JSON',\n  description:\n    'The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).',\n  parseLiteral: (ast, variables) => parseLiteral('JSON', ast, variables),\n  parseValue: identity,\n  serialize: identity,\n  specifiedByURL: 'http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf',\n})\n\nexport const GraphQLJSONObject = new GraphQLScalarType({\n  name: 'JSONObject',\n  description:\n    'The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).',\n  parseLiteral: (ast, variables) => {\n    if (ast.kind !== Kind.OBJECT) {\n      throw new TypeError(`JSONObject cannot represent non-object value: ${print(ast)}`)\n    }\n\n    return parseObject('JSONObject', ast, variables)\n  },\n  parseValue: ensureObject,\n  serialize: ensureObject,\n  specifiedByURL: 'http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf',\n})\n"],"names":["GraphQLScalarType","Kind","print","identity","value","ensureObject","Array","isArray","TypeError","parseObject","typeName","ast","variables","Object","create","fields","forEach","field","name","parseLiteral","kind","BOOLEAN","STRING","FLOAT","INT","parseFloat","LIST","values","map","n","NULL","OBJECT","VARIABLE","undefined","GraphQLJSON","description","parseValue","serialize","specifiedByURL","GraphQLJSONObject"],"mappings":";;;;AAAA,SAASA,iBAAiB,QAAQ,UAAS;AAC3C,SAASC,IAAI,EAAEC,KAAK,QAAQ,4BAA2B;;;AAEvD,SAASC,SAASC,KAAK;IACrB,OAAOA;AACT;AAEA,SAASC,aAAaD,KAAK;IACzB,IAAI,OAAOA,UAAU,YAAYA,UAAU,QAAQE,MAAMC,OAAO,CAACH,QAAQ;QACvE,MAAM,IAAII,UAAU,CAAC,8CAA8C,EAAEJ,OAAO;IAC9E;IAEA,OAAOA;AACT;AAEA,SAASK,YAAYC,QAAQ,EAAEC,GAAG,EAAEC,SAAS;IAC3C,MAAMR,QAAQS,OAAOC,MAAM,CAAC;IAC5BH,IAAII,MAAM,CAACC,OAAO,CAAC,CAACC;QAClBb,KAAK,CAACa,MAAMC,IAAI,CAACd,KAAK,CAAC,GAAGe,aAAaT,UAAUO,MAAMb,KAAK,EAAEQ;IAChE;IAEA,OAAOR;AACT;AAEA,SAASe,aAAaT,QAAQ,EAAEC,GAAG,EAAEC,SAAS;IAC5C,OAAQD,IAAIS,IAAI;QACd,KAAKnB,qKAAAA,CAAKoB,OAAO;QACjB,mKAAKpB,OAAAA,CAAKqB,MAAM;YACd,OAAOX,IAAIP,KAAK;QAClB,KAAKH,qKAAAA,CAAKsB,KAAK;QACf,mKAAKtB,OAAAA,CAAKuB,GAAG;YACX,OAAOC,WAAWd,IAAIP,KAAK;QAC7B,mKAAKH,OAAAA,CAAKyB,IAAI;YACZ,OAAOf,IAAIgB,MAAM,CAACC,GAAG,CAAC,CAACC,IAAMV,aAAaT,UAAUmB,GAAGjB;QACzD,mKAAKX,OAAAA,CAAK6B,IAAI;YACZ,OAAO;QACT,mKAAK7B,OAAAA,CAAK8B,MAAM;YACd,OAAOtB,YAAYC,UAAUC,KAAKC;QACpC,mKAAKX,OAAAA,CAAK+B,QAAQ;YAChB,OAAOpB,YAAYA,SAAS,CAACD,IAAIO,IAAI,CAACd,KAAK,CAAC,GAAG6B;QACjD;YACE,MAAM,IAAIzB,UAAU,GAAGE,SAAS,yBAAyB,oKAAER,QAAAA,EAAMS,MAAM;IAC3E;AACF;AAIO,MAAMuB,cAAc,4GAAIlC,oBAAAA,CAAkB;IAC/CkB,MAAM;IACNiB,aACE;IACFhB,cAAc,CAACR,KAAKC,YAAcO,aAAa,QAAQR,KAAKC;IAC5DwB,YAAYjC;IACZkC,WAAWlC;IACXmC,gBAAgB;AAClB,GAAE;AAEK,MAAMC,oBAAoB,4GAAIvC,oBAAAA,CAAkB;IACrDkB,MAAM;IACNiB,aACE;IACFhB,cAAc,CAACR,KAAKC;QAClB,IAAID,IAAIS,IAAI,mKAAKnB,OAAAA,CAAK8B,MAAM,EAAE;YAC5B,MAAM,IAAIvB,UAAU,CAAC,8CAA8C,oKAAEN,QAAAA,EAAMS,MAAM;QACnF;QAEA,OAAOF,YAAY,cAAcE,KAAKC;IACxC;IACAwB,YAAY/B;IACZgC,WAAWhC;IACXiC,gBAAgB;AAClB,GAAE","ignoreList":[0]}},
    {"offset": {"line": 548, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 554, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/schema/buildPoliciesType.ts"],"sourcesContent":["import type {\n  CollectionConfig,\n  Field,\n  GlobalConfig,\n  SanitizedCollectionConfig,\n  SanitizedConfig,\n  SanitizedGlobalConfig,\n} from 'payload'\n\nimport { GraphQLBoolean, GraphQLNonNull, GraphQLObjectType } from 'graphql'\nimport { toWords } from 'payload'\n\nimport { GraphQLJSONObject } from '../packages/graphql-type-json/index.js'\nimport { formatName } from '../utilities/formatName.js'\n\ntype OperationType = 'create' | 'delete' | 'read' | 'readVersions' | 'unlock' | 'update'\n\ntype AccessScopes = 'docAccess' | undefined\n\ntype ObjectTypeFields = {\n  [key in 'fields' | OperationType]?: { type: GraphQLObjectType }\n}\n\nconst buildFields = (label, fieldsToBuild) =>\n  fieldsToBuild.reduce((builtFields, field) => {\n    const includeField = !field.hidden && field.type !== 'ui'\n    if (includeField) {\n      if (field.name) {\n        const fieldName = formatName(field.name)\n\n        const objectTypeFields: ObjectTypeFields = ['create', 'read', 'update', 'delete'].reduce(\n          (operations, operation) => {\n            const capitalizedOperation = operation.charAt(0).toUpperCase() + operation.slice(1)\n\n            return {\n              ...operations,\n              [operation]: {\n                type: new GraphQLObjectType({\n                  name: `${label}_${fieldName}_${capitalizedOperation}`,\n                  fields: {\n                    permission: {\n                      type: new GraphQLNonNull(GraphQLBoolean),\n                    },\n                  },\n                }),\n              },\n            }\n          },\n          {},\n        )\n\n        if (field.fields) {\n          objectTypeFields.fields = {\n            type: new GraphQLObjectType({\n              name: `${label}_${fieldName}_Fields`,\n              fields: buildFields(`${label}_${fieldName}`, field.fields),\n            }),\n          }\n        }\n\n        return {\n          ...builtFields,\n          [field.name]: {\n            type: new GraphQLObjectType({\n              name: `${label}_${fieldName}`,\n              fields: objectTypeFields,\n            }),\n          },\n        }\n      }\n\n      if (!field.name && field.fields) {\n        const subFields = buildFields(label, field.fields)\n\n        return {\n          ...builtFields,\n          ...subFields,\n        }\n      }\n\n      if (field.type === 'tabs') {\n        return field.tabs.reduce(\n          (fieldsWithTabFields, tab) => {\n            return {\n              ...fieldsWithTabFields,\n              ...buildFields(label, tab.fields),\n            }\n          },\n          { ...builtFields },\n        )\n      }\n    }\n    return builtFields\n  }, {})\n\ntype BuildEntityPolicy = {\n  entityFields: Field[]\n  name: string\n  operations: OperationType[]\n  scope: AccessScopes\n}\nexport const buildEntityPolicy = (args: BuildEntityPolicy) => {\n  const { name, entityFields, operations, scope } = args\n\n  const fieldsTypeName = toWords(`${name}-${scope || ''}-Fields`, true)\n  const fields = {\n    fields: {\n      type: new GraphQLObjectType({\n        name: fieldsTypeName,\n        fields: buildFields(fieldsTypeName, entityFields),\n      }),\n    },\n  }\n\n  operations.forEach((operation) => {\n    const operationTypeName = toWords(`${name}-${operation}-${scope || 'Access'}`, true)\n\n    fields[operation] = {\n      type: new GraphQLObjectType({\n        name: operationTypeName,\n        fields: {\n          permission: { type: new GraphQLNonNull(GraphQLBoolean) },\n          where: { type: GraphQLJSONObject },\n        },\n      }),\n    }\n  })\n\n  return fields\n}\n\ntype BuildPolicyType = {\n  scope?: AccessScopes\n  typeSuffix?: string\n} & (\n  | {\n      entity: CollectionConfig\n      type: 'collection'\n    }\n  | {\n      entity: GlobalConfig\n      type: 'global'\n    }\n)\nexport function buildPolicyType(args: BuildPolicyType): GraphQLObjectType {\n  const { type, entity, scope, typeSuffix } = args\n  const { slug, fields, graphQL, versions } = entity\n\n  let operations = []\n\n  if (graphQL === false) {\n    return null\n  }\n\n  if (type === 'collection') {\n    operations = ['create', 'read', 'update', 'delete']\n\n    if (\n      entity.auth &&\n      typeof entity.auth === 'object' &&\n      typeof entity.auth.maxLoginAttempts !== 'undefined' &&\n      entity.auth.maxLoginAttempts !== 0\n    ) {\n      operations.push('unlock')\n    }\n\n    if (versions) {\n      operations.push('readVersions')\n    }\n\n    const collectionTypeName = formatName(`${slug}${typeSuffix || ''}`)\n\n    return new GraphQLObjectType({\n      name: collectionTypeName,\n      fields: buildEntityPolicy({\n        name: slug,\n        entityFields: fields,\n        operations,\n        scope,\n      }),\n    })\n  }\n\n  // else create global type\n  operations = ['read', 'update']\n\n  if (entity.versions) {\n    operations.push('readVersions')\n  }\n\n  const globalTypeName = formatName(`${global?.graphQL?.name || slug}${typeSuffix || ''}`)\n\n  return new GraphQLObjectType({\n    name: globalTypeName,\n    fields: buildEntityPolicy({\n      name: entity.graphQL ? entity?.graphQL?.name || slug : slug,\n      entityFields: entity.fields,\n      operations,\n      scope,\n    }),\n  })\n}\n\nexport function buildPoliciesType(config: SanitizedConfig): GraphQLObjectType {\n  const fields = {\n    canAccessAdmin: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n    },\n  }\n\n  Object.values(config.collections).forEach((collection: SanitizedCollectionConfig) => {\n    if (collection.graphQL === false) {\n      return\n    }\n    const collectionPolicyType = buildPolicyType({\n      type: 'collection',\n      entity: collection,\n      typeSuffix: 'Access',\n    })\n\n    fields[formatName(collection.slug)] = {\n      type: collectionPolicyType,\n    }\n  })\n\n  Object.values(config.globals).forEach((global: SanitizedGlobalConfig) => {\n    if (global.graphQL === false) {\n      return\n    }\n    const globalPolicyType = buildPolicyType({\n      type: 'global',\n      entity: global,\n      typeSuffix: 'Access',\n    })\n\n    fields[formatName(global.slug)] = {\n      type: globalPolicyType,\n    }\n  })\n\n  return new GraphQLObjectType({\n    name: 'Access',\n    fields,\n  })\n}\n"],"names":["GraphQLBoolean","GraphQLNonNull","GraphQLObjectType","toWords","GraphQLJSONObject","formatName","buildFields","label","fieldsToBuild","reduce","builtFields","field","includeField","hidden","type","name","fieldName","objectTypeFields","operations","operation","capitalizedOperation","charAt","toUpperCase","slice","fields","permission","subFields","tabs","fieldsWithTabFields","tab","buildEntityPolicy","args","entityFields","scope","fieldsTypeName","forEach","operationTypeName","where","buildPolicyType","entity","typeSuffix","slug","graphQL","versions","auth","maxLoginAttempts","push","collectionTypeName","globalTypeName","global","buildPoliciesType","config","canAccessAdmin","Object","values","collections","collection","collectionPolicyType","globals","globalPolicyType"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 747, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 753, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/resolvers/auth/forgotPassword.ts"],"sourcesContent":["import type { Collection } from 'payload'\n\nimport { forgotPasswordOperation, isolateObjectProperty } from 'payload'\n\nimport type { Context } from '../types.js'\n\nexport function forgotPassword(collection: Collection): any {\n  async function resolver(_, args, context: Context) {\n    const options = {\n      collection,\n      data: {\n        email: args.email,\n        username: args.username,\n      },\n      disableEmail: args.disableEmail,\n      expiration: args.expiration,\n      req: isolateObjectProperty(context.req, 'transactionID'),\n    }\n\n    await forgotPasswordOperation(options)\n    return true\n  }\n\n  return resolver\n}\n"],"names":["forgotPasswordOperation","isolateObjectProperty","forgotPassword","collection","resolver","_","args","context","options","data","email","username","disableEmail","expiration","req"],"mappings":";;;AAEA,SAASA,uBAAuB,EAAEC,qBAAqB,QAAQ,UAAS;;;AAIjE,SAASC,eAAeC,UAAsB;IACnD,eAAeC,SAASC,CAAC,EAAEC,IAAI,EAAEC,OAAgB;QAC/C,MAAMC,UAAU;YACdL;YACAM,MAAM;gBACJC,OAAOJ,KAAKI,KAAK;gBACjBC,UAAUL,KAAKK,QAAQ;YACzB;YACAC,cAAcN,KAAKM,YAAY;YAC/BC,YAAYP,KAAKO,UAAU;YAC3BC,2bAAKb,wBAAAA,EAAsBM,QAAQO,GAAG,EAAE;QAC1C;QAEA,0YAAMd,0BAAAA,EAAwBQ;QAC9B,OAAO;IACT;IAEA,OAAOJ;AACT","ignoreList":[0]}},
    {"offset": {"line": 776, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 782, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/resolvers/auth/init.ts"],"sourcesContent":["import { initOperation, isolateObjectProperty } from 'payload'\n\nimport type { Context } from '../types.js'\n\nexport function init(collection: string) {\n  async function resolver(_, args, context: Context) {\n    const options = {\n      collection,\n      req: isolateObjectProperty(context.req, 'transactionID'),\n    }\n\n    return initOperation(options)\n  }\n\n  return resolver\n}\n"],"names":["initOperation","isolateObjectProperty","init","collection","resolver","_","args","context","options","req"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,qBAAqB,QAAQ,UAAS;;;AAIvD,SAASC,KAAKC,UAAkB;IACrC,eAAeC,SAASC,CAAC,EAAEC,IAAI,EAAEC,OAAgB;QAC/C,MAAMC,UAAU;YACdL;YACAM,2bAAKR,wBAAAA,EAAsBM,QAAQE,GAAG,EAAE;QAC1C;QAEA,iYAAOT,gBAAAA,EAAcQ;IACvB;IAEA,OAAOJ;AACT","ignoreList":[0]}},
    {"offset": {"line": 798, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 804, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/resolvers/auth/login.ts"],"sourcesContent":["import type { Collection } from 'payload'\n\nimport { generatePayloadCookie, isolateObjectProperty, loginOperation } from 'payload'\n\nimport type { Context } from '../types.js'\n\nexport function login(collection: Collection): any {\n  async function resolver(_, args, context: Context) {\n    const options = {\n      collection,\n      data: {\n        email: args.email,\n        password: args.password,\n        username: args.username,\n      },\n      depth: 0,\n      req: isolateObjectProperty(context.req, 'transactionID'),\n    }\n\n    const result = await loginOperation(options)\n    const cookie = generatePayloadCookie({\n      collectionAuthConfig: collection.config.auth,\n      cookiePrefix: context.req.payload.config.cookiePrefix,\n      token: result.token,\n    })\n\n    context.headers['Set-Cookie'] = cookie\n\n    if (collection.config.auth.removeTokenFromResponses) {\n      delete result.token\n    }\n\n    return result\n  }\n\n  return resolver\n}\n"],"names":["generatePayloadCookie","isolateObjectProperty","loginOperation","login","collection","resolver","_","args","context","options","data","email","password","username","depth","req","result","cookie","collectionAuthConfig","config","auth","cookiePrefix","payload","token","headers","removeTokenFromResponses"],"mappings":";;;AAEA,SAASA,qBAAqB,EAAEC,qBAAqB,EAAEC,cAAc,QAAQ,UAAS;;;;AAI/E,SAASC,MAAMC,UAAsB;IAC1C,eAAeC,SAASC,CAAC,EAAEC,IAAI,EAAEC,OAAgB;QAC/C,MAAMC,UAAU;YACdL;YACAM,MAAM;gBACJC,OAAOJ,KAAKI,KAAK;gBACjBC,UAAUL,KAAKK,QAAQ;gBACvBC,UAAUN,KAAKM,QAAQ;YACzB;YACAC,OAAO;YACPC,2bAAKd,wBAAAA,EAAsBO,QAAQO,GAAG,EAAE;QAC1C;QAEA,MAAMC,SAAS,iYAAMd,iBAAAA,EAAeO;QACpC,MAAMQ,wXAASjB,wBAAAA,EAAsB;YACnCkB,sBAAsBd,WAAWe,MAAM,CAACC,IAAI;YAC5CC,cAAcb,QAAQO,GAAG,CAACO,OAAO,CAACH,MAAM,CAACE,YAAY;YACrDE,OAAOP,OAAOO,KAAK;QACrB;QAEAf,QAAQgB,OAAO,CAAC,aAAa,GAAGP;QAEhC,IAAIb,WAAWe,MAAM,CAACC,IAAI,CAACK,wBAAwB,EAAE;YACnD,OAAOT,OAAOO,KAAK;QACrB;QAEA,OAAOP;IACT;IAEA,OAAOX;AACT","ignoreList":[0]}},
    {"offset": {"line": 837, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 843, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/resolvers/auth/logout.ts"],"sourcesContent":["import type { Collection } from 'payload'\n\nimport { generateExpiredPayloadCookie, isolateObjectProperty, logoutOperation } from 'payload'\n\nimport type { Context } from '../types.js'\n\nexport function logout(collection: Collection): any {\n  async function resolver(_, args, context: Context) {\n    const options = {\n      collection,\n      req: isolateObjectProperty(context.req, 'transactionID'),\n    }\n\n    const result = await logoutOperation(options)\n    const expiredCookie = generateExpiredPayloadCookie({\n      collectionAuthConfig: collection.config.auth,\n      config: context.req.payload.config,\n      cookiePrefix: context.req.payload.config.cookiePrefix,\n    })\n    context.headers['Set-Cookie'] = expiredCookie\n    return result\n  }\n\n  return resolver\n}\n"],"names":["generateExpiredPayloadCookie","isolateObjectProperty","logoutOperation","logout","collection","resolver","_","args","context","options","req","result","expiredCookie","collectionAuthConfig","config","auth","payload","cookiePrefix","headers"],"mappings":";;;AAEA,SAASA,4BAA4B,EAAEC,qBAAqB,EAAEC,eAAe,QAAQ,UAAS;;;;AAIvF,SAASC,OAAOC,UAAsB;IAC3C,eAAeC,SAASC,CAAC,EAAEC,IAAI,EAAEC,OAAgB;QAC/C,MAAMC,UAAU;YACdL;YACAM,KAAKT,8cAAAA,EAAsBO,QAAQE,GAAG,EAAE;QAC1C;QAEA,MAAMC,SAAS,kYAAMT,kBAAAA,EAAgBO;QACrC,MAAMG,iBAAgBZ,6YAAAA,EAA6B;YACjDa,sBAAsBT,WAAWU,MAAM,CAACC,IAAI;YAC5CD,QAAQN,QAAQE,GAAG,CAACM,OAAO,CAACF,MAAM;YAClCG,cAAcT,QAAQE,GAAG,CAACM,OAAO,CAACF,MAAM,CAACG,YAAY;QACvD;QACAT,QAAQU,OAAO,CAAC,aAAa,GAAGN;QAChC,OAAOD;IACT;IAEA,OAAON;AACT","ignoreList":[0]}},
    {"offset": {"line": 867, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 873, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/resolvers/auth/me.ts"],"sourcesContent":["import type { Collection } from 'payload'\n\nimport { extractJWT, isolateObjectProperty, meOperation } from 'payload'\n\nimport type { Context } from '../types.js'\n\nexport function me(collection: Collection): any {\n  async function resolver(_, args, context: Context) {\n    const currentToken = extractJWT(context.req)\n\n    const options = {\n      collection,\n      currentToken,\n      depth: 0,\n      req: isolateObjectProperty(context.req, 'transactionID'),\n    }\n\n    const result = await meOperation(options)\n\n    if (collection.config.auth.removeTokenFromResponses) {\n      delete result.token\n    }\n\n    return result\n  }\n\n  return resolver\n}\n"],"names":["extractJWT","isolateObjectProperty","meOperation","me","collection","resolver","_","args","context","currentToken","req","options","depth","result","config","auth","removeTokenFromResponses","token"],"mappings":";;;AAEA,SAASA,UAAU,EAAEC,qBAAqB,EAAEC,WAAW,QAAQ,UAAS;;;;AAIjE,SAASC,GAAGC,UAAsB;IACvC,eAAeC,SAASC,CAAC,EAAEC,IAAI,EAAEC,OAAgB;QAC/C,MAAMC,gBAAeT,8XAAAA,EAAWQ,QAAQE,GAAG;QAE3C,MAAMC,UAAU;YACdP;YACAK;YACAG,OAAO;YACPF,2bAAKT,wBAAAA,EAAsBO,QAAQE,GAAG,EAAE;QAC1C;QAEA,MAAMG,SAAS,8XAAMX,cAAAA,EAAYS;QAEjC,IAAIP,WAAWU,MAAM,CAACC,IAAI,CAACC,wBAAwB,EAAE;YACnD,OAAOH,OAAOI,KAAK;QACrB;QAEA,OAAOJ;IACT;IAEA,OAAOR;AACT","ignoreList":[0]}},
    {"offset": {"line": 897, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 903, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/resolvers/auth/refresh.ts"],"sourcesContent":["import type { Collection } from 'payload'\n\nimport { generatePayloadCookie, isolateObjectProperty, refreshOperation } from 'payload'\n\nimport type { Context } from '../types.js'\n\nexport function refresh(collection: Collection): any {\n  async function resolver(_, __, context: Context) {\n    const options = {\n      collection,\n      depth: 0,\n      req: isolateObjectProperty(context.req, 'transactionID'),\n    }\n\n    const result = await refreshOperation(options)\n    const cookie = generatePayloadCookie({\n      collectionAuthConfig: collection.config.auth,\n      cookiePrefix: context.req.payload.config.cookiePrefix,\n      token: result.refreshedToken,\n    })\n    context.headers['Set-Cookie'] = cookie\n\n    if (collection.config.auth.removeTokenFromResponses) {\n      delete result.refreshedToken\n    }\n\n    return result\n  }\n\n  return resolver\n}\n"],"names":["generatePayloadCookie","isolateObjectProperty","refreshOperation","refresh","collection","resolver","_","__","context","options","depth","req","result","cookie","collectionAuthConfig","config","auth","cookiePrefix","payload","token","refreshedToken","headers","removeTokenFromResponses"],"mappings":";;;AAEA,SAASA,qBAAqB,EAAEC,qBAAqB,EAAEC,gBAAgB,QAAQ,UAAS;;;;AAIjF,SAASC,QAAQC,UAAsB;IAC5C,eAAeC,SAASC,CAAC,EAAEC,EAAE,EAAEC,OAAgB;QAC7C,MAAMC,UAAU;YACdL;YACAM,OAAO;YACPC,2bAAKV,wBAAAA,EAAsBO,QAAQG,GAAG,EAAE;QAC1C;QAEA,MAAMC,SAAS,mYAAMV,mBAAAA,EAAiBO;QACtC,MAAMI,wXAASb,wBAAAA,EAAsB;YACnCc,sBAAsBV,WAAWW,MAAM,CAACC,IAAI;YAC5CC,cAAcT,QAAQG,GAAG,CAACO,OAAO,CAACH,MAAM,CAACE,YAAY;YACrDE,OAAOP,OAAOQ,cAAc;QAC9B;QACAZ,QAAQa,OAAO,CAAC,aAAa,GAAGR;QAEhC,IAAIT,WAAWW,MAAM,CAACC,IAAI,CAACM,wBAAwB,EAAE;YACnD,OAAOV,OAAOQ,cAAc;QAC9B;QAEA,OAAOR;IACT;IAEA,OAAOP;AACT","ignoreList":[0]}},
    {"offset": {"line": 931, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 937, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/resolvers/auth/resetPassword.ts"],"sourcesContent":["import type { Collection } from 'payload'\n\nimport { generatePayloadCookie, isolateObjectProperty, resetPasswordOperation } from 'payload'\n\nimport type { Context } from '../types.js'\n\nexport function resetPassword(collection: Collection): any {\n  async function resolver(_, args, context: Context) {\n    if (args.locale) {\n      context.req.locale = args.locale\n    }\n    if (args.fallbackLocale) {\n      context.req.fallbackLocale = args.fallbackLocale\n    }\n\n    const options = {\n      api: 'GraphQL',\n      collection,\n      data: args,\n      depth: 0,\n      req: isolateObjectProperty(context.req, 'transactionID'),\n    }\n\n    const result = await resetPasswordOperation(options)\n    const cookie = generatePayloadCookie({\n      collectionAuthConfig: collection.config.auth,\n      cookiePrefix: context.req.payload.config.cookiePrefix,\n      token: result.token,\n    })\n    context.headers['Set-Cookie'] = cookie\n\n    if (collection.config.auth.removeTokenFromResponses) {\n      delete result.token\n    }\n\n    return result\n  }\n\n  return resolver\n}\n"],"names":["generatePayloadCookie","isolateObjectProperty","resetPasswordOperation","resetPassword","collection","resolver","_","args","context","locale","req","fallbackLocale","options","api","data","depth","result","cookie","collectionAuthConfig","config","auth","cookiePrefix","payload","token","headers","removeTokenFromResponses"],"mappings":";;;AAEA,SAASA,qBAAqB,EAAEC,qBAAqB,EAAEC,sBAAsB,QAAQ,UAAS;;;;AAIvF,SAASC,cAAcC,UAAsB;IAClD,eAAeC,SAASC,CAAC,EAAEC,IAAI,EAAEC,OAAgB;QAC/C,IAAID,KAAKE,MAAM,EAAE;YACfD,QAAQE,GAAG,CAACD,MAAM,GAAGF,KAAKE,MAAM;QAClC;QACA,IAAIF,KAAKI,cAAc,EAAE;YACvBH,QAAQE,GAAG,CAACC,cAAc,GAAGJ,KAAKI,cAAc;QAClD;QAEA,MAAMC,UAAU;YACdC,KAAK;YACLT;YACAU,MAAMP;YACNQ,OAAO;YACPL,2bAAKT,wBAAAA,EAAsBO,QAAQE,GAAG,EAAE;QAC1C;QAEA,MAAMM,SAAS,yYAAMd,yBAAAA,EAAuBU;QAC5C,MAAMK,wXAASjB,wBAAAA,EAAsB;YACnCkB,sBAAsBd,WAAWe,MAAM,CAACC,IAAI;YAC5CC,cAAcb,QAAQE,GAAG,CAACY,OAAO,CAACH,MAAM,CAACE,YAAY;YACrDE,OAAOP,OAAOO,KAAK;QACrB;QACAf,QAAQgB,OAAO,CAAC,aAAa,GAAGP;QAEhC,IAAIb,WAAWe,MAAM,CAACC,IAAI,CAACK,wBAAwB,EAAE;YACnD,OAAOT,OAAOO,KAAK;QACrB;QAEA,OAAOP;IACT;IAEA,OAAOX;AACT","ignoreList":[0]}},
    {"offset": {"line": 973, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 979, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/resolvers/auth/unlock.ts"],"sourcesContent":["import type { Collection } from 'payload'\n\nimport { isolateObjectProperty, unlockOperation } from 'payload'\n\nimport type { Context } from '../types.js'\n\nexport function unlock(collection: Collection) {\n  async function resolver(_, args, context: Context) {\n    const options = {\n      collection,\n      data: { email: args.email, username: args.username },\n      req: isolateObjectProperty(context.req, 'transactionID'),\n    }\n\n    const result = await unlockOperation(options)\n    return result\n  }\n\n  return resolver\n}\n"],"names":["isolateObjectProperty","unlockOperation","unlock","collection","resolver","_","args","context","options","data","email","username","req","result"],"mappings":";;;AAEA,SAASA,qBAAqB,EAAEC,eAAe,QAAQ,UAAS;;;AAIzD,SAASC,OAAOC,UAAsB;IAC3C,eAAeC,SAASC,CAAC,EAAEC,IAAI,EAAEC,OAAgB;QAC/C,MAAMC,UAAU;YACdL;YACAM,MAAM;gBAAEC,OAAOJ,KAAKI,KAAK;gBAAEC,UAAUL,KAAKK,QAAQ;YAAC;YACnDC,2bAAKZ,wBAAAA,EAAsBO,QAAQK,GAAG,EAAE;QAC1C;QAEA,MAAMC,SAAS,kYAAMZ,kBAAAA,EAAgBO;QACrC,OAAOK;IACT;IAEA,OAAOT;AACT","ignoreList":[0]}},
    {"offset": {"line": 1000, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1006, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/resolvers/auth/verifyEmail.ts"],"sourcesContent":["import type { Collection } from 'payload'\n\nimport { isolateObjectProperty, verifyEmailOperation } from 'payload'\n\nimport type { Context } from '../types.js'\n\nexport function verifyEmail(collection: Collection) {\n  async function resolver(_, args, context: Context) {\n    if (args.locale) {\n      context.req.locale = args.locale\n    }\n    if (args.fallbackLocale) {\n      context.req.fallbackLocale = args.fallbackLocale\n    }\n\n    const options = {\n      api: 'GraphQL',\n      collection,\n      req: isolateObjectProperty(context.req, 'transactionID'),\n      token: args.token,\n    }\n\n    const success = await verifyEmailOperation(options)\n    return success\n  }\n\n  return resolver\n}\n"],"names":["isolateObjectProperty","verifyEmailOperation","verifyEmail","collection","resolver","_","args","context","locale","req","fallbackLocale","options","api","token","success"],"mappings":";;;AAEA,SAASA,qBAAqB,EAAEC,oBAAoB,QAAQ,UAAS;;;AAI9D,SAASC,YAAYC,UAAsB;IAChD,eAAeC,SAASC,CAAC,EAAEC,IAAI,EAAEC,OAAgB;QAC/C,IAAID,KAAKE,MAAM,EAAE;YACfD,QAAQE,GAAG,CAACD,MAAM,GAAGF,KAAKE,MAAM;QAClC;QACA,IAAIF,KAAKI,cAAc,EAAE;YACvBH,QAAQE,GAAG,CAACC,cAAc,GAAGJ,KAAKI,cAAc;QAClD;QAEA,MAAMC,UAAU;YACdC,KAAK;YACLT;YACAM,2bAAKT,wBAAAA,EAAsBO,QAAQE,GAAG,EAAE;YACxCI,OAAOP,KAAKO,KAAK;QACnB;QAEA,MAAMC,UAAU,uYAAMb,uBAAAA,EAAqBU;QAC3C,OAAOG;IACT;IAEA,OAAOV;AACT","ignoreList":[0]}},
    {"offset": {"line": 1031, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1037, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/resolvers/collections/count.ts"],"sourcesContent":["import type { Collection, PayloadRequest, Where } from 'payload'\n\nimport { countOperation, isolateObjectProperty } from 'payload'\n\nimport type { Context } from '../types.js'\n\nexport type Resolver = (\n  _: unknown,\n  args: {\n    data: Record<string, unknown>\n    locale?: string\n    where?: Where\n  },\n  context: {\n    req: PayloadRequest\n  },\n) => Promise<{ totalDocs: number }>\n\nexport function countResolver(collection: Collection): Resolver {\n  return async function resolver(_, args, context: Context) {\n    let { req } = context\n    const locale = req.locale\n    const fallbackLocale = req.fallbackLocale\n    req = isolateObjectProperty(req, 'locale')\n    req = isolateObjectProperty(req, 'fallbackLocale')\n    req.locale = args.locale || locale\n    req.fallbackLocale = fallbackLocale\n    context.req = req\n\n    const options = {\n      collection,\n      req: isolateObjectProperty(req, 'transactionID'),\n      where: args.where,\n    }\n\n    const results = await countOperation(options)\n    return results\n  }\n}\n"],"names":["countOperation","isolateObjectProperty","countResolver","collection","resolver","_","args","context","req","locale","fallbackLocale","options","where","results"],"mappings":";;;AAEA,SAASA,cAAc,EAAEC,qBAAqB,QAAQ,UAAS;;;AAgBxD,SAASC,cAAcC,UAAsB;IAClD,OAAO,eAAeC,SAASC,CAAC,EAAEC,IAAI,EAAEC,OAAgB;QACtD,IAAI,EAAEC,GAAG,EAAE,GAAGD;QACd,MAAME,SAASD,IAAIC,MAAM;QACzB,MAAMC,iBAAiBF,IAAIE,cAAc;QACzCF,4bAAMP,wBAAAA,EAAsBO,KAAK;QACjCA,4bAAMP,wBAAAA,EAAsBO,KAAK;QACjCA,IAAIC,MAAM,GAAGH,KAAKG,MAAM,IAAIA;QAC5BD,IAAIE,cAAc,GAAGA;QACrBH,QAAQC,GAAG,GAAGA;QAEd,MAAMG,UAAU;YACdR;YACAK,2bAAKP,wBAAAA,EAAsBO,KAAK;YAChCI,OAAON,KAAKM,KAAK;QACnB;QAEA,MAAMC,UAAU,wYAAMb,iBAAAA,EAAeW;QACrC,OAAOE;IACT;AACF","ignoreList":[0]}},
    {"offset": {"line": 1062, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1068, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/resolvers/collections/create.ts"],"sourcesContent":["import type {\n  Collection,\n  CollectionSlug,\n  DataFromCollectionSlug,\n  PayloadRequest,\n  RequiredDataFromCollectionSlug,\n} from 'payload'\n\nimport { createOperation, isolateObjectProperty } from 'payload'\n\nimport type { Context } from '../types.js'\n\nexport type Resolver<TSlug extends CollectionSlug> = (\n  _: unknown,\n  args: {\n    data: RequiredDataFromCollectionSlug<TSlug>\n    draft: boolean\n    locale?: string\n  },\n  context: {\n    req: PayloadRequest\n  },\n) => Promise<DataFromCollectionSlug<TSlug>>\n\nexport function createResolver<TSlug extends CollectionSlug>(\n  collection: Collection,\n): Resolver<TSlug> {\n  return async function resolver(_, args, context: Context) {\n    if (args.locale) {\n      context.req.locale = args.locale\n    }\n\n    const result = await createOperation({\n      collection,\n      data: args.data,\n      depth: 0,\n      draft: args.draft,\n      req: isolateObjectProperty(context.req, 'transactionID'),\n    })\n\n    return result\n  }\n}\n"],"names":["createOperation","isolateObjectProperty","createResolver","collection","resolver","_","args","context","locale","req","result","data","depth","draft"],"mappings":";;;AAQA,SAASA,eAAe,EAAEC,qBAAqB,QAAQ,UAAS;;;AAgBzD,SAASC,eACdC,UAAsB;IAEtB,OAAO,eAAeC,SAASC,CAAC,EAAEC,IAAI,EAAEC,OAAgB;QACtD,IAAID,KAAKE,MAAM,EAAE;YACfD,QAAQE,GAAG,CAACD,MAAM,GAAGF,KAAKE,MAAM;QAClC;QAEA,MAAME,SAAS,OAAMV,oZAAAA,EAAgB;YACnCG;YACAQ,MAAML,KAAKK,IAAI;YACfC,OAAO;YACPC,OAAOP,KAAKO,KAAK;YACjBJ,2bAAKR,wBAAAA,EAAsBM,QAAQE,GAAG,EAAE;QAC1C;QAEA,OAAOC;IACT;AACF","ignoreList":[0]}},
    {"offset": {"line": 1089, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1095, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/resolvers/collections/delete.ts"],"sourcesContent":["import type { Collection, CollectionSlug, DataFromCollectionSlug, PayloadRequest } from 'payload'\n\nimport { deleteByIDOperation, isolateObjectProperty } from 'payload'\n\nimport type { Context } from '../types.js'\n\nexport type Resolver<TSlug extends CollectionSlug> = (\n  _: unknown,\n  args: {\n    draft: boolean\n    fallbackLocale?: string\n    id: number | string\n    locale?: string\n  },\n  context: {\n    req: PayloadRequest\n  },\n) => Promise<DataFromCollectionSlug<TSlug>>\n\nexport function getDeleteResolver<TSlug extends CollectionSlug>(\n  collection: Collection,\n): Resolver<TSlug> {\n  return async function resolver(_, args, context: Context) {\n    let { req } = context\n    const locale = req.locale\n    const fallbackLocale = req.fallbackLocale\n    req = isolateObjectProperty(req, 'locale')\n    req = isolateObjectProperty(req, 'fallbackLocale')\n    req.locale = args.locale || locale\n    req.fallbackLocale = args.fallbackLocale || fallbackLocale\n    if (!req.query) {\n      req.query = {}\n    }\n\n    const draft: boolean =\n      (args.draft ?? req.query?.draft === 'false')\n        ? false\n        : req.query?.draft === 'true'\n          ? true\n          : undefined\n    if (typeof draft === 'boolean') {\n      req.query.draft = String(draft)\n    }\n\n    context.req = req\n\n    const options = {\n      id: args.id,\n      collection,\n      depth: 0,\n      req: isolateObjectProperty(req, 'transactionID'),\n    }\n\n    const result = await deleteByIDOperation(options)\n\n    return result\n  }\n}\n"],"names":["deleteByIDOperation","isolateObjectProperty","getDeleteResolver","collection","resolver","_","args","context","req","locale","fallbackLocale","query","draft","undefined","String","options","id","depth","result"],"mappings":";;;AAEA,SAASA,mBAAmB,EAAEC,qBAAqB,QAAQ,UAAS;;;AAiB7D,SAASC,kBACdC,UAAsB;IAEtB,OAAO,eAAeC,SAASC,CAAC,EAAEC,IAAI,EAAEC,OAAgB;QACtD,IAAI,EAAEC,GAAG,EAAE,GAAGD;QACd,MAAME,SAASD,IAAIC,MAAM;QACzB,MAAMC,iBAAiBF,IAAIE,cAAc;QACzCF,4bAAMP,wBAAAA,EAAsBO,KAAK;QACjCA,OAAMP,6cAAAA,EAAsBO,KAAK;QACjCA,IAAIC,MAAM,GAAGH,KAAKG,MAAM,IAAIA;QAC5BD,IAAIE,cAAc,GAAGJ,KAAKI,cAAc,IAAIA;QAC5C,IAAI,CAACF,IAAIG,KAAK,EAAE;YACdH,IAAIG,KAAK,GAAG,CAAC;QACf;QAEA,MAAMC,QACHN,KAAKM,KAAK,IAAIJ,IAAIG,KAAK,EAAEC,UAAU,UAChC,QACAJ,IAAIG,KAAK,EAAEC,UAAU,SACnB,OACAC;QACR,IAAI,OAAOD,UAAU,WAAW;YAC9BJ,IAAIG,KAAK,CAACC,KAAK,GAAGE,OAAOF;QAC3B;QAEAL,QAAQC,GAAG,GAAGA;QAEd,MAAMO,UAAU;YACdC,IAAIV,KAAKU,EAAE;YACXb;YACAc,OAAO;YACPT,2bAAKP,wBAAAA,EAAsBO,KAAK;QAClC;QAEA,MAAMU,SAAS,6YAAMlB,sBAAAA,EAAoBe;QAEzC,OAAOG;IACT;AACF","ignoreList":[0]}},
    {"offset": {"line": 1128, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1134, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/resolvers/collections/docAccess.ts"],"sourcesContent":["import type {\n  Collection,\n  PayloadRequest,\n  SanitizedCollectionPermission,\n  SanitizedGlobalPermission,\n} from 'payload'\n\nimport { docAccessOperation, isolateObjectProperty } from 'payload'\n\nimport type { Context } from '../types.js'\n\nexport type Resolver = (\n  _: unknown,\n  args: {\n    id: number | string\n  },\n  context: {\n    req: PayloadRequest\n  },\n) => Promise<SanitizedCollectionPermission | SanitizedGlobalPermission>\n\nexport function docAccessResolver(collection: Collection): Resolver {\n  async function resolver(_, args, context: Context) {\n    return docAccessOperation({\n      id: args.id,\n      collection,\n      req: isolateObjectProperty(context.req, 'transactionID'),\n    })\n  }\n\n  return resolver\n}\n"],"names":["docAccessOperation","isolateObjectProperty","docAccessResolver","collection","resolver","_","args","context","id","req"],"mappings":";;;AAOA,SAASA,kBAAkB,EAAEC,qBAAqB,QAAQ,UAAS;;;AAc5D,SAASC,kBAAkBC,UAAsB;IACtD,eAAeC,SAASC,CAAC,EAAEC,IAAI,EAAEC,OAAgB;QAC/C,6YAAOP,qBAAAA,EAAmB;YACxBQ,IAAIF,KAAKE,EAAE;YACXL;YACAM,2bAAKR,wBAAAA,EAAsBM,QAAQE,GAAG,EAAE;QAC1C;IACF;IAEA,OAAOL;AACT","ignoreList":[0]}},
    {"offset": {"line": 1150, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1156, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/resolvers/collections/duplicate.ts"],"sourcesContent":["import type { Collection, CollectionSlug, DataFromCollectionSlug, PayloadRequest } from 'payload'\n\nimport { duplicateOperation, isolateObjectProperty } from 'payload'\n\nimport type { Context } from '../types.js'\n\nexport type Resolver<TData> = (\n  _: unknown,\n  args: {\n    data: TData\n    draft: boolean\n    fallbackLocale?: string\n    id: string\n    locale?: string\n  },\n  context: {\n    req: PayloadRequest\n  },\n) => Promise<TData>\n\nexport function duplicateResolver<TSlug extends CollectionSlug>(\n  collection: Collection,\n): Resolver<DataFromCollectionSlug<TSlug>> {\n  return async function resolver(_, args, context: Context) {\n    const { req } = context\n    const locale = req.locale\n    const fallbackLocale = req.fallbackLocale\n    req.locale = args.locale || locale\n    req.fallbackLocale = args.fallbackLocale || fallbackLocale\n    context.req = req\n\n    const result = await duplicateOperation({\n      id: args.id,\n      collection,\n      data: args.data,\n      depth: 0,\n      draft: args.draft,\n      req: isolateObjectProperty(req, 'transactionID'),\n    })\n\n    return result\n  }\n}\n"],"names":["duplicateOperation","isolateObjectProperty","duplicateResolver","collection","resolver","_","args","context","req","locale","fallbackLocale","result","id","data","depth","draft"],"mappings":";;;AAEA,SAASA,kBAAkB,EAAEC,qBAAqB,QAAQ,UAAS;;;AAkB5D,SAASC,kBACdC,UAAsB;IAEtB,OAAO,eAAeC,SAASC,CAAC,EAAEC,IAAI,EAAEC,OAAgB;QACtD,MAAM,EAAEC,GAAG,EAAE,GAAGD;QAChB,MAAME,SAASD,IAAIC,MAAM;QACzB,MAAMC,iBAAiBF,IAAIE,cAAc;QACzCF,IAAIC,MAAM,GAAGH,KAAKG,MAAM,IAAIA;QAC5BD,IAAIE,cAAc,GAAGJ,KAAKI,cAAc,IAAIA;QAC5CH,QAAQC,GAAG,GAAGA;QAEd,MAAMG,SAAS,4YAAMX,qBAAAA,EAAmB;YACtCY,IAAIN,KAAKM,EAAE;YACXT;YACAU,MAAMP,KAAKO,IAAI;YACfC,OAAO;YACPC,OAAOT,KAAKS,KAAK;YACjBP,2bAAKP,wBAAAA,EAAsBO,KAAK;QAClC;QAEA,OAAOG;IACT;AACF","ignoreList":[0]}},
    {"offset": {"line": 1181, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1187, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/resolvers/collections/find.ts"],"sourcesContent":["import type { Collection, PaginatedDocs, PayloadRequest, Where } from 'payload'\n\nimport { findOperation, isolateObjectProperty } from 'payload'\n\nimport type { Context } from '../types.js'\n\nexport type Resolver = (\n  _: unknown,\n  args: {\n    data: Record<string, unknown>\n    draft: boolean\n    fallbackLocale?: string\n    limit?: number\n    locale?: string\n    page?: number\n    pagination?: boolean\n    sort?: string\n    where?: Where\n  },\n  context: {\n    req: PayloadRequest\n  },\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n) => Promise<PaginatedDocs<any>>\n\nexport function findResolver(collection: Collection): Resolver {\n  return async function resolver(_, args, context: Context) {\n    let { req } = context\n    const locale = req.locale\n    const fallbackLocale = req.fallbackLocale\n\n    req = isolateObjectProperty(req, ['locale', 'fallbackLocale', 'transactionID'])\n    req.locale = args.locale || locale\n    req.fallbackLocale = args.fallbackLocale || fallbackLocale\n    if (!req.query) {\n      req.query = {}\n    }\n\n    const draft: boolean =\n      (args.draft ?? req.query?.draft === 'false')\n        ? false\n        : req.query?.draft === 'true'\n          ? true\n          : undefined\n    if (typeof draft === 'boolean') {\n      req.query.draft = String(draft)\n    }\n\n    context.req = req\n\n    const options = {\n      collection,\n      depth: 0,\n      draft: args.draft,\n      limit: args.limit,\n      page: args.page,\n      pagination: args.pagination,\n      req,\n      sort: args.sort,\n      where: args.where,\n    }\n\n    const results = await findOperation(options)\n    return results\n  }\n}\n"],"names":["findOperation","isolateObjectProperty","findResolver","collection","resolver","_","args","context","req","locale","fallbackLocale","query","draft","undefined","String","options","depth","limit","page","pagination","sort","where","results"],"mappings":";;;AAEA,SAASA,aAAa,EAAEC,qBAAqB,QAAQ,UAAS;;;AAuBvD,SAASC,aAAaC,UAAsB;IACjD,OAAO,eAAeC,SAASC,CAAC,EAAEC,IAAI,EAAEC,OAAgB;QACtD,IAAI,EAAEC,GAAG,EAAE,GAAGD;QACd,MAAME,SAASD,IAAIC,MAAM;QACzB,MAAMC,iBAAiBF,IAAIE,cAAc;QAEzCF,4bAAMP,wBAAAA,EAAsBO,KAAK;YAAC;YAAU;YAAkB;SAAgB;QAC9EA,IAAIC,MAAM,GAAGH,KAAKG,MAAM,IAAIA;QAC5BD,IAAIE,cAAc,GAAGJ,KAAKI,cAAc,IAAIA;QAC5C,IAAI,CAACF,IAAIG,KAAK,EAAE;YACdH,IAAIG,KAAK,GAAG,CAAC;QACf;QAEA,MAAMC,QACHN,KAAKM,KAAK,IAAIJ,IAAIG,KAAK,EAAEC,UAAU,UAChC,QACAJ,IAAIG,KAAK,EAAEC,UAAU,SACnB,OACAC;QACR,IAAI,OAAOD,UAAU,WAAW;YAC9BJ,IAAIG,KAAK,CAACC,KAAK,GAAGE,OAAOF;QAC3B;QAEAL,QAAQC,GAAG,GAAGA;QAEd,MAAMO,UAAU;YACdZ;YACAa,OAAO;YACPJ,OAAON,KAAKM,KAAK;YACjBK,OAAOX,KAAKW,KAAK;YACjBC,MAAMZ,KAAKY,IAAI;YACfC,YAAYb,KAAKa,UAAU;YAC3BX;YACAY,MAAMd,KAAKc,IAAI;YACfC,OAAOf,KAAKe,KAAK;QACnB;QAEA,MAAMC,UAAU,uYAAMtB,gBAAAA,EAAce;QACpC,OAAOO;IACT;AACF","ignoreList":[0]}},
    {"offset": {"line": 1228, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1234, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/resolvers/collections/findByID.ts"],"sourcesContent":["import type { Collection, CollectionSlug, DataFromCollectionSlug, PayloadRequest } from 'payload'\n\nimport { findByIDOperation, isolateObjectProperty } from 'payload'\n\nimport type { Context } from '../types.js'\n\nexport type Resolver<TData> = (\n  _: unknown,\n  args: {\n    draft: boolean\n    fallbackLocale?: string\n    id: string\n    locale?: string\n  },\n  context: {\n    req: PayloadRequest\n  },\n) => Promise<TData>\n\nexport function findByIDResolver<TSlug extends CollectionSlug>(\n  collection: Collection,\n): Resolver<DataFromCollectionSlug<TSlug>> {\n  return async function resolver(_, args, context: Context) {\n    let { req } = context\n    const locale = req.locale\n    const fallbackLocale = req.fallbackLocale\n    req = isolateObjectProperty(req, 'locale')\n    req = isolateObjectProperty(req, 'fallbackLocale')\n    req.locale = args.locale || locale\n    req.fallbackLocale = args.fallbackLocale || fallbackLocale\n    if (!req.query) {\n      req.query = {}\n    }\n\n    const draft: boolean =\n      (args.draft ?? req.query?.draft === 'false')\n        ? false\n        : req.query?.draft === 'true'\n          ? true\n          : undefined\n    if (typeof draft === 'boolean') {\n      req.query.draft = String(draft)\n    }\n\n    context.req = req\n\n    const options = {\n      id: args.id,\n      collection,\n      depth: 0,\n      draft: args.draft,\n      req: isolateObjectProperty(req, 'transactionID'),\n    }\n\n    const result = await findByIDOperation(options)\n\n    return result\n  }\n}\n"],"names":["findByIDOperation","isolateObjectProperty","findByIDResolver","collection","resolver","_","args","context","req","locale","fallbackLocale","query","draft","undefined","String","options","id","depth","result"],"mappings":";;;AAEA,SAASA,iBAAiB,EAAEC,qBAAqB,QAAQ,UAAS;;;AAiB3D,SAASC,iBACdC,UAAsB;IAEtB,OAAO,eAAeC,SAASC,CAAC,EAAEC,IAAI,EAAEC,OAAgB;QACtD,IAAI,EAAEC,GAAG,EAAE,GAAGD;QACd,MAAME,SAASD,IAAIC,MAAM;QACzB,MAAMC,iBAAiBF,IAAIE,cAAc;QACzCF,4bAAMP,wBAAAA,EAAsBO,KAAK;QACjCA,OAAMP,6cAAAA,EAAsBO,KAAK;QACjCA,IAAIC,MAAM,GAAGH,KAAKG,MAAM,IAAIA;QAC5BD,IAAIE,cAAc,GAAGJ,KAAKI,cAAc,IAAIA;QAC5C,IAAI,CAACF,IAAIG,KAAK,EAAE;YACdH,IAAIG,KAAK,GAAG,CAAC;QACf;QAEA,MAAMC,QACHN,KAAKM,KAAK,IAAIJ,IAAIG,KAAK,EAAEC,UAAU,UAChC,QACAJ,IAAIG,KAAK,EAAEC,UAAU,SACnB,OACAC;QACR,IAAI,OAAOD,UAAU,WAAW;YAC9BJ,IAAIG,KAAK,CAACC,KAAK,GAAGE,OAAOF;QAC3B;QAEAL,QAAQC,GAAG,GAAGA;QAEd,MAAMO,UAAU;YACdC,IAAIV,KAAKU,EAAE;YACXb;YACAc,OAAO;YACPL,OAAON,KAAKM,KAAK;YACjBJ,2bAAKP,wBAAAA,EAAsBO,KAAK;QAClC;QAEA,MAAMU,SAAS,2YAAMlB,oBAAAA,EAAkBe;QAEvC,OAAOG;IACT;AACF","ignoreList":[0]}},
    {"offset": {"line": 1268, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1274, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/resolvers/collections/findVersionByID.ts"],"sourcesContent":["import type { Collection, PayloadRequest, TypeWithID, TypeWithVersion } from 'payload'\n\nimport { findVersionByIDOperation, isolateObjectProperty } from 'payload'\n\nimport type { Context } from '../types.js'\n\nexport type Resolver<T extends TypeWithID = any> = (\n  _: unknown,\n  args: {\n    fallbackLocale?: string\n    id: number | string\n    locale?: string\n  },\n  context: {\n    req: PayloadRequest\n  },\n) => Promise<TypeWithVersion<T>>\n\nexport function findVersionByIDResolver(collection: Collection): Resolver {\n  return async function resolver(_, args, context: Context) {\n    let { req } = context\n    const locale = req.locale\n    const fallbackLocale = req.fallbackLocale\n    req = isolateObjectProperty(req, 'locale')\n    req = isolateObjectProperty(req, 'fallbackLocale')\n    req.locale = args.locale || locale\n    req.fallbackLocale = args.fallbackLocale || fallbackLocale\n\n    context.req = req\n\n    const options = {\n      id: args.id,\n      collection,\n      depth: 0,\n      req: isolateObjectProperty(req, 'transactionID'),\n    }\n\n    const result = await findVersionByIDOperation(options)\n\n    return result\n  }\n}\n"],"names":["findVersionByIDOperation","isolateObjectProperty","findVersionByIDResolver","collection","resolver","_","args","context","req","locale","fallbackLocale","options","id","depth","result"],"mappings":";;;AAEA,SAASA,wBAAwB,EAAEC,qBAAqB,QAAQ,UAAS;;;AAgBlE,SAASC,wBAAwBC,UAAsB;IAC5D,OAAO,eAAeC,SAASC,CAAC,EAAEC,IAAI,EAAEC,OAAgB;QACtD,IAAI,EAAEC,GAAG,EAAE,GAAGD;QACd,MAAME,SAASD,IAAIC,MAAM;QACzB,MAAMC,iBAAiBF,IAAIE,cAAc;QACzCF,4bAAMP,wBAAAA,EAAsBO,KAAK;QACjCA,4bAAMP,wBAAAA,EAAsBO,KAAK;QACjCA,IAAIC,MAAM,GAAGH,KAAKG,MAAM,IAAIA;QAC5BD,IAAIE,cAAc,GAAGJ,KAAKI,cAAc,IAAIA;QAE5CH,QAAQC,GAAG,GAAGA;QAEd,MAAMG,UAAU;YACdC,IAAIN,KAAKM,EAAE;YACXT;YACAU,OAAO;YACPL,2bAAKP,wBAAAA,EAAsBO,KAAK;QAClC;QAEA,MAAMM,SAAS,kZAAMd,2BAAAA,EAAyBW;QAE9C,OAAOG;IACT;AACF","ignoreList":[0]}},
    {"offset": {"line": 1300, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1306, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/resolvers/collections/findVersions.ts"],"sourcesContent":["import type { Collection, PaginatedDocs, PayloadRequest, Where } from 'payload'\n\nimport { findVersionsOperation, isolateObjectProperty } from 'payload'\n\nimport type { Context } from '../types.js'\n\nexport type Resolver = (\n  _: unknown,\n  args: {\n    draft?: boolean\n    fallbackLocale?: string\n    limit?: number\n    locale?: string\n    page?: number\n    pagination?: boolean\n    sort?: string\n    where: Where\n  },\n  context: {\n    req: PayloadRequest\n  },\n) => Promise<PaginatedDocs<any>>\n\nexport function findVersionsResolver(collection: Collection): Resolver {\n  return async function resolver(_, args, context: Context) {\n    let { req } = context\n    const locale = req.locale\n    const fallbackLocale = req.fallbackLocale\n    req = isolateObjectProperty(req, 'locale')\n    req = isolateObjectProperty(req, 'fallbackLocale')\n    req.locale = args.locale || locale\n    req.fallbackLocale = args.fallbackLocale || fallbackLocale\n    if (!req.query) {\n      req.query = {}\n    }\n\n    const draft: boolean =\n      (args.draft ?? req.query?.draft === 'false')\n        ? false\n        : req.query?.draft === 'true'\n          ? true\n          : undefined\n    if (typeof draft === 'boolean') {\n      req.query.draft = String(draft)\n    }\n\n    context.req = req\n\n    const options = {\n      collection,\n      depth: 0,\n      limit: args.limit,\n      page: args.page,\n      pagination: args.pagination,\n      req: isolateObjectProperty(req, 'transactionID'),\n      sort: args.sort,\n      where: args.where,\n    }\n\n    const result = await findVersionsOperation(options)\n\n    return result\n  }\n}\n"],"names":["findVersionsOperation","isolateObjectProperty","findVersionsResolver","collection","resolver","_","args","context","req","locale","fallbackLocale","query","draft","undefined","String","options","depth","limit","page","pagination","sort","where","result"],"mappings":";;;AAEA,SAASA,qBAAqB,EAAEC,qBAAqB,QAAQ,UAAS;;;AAqB/D,SAASC,qBAAqBC,UAAsB;IACzD,OAAO,eAAeC,SAASC,CAAC,EAAEC,IAAI,EAAEC,OAAgB;QACtD,IAAI,EAAEC,GAAG,EAAE,GAAGD;QACd,MAAME,SAASD,IAAIC,MAAM;QACzB,MAAMC,iBAAiBF,IAAIE,cAAc;QACzCF,4bAAMP,wBAAAA,EAAsBO,KAAK;QACjCA,4bAAMP,wBAAAA,EAAsBO,KAAK;QACjCA,IAAIC,MAAM,GAAGH,KAAKG,MAAM,IAAIA;QAC5BD,IAAIE,cAAc,GAAGJ,KAAKI,cAAc,IAAIA;QAC5C,IAAI,CAACF,IAAIG,KAAK,EAAE;YACdH,IAAIG,KAAK,GAAG,CAAC;QACf;QAEA,MAAMC,QACHN,KAAKM,KAAK,IAAIJ,IAAIG,KAAK,EAAEC,UAAU,UAChC,QACAJ,IAAIG,KAAK,EAAEC,UAAU,SACnB,OACAC;QACR,IAAI,OAAOD,UAAU,WAAW;YAC9BJ,IAAIG,KAAK,CAACC,KAAK,GAAGE,OAAOF;QAC3B;QAEAL,QAAQC,GAAG,GAAGA;QAEd,MAAMO,UAAU;YACdZ;YACAa,OAAO;YACPC,OAAOX,KAAKW,KAAK;YACjBC,MAAMZ,KAAKY,IAAI;YACfC,YAAYb,KAAKa,UAAU;YAC3BX,2bAAKP,wBAAAA,EAAsBO,KAAK;YAChCY,MAAMd,KAAKc,IAAI;YACfC,OAAOf,KAAKe,KAAK;QACnB;QAEA,MAAMC,SAAS,+YAAMtB,wBAAAA,EAAsBe;QAE3C,OAAOO;IACT;AACF","ignoreList":[0]}},
    {"offset": {"line": 1343, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1349, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/resolvers/collections/restoreVersion.ts"],"sourcesContent":["import type { Collection, PayloadRequest } from 'payload'\n\nimport { isolateObjectProperty, restoreVersionOperation } from 'payload'\n\nimport type { Context } from '../types.js'\n\nexport type Resolver = (\n  _: unknown,\n  args: {\n    draft?: boolean\n    id: number | string\n  },\n  context: {\n    req: PayloadRequest\n  },\n) => Promise<Document>\n\nexport function restoreVersionResolver(collection: Collection): Resolver {\n  async function resolver(_, args, context: Context) {\n    const options = {\n      id: args.id,\n      collection,\n      depth: 0,\n      draft: args.draft,\n      req: isolateObjectProperty(context.req, 'transactionID'),\n    }\n\n    const result = await restoreVersionOperation(options)\n    return result\n  }\n\n  return resolver\n}\n"],"names":["isolateObjectProperty","restoreVersionOperation","restoreVersionResolver","collection","resolver","_","args","context","options","id","depth","draft","req","result"],"mappings":";;;AAEA,SAASA,qBAAqB,EAAEC,uBAAuB,QAAQ,UAAS;;;AAejE,SAASC,uBAAuBC,UAAsB;IAC3D,eAAeC,SAASC,CAAC,EAAEC,IAAI,EAAEC,OAAgB;QAC/C,MAAMC,UAAU;YACdC,IAAIH,KAAKG,EAAE;YACXN;YACAO,OAAO;YACPC,OAAOL,KAAKK,KAAK;YACjBC,2bAAKZ,wBAAAA,EAAsBO,QAAQK,GAAG,EAAE;QAC1C;QAEA,MAAMC,SAAS,iZAAMZ,0BAAAA,EAAwBO;QAC7C,OAAOK;IACT;IAEA,OAAOT;AACT","ignoreList":[0]}},
    {"offset": {"line": 1369, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1375, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/resolvers/collections/update.ts"],"sourcesContent":["import type { Collection, CollectionSlug, DataFromCollectionSlug, PayloadRequest } from 'payload'\n\nimport { isolateObjectProperty, updateByIDOperation } from 'payload'\n\nimport type { Context } from '../types.js'\n\nexport type Resolver<TSlug extends CollectionSlug> = (\n  _: unknown,\n  args: {\n    autosave: boolean\n    data: DataFromCollectionSlug<TSlug>\n    draft: boolean\n    fallbackLocale?: string\n    id: number | string\n    locale?: string\n  },\n  context: {\n    req: PayloadRequest\n  },\n) => Promise<DataFromCollectionSlug<TSlug>>\n\nexport function updateResolver<TSlug extends CollectionSlug>(\n  collection: Collection,\n): Resolver<TSlug> {\n  return async function resolver(_, args, context: Context) {\n    let { req } = context\n    const locale = req.locale\n    const fallbackLocale = req.fallbackLocale\n    req = isolateObjectProperty(req, 'locale')\n    req = isolateObjectProperty(req, 'fallbackLocale')\n    req.locale = args.locale || locale\n    req.fallbackLocale = args.fallbackLocale || fallbackLocale\n    if (!req.query) {\n      req.query = {}\n    }\n\n    const draft: boolean =\n      (args.draft ?? req.query?.draft === 'false')\n        ? false\n        : req.query?.draft === 'true'\n          ? true\n          : undefined\n    if (typeof draft === 'boolean') {\n      req.query.draft = String(draft)\n    }\n\n    context.req = req\n\n    const options = {\n      id: args.id,\n      autosave: args.autosave,\n      collection,\n      data: args.data as any,\n      depth: 0,\n      draft: args.draft,\n      req: isolateObjectProperty(req, 'transactionID'),\n    }\n\n    const result = await updateByIDOperation<TSlug>(options)\n\n    return result\n  }\n}\n"],"names":["isolateObjectProperty","updateByIDOperation","updateResolver","collection","resolver","_","args","context","req","locale","fallbackLocale","query","draft","undefined","String","options","id","autosave","data","depth","result"],"mappings":";;;AAEA,SAASA,qBAAqB,EAAEC,mBAAmB,QAAQ,UAAS;;;AAmB7D,SAASC,eACdC,UAAsB;IAEtB,OAAO,eAAeC,SAASC,CAAC,EAAEC,IAAI,EAAEC,OAAgB;QACtD,IAAI,EAAEC,GAAG,EAAE,GAAGD;QACd,MAAME,SAASD,IAAIC,MAAM;QACzB,MAAMC,iBAAiBF,IAAIE,cAAc;QACzCF,4bAAMR,wBAAAA,EAAsBQ,KAAK;QACjCA,4bAAMR,wBAAAA,EAAsBQ,KAAK;QACjCA,IAAIC,MAAM,GAAGH,KAAKG,MAAM,IAAIA;QAC5BD,IAAIE,cAAc,GAAGJ,KAAKI,cAAc,IAAIA;QAC5C,IAAI,CAACF,IAAIG,KAAK,EAAE;YACdH,IAAIG,KAAK,GAAG,CAAC;QACf;QAEA,MAAMC,QACHN,KAAKM,KAAK,IAAIJ,IAAIG,KAAK,EAAEC,UAAU,UAChC,QACAJ,IAAIG,KAAK,EAAEC,UAAU,SACnB,OACAC;QACR,IAAI,OAAOD,UAAU,WAAW;YAC9BJ,IAAIG,KAAK,CAACC,KAAK,GAAGE,OAAOF;QAC3B;QAEAL,QAAQC,GAAG,GAAGA;QAEd,MAAMO,UAAU;YACdC,IAAIV,KAAKU,EAAE;YACXC,UAAUX,KAAKW,QAAQ;YACvBd;YACAe,MAAMZ,KAAKY,IAAI;YACfC,OAAO;YACPP,OAAON,KAAKM,KAAK;YACjBJ,2bAAKR,wBAAAA,EAAsBQ,KAAK;QAClC;QAEA,MAAMY,SAAS,6YAAMnB,sBAAAA,EAA2Bc;QAEhD,OAAOK;IACT;AACF","ignoreList":[0]}},
    {"offset": {"line": 1411, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1417, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/utilities/combineParentName.ts"],"sourcesContent":["import { formatName } from './formatName.js'\n\nexport const combineParentName = (parent: string, name: string): string =>\n  formatName(`${parent ? `${parent}_` : ''}${name}`)\n"],"names":["formatName","combineParentName","parent","name"],"mappings":";;;AAAA,SAASA,UAAU,QAAQ,kBAAiB;;AAErC,MAAMC,oBAAoB,CAACC,QAAgBC,kYAChDH,aAAAA,EAAW,GAAGE,SAAS,GAAGA,OAAO,CAAC,CAAC,GAAG,KAAKC,MAAM,EAAC","ignoreList":[0]}},
    {"offset": {"line": 1423, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1429, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/utilities/groupOrTabHasRequiredSubfield.ts"],"sourcesContent":["import type { Field, Tab } from 'payload'\n\nimport { fieldAffectsData } from 'payload/shared'\n\nexport const groupOrTabHasRequiredSubfield = (entity: Field | Tab): boolean => {\n  if ('type' in entity && entity.type === 'group') {\n    return entity.fields.some((subField) => {\n      return (\n        (fieldAffectsData(subField) && 'required' in subField && subField.required) ||\n        groupOrTabHasRequiredSubfield(subField)\n      )\n    })\n  }\n\n  if ('fields' in entity && 'name' in entity) {\n    return (entity as Tab).fields.some((subField) => groupOrTabHasRequiredSubfield(subField))\n  }\n\n  return false\n}\n"],"names":["fieldAffectsData","groupOrTabHasRequiredSubfield","entity","type","fields","some","subField","required"],"mappings":";;;AAEA,SAASA,gBAAgB,QAAQ,iBAAgB;;AAE1C,MAAMC,gCAAgC,CAACC;IAC5C,IAAI,UAAUA,UAAUA,OAAOC,IAAI,KAAK,SAAS;QAC/C,OAAOD,OAAOE,MAAM,CAACC,IAAI,CAAC,CAACC;YACzB,gYACGN,mBAAAA,EAAiBM,aAAa,cAAcA,YAAYA,SAASC,QAAQ,IAC1EN,8BAA8BK;QAElC;IACF;IAEA,IAAI,YAAYJ,UAAU,UAAUA,QAAQ;QAC1C,OAAQA,OAAeE,MAAM,CAACC,IAAI,CAAC,CAACC,WAAaL,8BAA8BK;IACjF;IAEA,OAAO;AACT,EAAC","ignoreList":[0]}},
    {"offset": {"line": 1445, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1451, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/schema/withNullableType.ts"],"sourcesContent":["import type { GraphQLType } from 'graphql'\nimport type { FieldAffectingData } from 'payload'\n\nimport { GraphQLNonNull } from 'graphql'\n\nexport const withNullableType = (\n  field: FieldAffectingData,\n  type: GraphQLType,\n  forceNullable = false,\n): GraphQLType => {\n  const hasReadAccessControl = field.access && field.access.read\n  const condition = field.admin && field.admin.condition\n  const isTimestamp = field.name === 'createdAt' || field.name === 'updatedAt'\n\n  if (\n    !forceNullable &&\n    'required' in field &&\n    field.required &&\n    !field.localized &&\n    !condition &&\n    !hasReadAccessControl &&\n    !isTimestamp\n  ) {\n    return new GraphQLNonNull(type)\n  }\n\n  return type\n}\n"],"names":["GraphQLNonNull","withNullableType","field","type","forceNullable","hasReadAccessControl","access","read","condition","admin","isTimestamp","name","required","localized"],"mappings":";;;AAGA,SAASA,cAAc,QAAQ,UAAS;;AAEjC,MAAMC,mBAAmB,CAC9BC,OACAC,MACAC,gBAAgB,KAAK;IAErB,MAAMC,uBAAuBH,MAAMI,MAAM,IAAIJ,MAAMI,MAAM,CAACC,IAAI;IAC9D,MAAMC,YAAYN,MAAMO,KAAK,IAAIP,MAAMO,KAAK,CAACD,SAAS;IACtD,MAAME,cAAcR,MAAMS,IAAI,KAAK,eAAeT,MAAMS,IAAI,KAAK;IAEjE,IACE,CAACP,iBACD,cAAcF,SACdA,MAAMU,QAAQ,IACd,CAACV,MAAMW,SAAS,IAChB,CAACL,aACD,CAACH,wBACD,CAACK,aACD;QACA,OAAO,4GAAIV,iBAAAA,CAAeG;IAC5B;IAEA,OAAOA;AACT,EAAC","ignoreList":[0]}},
    {"offset": {"line": 1465, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1471, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/schema/buildMutationInputType.ts"],"sourcesContent":["import type { GraphQLInputFieldConfig, GraphQLScalarType, GraphQLType } from 'graphql'\nimport type {\n  ArrayField,\n  BlocksField,\n  CheckboxField,\n  CodeField,\n  CollapsibleField,\n  DateField,\n  EmailField,\n  Field,\n  GraphQLInfo,\n  GroupField,\n  JSONField,\n  NumberField,\n  PointField,\n  RadioField,\n  RelationshipField,\n  RichTextField,\n  RowField,\n  SanitizedCollectionConfig,\n  SanitizedConfig,\n  SelectField,\n  TabsField,\n  TextareaField,\n  TextField,\n  UploadField,\n} from 'payload'\n\nimport {\n  GraphQLBoolean,\n  GraphQLEnumType,\n  GraphQLFloat,\n  GraphQLInputObjectType,\n  GraphQLInt,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLString,\n} from 'graphql'\nimport { flattenTopLevelFields, toWords } from 'payload'\nimport { fieldAffectsData, optionIsObject, tabHasName } from 'payload/shared'\n\nimport { GraphQLJSON } from '../packages/graphql-type-json/index.js'\nimport { combineParentName } from '../utilities/combineParentName.js'\nimport { formatName } from '../utilities/formatName.js'\nimport { groupOrTabHasRequiredSubfield } from '../utilities/groupOrTabHasRequiredSubfield.js'\nimport { withNullableType } from './withNullableType.js'\n\nconst idFieldTypes = {\n  number: GraphQLInt,\n  text: GraphQLString,\n}\n\nexport const getCollectionIDType = (\n  type: keyof typeof idFieldTypes,\n  collection: SanitizedCollectionConfig,\n): GraphQLScalarType => {\n  const idField = flattenTopLevelFields(collection.fields).find(\n    (field) => fieldAffectsData(field) && field.name === 'id',\n  )\n\n  if (!idField) {\n    return idFieldTypes[type]\n  }\n\n  return idFieldTypes[idField.type]\n}\n\nexport type InputObjectTypeConfig = {\n  [path: string]: GraphQLInputFieldConfig\n}\n\ntype BuildMutationInputTypeArgs = {\n  config: SanitizedConfig\n  fields: Field[]\n  forceNullable?: boolean\n  graphqlResult: GraphQLInfo\n  name: string\n  parentName: string\n}\n\nexport function buildMutationInputType({\n  name,\n  config,\n  fields,\n  forceNullable = false,\n  graphqlResult,\n  parentName,\n}: BuildMutationInputTypeArgs): GraphQLInputObjectType | null {\n  const fieldToSchemaMap = {\n    array: (inputObjectTypeConfig: InputObjectTypeConfig, field: ArrayField) => {\n      const fullName = combineParentName(parentName, toWords(field.name, true))\n      let type: GraphQLList<GraphQLType> | GraphQLType = buildMutationInputType({\n        name: fullName,\n        config,\n        fields: field.fields,\n        graphqlResult,\n        parentName: fullName,\n      })\n\n      if (!type) {\n        return inputObjectTypeConfig\n      }\n\n      type = new GraphQLList(withNullableType(field, type, forceNullable))\n      return {\n        ...inputObjectTypeConfig,\n        [field.name]: { type },\n      }\n    },\n    blocks: (inputObjectTypeConfig: InputObjectTypeConfig, field: BlocksField) => ({\n      ...inputObjectTypeConfig,\n      [field.name]: { type: GraphQLJSON },\n    }),\n    checkbox: (inputObjectTypeConfig: InputObjectTypeConfig, field: CheckboxField) => ({\n      ...inputObjectTypeConfig,\n      [field.name]: { type: GraphQLBoolean },\n    }),\n    code: (inputObjectTypeConfig: InputObjectTypeConfig, field: CodeField) => ({\n      ...inputObjectTypeConfig,\n      [field.name]: { type: withNullableType(field, GraphQLString, forceNullable) },\n    }),\n    collapsible: (inputObjectTypeConfig: InputObjectTypeConfig, field: CollapsibleField) =>\n      field.fields.reduce((acc, subField: CollapsibleField) => {\n        const addSubField = fieldToSchemaMap[subField.type]\n        if (addSubField) {\n          return addSubField(acc, subField)\n        }\n        return acc\n      }, inputObjectTypeConfig),\n    date: (inputObjectTypeConfig: InputObjectTypeConfig, field: DateField) => ({\n      ...inputObjectTypeConfig,\n      [field.name]: { type: withNullableType(field, GraphQLString, forceNullable) },\n    }),\n    email: (inputObjectTypeConfig: InputObjectTypeConfig, field: EmailField) => ({\n      ...inputObjectTypeConfig,\n      [field.name]: { type: withNullableType(field, GraphQLString, forceNullable) },\n    }),\n    group: (inputObjectTypeConfig: InputObjectTypeConfig, field: GroupField) => {\n      const requiresAtLeastOneField = groupOrTabHasRequiredSubfield(field)\n      const fullName = combineParentName(parentName, toWords(field.name, true))\n      let type: GraphQLType = buildMutationInputType({\n        name: fullName,\n        config,\n        fields: field.fields,\n        graphqlResult,\n        parentName: fullName,\n      })\n\n      if (!type) {\n        return inputObjectTypeConfig\n      }\n\n      if (requiresAtLeastOneField) {\n        type = new GraphQLNonNull(type)\n      }\n      return {\n        ...inputObjectTypeConfig,\n        [field.name]: { type },\n      }\n    },\n    json: (inputObjectTypeConfig: InputObjectTypeConfig, field: JSONField) => ({\n      ...inputObjectTypeConfig,\n      [field.name]: { type: withNullableType(field, GraphQLJSON, forceNullable) },\n    }),\n    number: (inputObjectTypeConfig: InputObjectTypeConfig, field: NumberField) => {\n      const type = field.name === 'id' ? GraphQLInt : GraphQLFloat\n      return {\n        ...inputObjectTypeConfig,\n        [field.name]: {\n          type: withNullableType(\n            field,\n            field.hasMany === true ? new GraphQLList(type) : type,\n            forceNullable,\n          ),\n        },\n      }\n    },\n    point: (inputObjectTypeConfig: InputObjectTypeConfig, field: PointField) => ({\n      ...inputObjectTypeConfig,\n      [field.name]: { type: withNullableType(field, new GraphQLList(GraphQLFloat), forceNullable) },\n    }),\n    radio: (inputObjectTypeConfig: InputObjectTypeConfig, field: RadioField) => ({\n      ...inputObjectTypeConfig,\n      [field.name]: { type: withNullableType(field, GraphQLString, forceNullable) },\n    }),\n    relationship: (inputObjectTypeConfig: InputObjectTypeConfig, field: RelationshipField) => {\n      const { relationTo } = field\n      type PayloadGraphQLRelationshipType =\n        | GraphQLInputObjectType\n        | GraphQLList<GraphQLScalarType>\n        | GraphQLScalarType\n      let type: PayloadGraphQLRelationshipType\n\n      if (Array.isArray(relationTo)) {\n        const fullName = `${combineParentName(\n          parentName,\n          toWords(field.name, true),\n        )}RelationshipInput`\n        type = new GraphQLInputObjectType({\n          name: fullName,\n          fields: {\n            relationTo: {\n              type: new GraphQLEnumType({\n                name: `${fullName}RelationTo`,\n                values: relationTo.reduce(\n                  (values, option) => ({\n                    ...values,\n                    [formatName(option)]: {\n                      value: option,\n                    },\n                  }),\n                  {},\n                ),\n              }),\n            },\n            value: { type: GraphQLJSON },\n          },\n        })\n      } else {\n        type = getCollectionIDType(\n          config.db.defaultIDType,\n          graphqlResult.collections[relationTo].config,\n        )\n      }\n\n      return {\n        ...inputObjectTypeConfig,\n        [field.name]: { type: field.hasMany ? new GraphQLList(type) : type },\n      }\n    },\n    richText: (inputObjectTypeConfig: InputObjectTypeConfig, field: RichTextField) => ({\n      ...inputObjectTypeConfig,\n      [field.name]: { type: withNullableType(field, GraphQLJSON, forceNullable) },\n    }),\n    row: (inputObjectTypeConfig: InputObjectTypeConfig, field: RowField) =>\n      field.fields.reduce((acc, subField: Field) => {\n        const addSubField = fieldToSchemaMap[subField.type]\n        if (addSubField) {\n          return addSubField(acc, subField)\n        }\n        return acc\n      }, inputObjectTypeConfig),\n    select: (inputObjectTypeConfig: InputObjectTypeConfig, field: SelectField) => {\n      const formattedName = `${combineParentName(parentName, field.name)}_MutationInput`\n      let type: GraphQLType = new GraphQLEnumType({\n        name: formattedName,\n        values: field.options.reduce((values, option) => {\n          if (optionIsObject(option)) {\n            return {\n              ...values,\n              [formatName(option.value)]: {\n                value: option.value,\n              },\n            }\n          }\n\n          return {\n            ...values,\n            [formatName(option)]: {\n              value: option,\n            },\n          }\n        }, {}),\n      })\n\n      type = field.hasMany ? new GraphQLList(type) : type\n      type = withNullableType(field, type, forceNullable)\n\n      return {\n        ...inputObjectTypeConfig,\n        [field.name]: { type },\n      }\n    },\n    tabs: (inputObjectTypeConfig: InputObjectTypeConfig, field: TabsField) => {\n      return field.tabs.reduce((acc, tab) => {\n        if (tabHasName(tab)) {\n          const fullName = combineParentName(parentName, toWords(tab.name, true))\n          const requiresAtLeastOneField = groupOrTabHasRequiredSubfield(field)\n          let type: GraphQLType = buildMutationInputType({\n            name: fullName,\n            config,\n            fields: tab.fields,\n            graphqlResult,\n            parentName: fullName,\n          })\n\n          if (!type) {\n            return acc\n          }\n\n          if (requiresAtLeastOneField) {\n            type = new GraphQLNonNull(type)\n          }\n          return {\n            ...acc,\n            [tab.name]: { type },\n          }\n        }\n\n        return {\n          ...acc,\n          ...tab.fields.reduce((subFieldSchema, subField) => {\n            const addSubField = fieldToSchemaMap[subField.type]\n            if (addSubField) {\n              return addSubField(subFieldSchema, subField)\n            }\n            return subFieldSchema\n          }, acc),\n        }\n      }, inputObjectTypeConfig)\n    },\n    text: (inputObjectTypeConfig: InputObjectTypeConfig, field: TextField) => ({\n      ...inputObjectTypeConfig,\n      [field.name]: {\n        type: withNullableType(\n          field,\n          field.hasMany === true ? new GraphQLList(GraphQLString) : GraphQLString,\n          forceNullable,\n        ),\n      },\n    }),\n    textarea: (inputObjectTypeConfig: InputObjectTypeConfig, field: TextareaField) => ({\n      ...inputObjectTypeConfig,\n      [field.name]: { type: withNullableType(field, GraphQLString, forceNullable) },\n    }),\n    upload: (inputObjectTypeConfig: InputObjectTypeConfig, field: UploadField) => {\n      const { relationTo } = field\n      type PayloadGraphQLRelationshipType =\n        | GraphQLInputObjectType\n        | GraphQLList<GraphQLScalarType>\n        | GraphQLScalarType\n      let type: PayloadGraphQLRelationshipType\n\n      if (Array.isArray(relationTo)) {\n        const fullName = `${combineParentName(\n          parentName,\n          toWords(field.name, true),\n        )}RelationshipInput`\n        type = new GraphQLInputObjectType({\n          name: fullName,\n          fields: {\n            relationTo: {\n              type: new GraphQLEnumType({\n                name: `${fullName}RelationTo`,\n                values: relationTo.reduce(\n                  (values, option) => ({\n                    ...values,\n                    [formatName(option)]: {\n                      value: option,\n                    },\n                  }),\n                  {},\n                ),\n              }),\n            },\n            value: { type: GraphQLJSON },\n          },\n        })\n      } else {\n        type = getCollectionIDType(\n          config.db.defaultIDType,\n          graphqlResult.collections[relationTo].config,\n        )\n      }\n\n      return {\n        ...inputObjectTypeConfig,\n        [field.name]: { type: field.hasMany ? new GraphQLList(type) : type },\n      }\n    },\n  }\n\n  const fieldName = formatName(name)\n\n  const fieldSchemas = fields.reduce((inputObjectTypeConfig, field) => {\n    const fieldSchema = fieldToSchemaMap[field.type]\n\n    if (typeof fieldSchema !== 'function') {\n      return inputObjectTypeConfig\n    }\n\n    const schema = fieldSchema(inputObjectTypeConfig, field)\n    if (Object.keys(schema).length === 0) {\n      return inputObjectTypeConfig\n    }\n\n    return {\n      ...inputObjectTypeConfig,\n      ...fieldSchema(inputObjectTypeConfig, field),\n    }\n  }, {})\n\n  if (Object.keys(fieldSchemas).length === 0) {\n    return null\n  }\n\n  return new GraphQLInputObjectType({\n    name: `mutation${fieldName}Input`,\n    fields: fieldSchemas,\n  })\n}\n"],"names":["GraphQLBoolean","GraphQLEnumType","GraphQLFloat","GraphQLInputObjectType","GraphQLInt","GraphQLList","GraphQLNonNull","GraphQLString","flattenTopLevelFields","toWords","fieldAffectsData","optionIsObject","tabHasName","GraphQLJSON","combineParentName","formatName","groupOrTabHasRequiredSubfield","withNullableType","idFieldTypes","number","text","getCollectionIDType","type","collection","idField","fields","find","field","name","buildMutationInputType","config","forceNullable","graphqlResult","parentName","fieldToSchemaMap","array","inputObjectTypeConfig","fullName","blocks","checkbox","code","collapsible","reduce","acc","subField","addSubField","date","email","group","requiresAtLeastOneField","json","hasMany","point","radio","relationship","relationTo","Array","isArray","values","option","value","db","defaultIDType","collections","richText","row","select","formattedName","options","tabs","tab","subFieldSchema","textarea","upload","fieldName","fieldSchemas","fieldSchema","schema","Object","keys","length"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1796, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1802, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/utilities/formatOptions.ts"],"sourcesContent":["import type { RadioField, SelectField } from 'payload'\n\nimport { formatName } from './formatName.js'\n\nexport const formatOptions = (field: RadioField | SelectField) => {\n  return field.options.reduce((values, option) => {\n    if (typeof option === 'object') {\n      return {\n        ...values,\n        [formatName(option.value)]: {\n          value: option.value,\n        },\n      }\n    }\n\n    return {\n      ...values,\n      [formatName(option)]: {\n        value: option,\n      },\n    }\n  }, {})\n}\n"],"names":["formatName","formatOptions","field","options","reduce","values","option","value"],"mappings":";;;AAEA,SAASA,UAAU,QAAQ,kBAAiB;;AAErC,MAAMC,gBAAgB,CAACC;IAC5B,OAAOA,MAAMC,OAAO,CAACC,MAAM,CAAC,CAACC,QAAQC;QACnC,IAAI,OAAOA,WAAW,UAAU;YAC9B,OAAO;gBACL,GAAGD,MAAM;gBACT,4XAACL,aAAAA,EAAWM,OAAOC,KAAK,EAAE,EAAE;oBAC1BA,OAAOD,OAAOC,KAAK;gBACrB;YACF;QACF;QAEA,OAAO;YACL,GAAGF,MAAM;YACT,4XAACL,aAAAA,EAAWM,QAAQ,EAAE;gBACpBC,OAAOD;YACT;QACF;IACF,GAAG,CAAC;AACN,EAAC","ignoreList":[0]}},
    {"offset": {"line": 1825, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1831, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/schema/isFieldNullable.ts"],"sourcesContent":["import type { FieldAffectingData } from 'payload'\n\nimport { fieldAffectsData } from 'payload/shared'\n\nexport const isFieldNullable = (field: FieldAffectingData, force: boolean): boolean => {\n  const hasReadAccessControl = field.access && field.access.read\n  const condition = field.admin && field.admin.condition\n  return !(\n    force &&\n    fieldAffectsData(field) &&\n    'required' in field &&\n    field.required &&\n    !field.localized &&\n    !condition &&\n    !hasReadAccessControl\n  )\n}\n"],"names":["fieldAffectsData","isFieldNullable","field","force","hasReadAccessControl","access","read","condition","admin","required","localized"],"mappings":";;;AAEA,SAASA,gBAAgB,QAAQ,iBAAgB;;AAE1C,MAAMC,kBAAkB,CAACC,OAA2BC;IACzD,MAAMC,uBAAuBF,MAAMG,MAAM,IAAIH,MAAMG,MAAM,CAACC,IAAI;IAC9D,MAAMC,YAAYL,MAAMM,KAAK,IAAIN,MAAMM,KAAK,CAACD,SAAS;IACtD,OAAO,CACLJ,CAAAA,kYACAH,mBAAAA,EAAiBE,UACjB,cAAcA,SACdA,MAAMO,QAAQ,IACd,CAACP,MAAMQ,SAAS,IAChB,CAACH,aACD,CAACH,oBAAmB;AAExB,EAAC","ignoreList":[0]}},
    {"offset": {"line": 1841, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1847, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/schema/buildObjectType.ts"],"sourcesContent":["import type { GraphQLFieldConfig, GraphQLType } from 'graphql'\nimport type {\n  ArrayField,\n  BlocksField,\n  CheckboxField,\n  CodeField,\n  CollapsibleField,\n  DateField,\n  EmailField,\n  Field,\n  GraphQLInfo,\n  GroupField,\n  JoinField,\n  JSONField,\n  NumberField,\n  PointField,\n  RadioField,\n  RelationshipField,\n  RichTextAdapter,\n  RichTextField,\n  RowField,\n  SanitizedConfig,\n  SelectField,\n  TabsField,\n  TextareaField,\n  TextField,\n  UploadField,\n} from 'payload'\n\nimport {\n  GraphQLBoolean,\n  GraphQLEnumType,\n  GraphQLFloat,\n  GraphQLInt,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLString,\n  GraphQLUnionType,\n} from 'graphql'\nimport { DateTimeResolver, EmailAddressResolver } from 'graphql-scalars'\nimport { combineQueries, createDataloaderCacheKey, MissingEditorProp, toWords } from 'payload'\nimport { tabHasName } from 'payload/shared'\n\nimport type { Context } from '../resolvers/types.js'\n\nimport { GraphQLJSON } from '../packages/graphql-type-json/index.js'\nimport { combineParentName } from '../utilities/combineParentName.js'\nimport { formatName } from '../utilities/formatName.js'\nimport { formatOptions } from '../utilities/formatOptions.js'\nimport { isFieldNullable } from './isFieldNullable.js'\nimport { withNullableType } from './withNullableType.js'\n\nexport type ObjectTypeConfig = {\n  [path: string]: GraphQLFieldConfig<any, any>\n}\n\ntype Args = {\n  baseFields?: ObjectTypeConfig\n  config: SanitizedConfig\n  fields: Field[]\n  forceNullable?: boolean\n  graphqlResult: GraphQLInfo\n  name: string\n  parentName: string\n}\n\nexport function buildObjectType({\n  name,\n  baseFields = {},\n  config,\n  fields,\n  forceNullable,\n  graphqlResult,\n  parentName,\n}: Args): GraphQLObjectType {\n  const fieldToSchemaMap = {\n    array: (objectTypeConfig: ObjectTypeConfig, field: ArrayField) => {\n      const interfaceName =\n        field?.interfaceName || combineParentName(parentName, toWords(field.name, true))\n\n      if (!graphqlResult.types.arrayTypes[interfaceName]) {\n        const objectType = buildObjectType({\n          name: interfaceName,\n          config,\n          fields: field.fields,\n          forceNullable: isFieldNullable(field, forceNullable),\n          graphqlResult,\n          parentName: interfaceName,\n        })\n\n        if (Object.keys(objectType.getFields()).length) {\n          graphqlResult.types.arrayTypes[interfaceName] = objectType\n        }\n      }\n\n      if (!graphqlResult.types.arrayTypes[interfaceName]) {\n        return objectTypeConfig\n      }\n\n      const arrayType = new GraphQLList(\n        new GraphQLNonNull(graphqlResult.types.arrayTypes[interfaceName]),\n      )\n\n      return {\n        ...objectTypeConfig,\n        [field.name]: { type: withNullableType(field, arrayType) },\n      }\n    },\n    blocks: (objectTypeConfig: ObjectTypeConfig, field: BlocksField) => {\n      const blockTypes: GraphQLObjectType<any, any>[] = field.blocks.reduce((acc, block) => {\n        if (!graphqlResult.types.blockTypes[block.slug]) {\n          const interfaceName =\n            block?.interfaceName || block?.graphQL?.singularName || toWords(block.slug, true)\n\n          const objectType = buildObjectType({\n            name: interfaceName,\n            config,\n            fields: [\n              ...block.fields,\n              {\n                name: 'blockType',\n                type: 'text',\n              },\n            ],\n            forceNullable,\n            graphqlResult,\n            parentName: interfaceName,\n          })\n\n          if (Object.keys(objectType.getFields()).length) {\n            graphqlResult.types.blockTypes[block.slug] = objectType\n          }\n        }\n\n        if (graphqlResult.types.blockTypes[block.slug]) {\n          acc.push(graphqlResult.types.blockTypes[block.slug])\n        }\n\n        return acc\n      }, [])\n\n      if (blockTypes.length === 0) {\n        return objectTypeConfig\n      }\n\n      const fullName = combineParentName(parentName, toWords(field.name, true))\n\n      const type = new GraphQLList(\n        new GraphQLNonNull(\n          new GraphQLUnionType({\n            name: fullName,\n            resolveType: (data) => graphqlResult.types.blockTypes[data.blockType].name,\n            types: blockTypes,\n          }),\n        ),\n      )\n\n      return {\n        ...objectTypeConfig,\n        [field.name]: { type: withNullableType(field, type) },\n      }\n    },\n    checkbox: (objectTypeConfig: ObjectTypeConfig, field: CheckboxField) => ({\n      ...objectTypeConfig,\n      [field.name]: { type: withNullableType(field, GraphQLBoolean, forceNullable) },\n    }),\n    code: (objectTypeConfig: ObjectTypeConfig, field: CodeField) => ({\n      ...objectTypeConfig,\n      [field.name]: { type: withNullableType(field, GraphQLString, forceNullable) },\n    }),\n    collapsible: (objectTypeConfig: ObjectTypeConfig, field: CollapsibleField) =>\n      field.fields.reduce((objectTypeConfigWithCollapsibleFields, subField) => {\n        const addSubField = fieldToSchemaMap[subField.type]\n        if (addSubField) {\n          return addSubField(objectTypeConfigWithCollapsibleFields, subField)\n        }\n        return objectTypeConfigWithCollapsibleFields\n      }, objectTypeConfig),\n    date: (objectTypeConfig: ObjectTypeConfig, field: DateField) => ({\n      ...objectTypeConfig,\n      [field.name]: { type: withNullableType(field, DateTimeResolver, forceNullable) },\n    }),\n    email: (objectTypeConfig: ObjectTypeConfig, field: EmailField) => ({\n      ...objectTypeConfig,\n      [field.name]: { type: withNullableType(field, EmailAddressResolver, forceNullable) },\n    }),\n    group: (objectTypeConfig: ObjectTypeConfig, field: GroupField) => {\n      const interfaceName =\n        field?.interfaceName || combineParentName(parentName, toWords(field.name, true))\n\n      if (!graphqlResult.types.groupTypes[interfaceName]) {\n        const objectType = buildObjectType({\n          name: interfaceName,\n          config,\n          fields: field.fields,\n          forceNullable: isFieldNullable(field, forceNullable),\n          graphqlResult,\n          parentName: interfaceName,\n        })\n\n        if (Object.keys(objectType.getFields()).length) {\n          graphqlResult.types.groupTypes[interfaceName] = objectType\n        }\n      }\n\n      if (!graphqlResult.types.groupTypes[interfaceName]) {\n        return objectTypeConfig\n      }\n\n      return {\n        ...objectTypeConfig,\n        [field.name]: {\n          type: graphqlResult.types.groupTypes[interfaceName],\n          resolve: (parent, args, context: Context) => {\n            return {\n              ...parent[field.name],\n              _id: parent._id ?? parent.id,\n            }\n          },\n        },\n      }\n    },\n    join: (objectTypeConfig: ObjectTypeConfig, field: JoinField) => {\n      const joinName = combineParentName(parentName, toWords(field.name, true))\n\n      const joinType = {\n        type: new GraphQLObjectType({\n          name: joinName,\n          fields: {\n            docs: {\n              type: new GraphQLList(graphqlResult.collections[field.collection].graphQL.type),\n            },\n            hasNextPage: { type: GraphQLBoolean },\n          },\n        }),\n        args: {\n          limit: {\n            type: GraphQLInt,\n          },\n          sort: {\n            type: GraphQLString,\n          },\n          where: {\n            type: graphqlResult.collections[field.collection].graphQL.whereInputType,\n          },\n        },\n        extensions: {\n          complexity:\n            typeof field?.graphQL?.complexity === 'number' ? field.graphQL.complexity : 10,\n        },\n        async resolve(parent, args, context: Context) {\n          const { collection } = field\n          const { limit, sort, where } = args\n          const { req } = context\n\n          const fullWhere = combineQueries(where, {\n            [field.on]: { equals: parent._id ?? parent.id },\n          })\n\n          return await req.payload.find({\n            collection,\n            depth: 0,\n            fallbackLocale: req.fallbackLocale,\n            limit,\n            locale: req.locale,\n            overrideAccess: false,\n            req,\n            sort,\n            where: fullWhere,\n          })\n        },\n      }\n\n      return {\n        ...objectTypeConfig,\n        [field.name]: joinType,\n      }\n    },\n    json: (objectTypeConfig: ObjectTypeConfig, field: JSONField) => ({\n      ...objectTypeConfig,\n      [field.name]: { type: withNullableType(field, GraphQLJSON, forceNullable) },\n    }),\n    number: (objectTypeConfig: ObjectTypeConfig, field: NumberField) => {\n      const type = field?.name === 'id' ? GraphQLInt : GraphQLFloat\n      return {\n        ...objectTypeConfig,\n        [field.name]: {\n          type: withNullableType(\n            field,\n            field?.hasMany === true ? new GraphQLList(type) : type,\n            forceNullable,\n          ),\n        },\n      }\n    },\n    point: (objectTypeConfig: ObjectTypeConfig, field: PointField) => ({\n      ...objectTypeConfig,\n      [field.name]: {\n        type: withNullableType(\n          field,\n          new GraphQLList(new GraphQLNonNull(GraphQLFloat)),\n          forceNullable,\n        ),\n      },\n    }),\n    radio: (objectTypeConfig: ObjectTypeConfig, field: RadioField) => ({\n      ...objectTypeConfig,\n      [field.name]: {\n        type: withNullableType(\n          field,\n          new GraphQLEnumType({\n            name: combineParentName(parentName, field.name),\n            values: formatOptions(field),\n          }),\n          forceNullable,\n        ),\n      },\n    }),\n    relationship: (objectTypeConfig: ObjectTypeConfig, field: RelationshipField) => {\n      const { relationTo } = field\n      const isRelatedToManyCollections = Array.isArray(relationTo)\n      const hasManyValues = field.hasMany\n      const relationshipName = combineParentName(parentName, toWords(field.name, true))\n\n      let type\n      let relationToType = null\n\n      const graphQLCollections = config.collections.filter(\n        (collectionConfig) => collectionConfig.graphQL !== false,\n      )\n\n      if (Array.isArray(relationTo)) {\n        relationToType = new GraphQLEnumType({\n          name: `${relationshipName}_RelationTo`,\n          values: relationTo\n            .filter((relation) =>\n              graphQLCollections.some((collection) => collection.slug === relation),\n            )\n            .reduce(\n              (relations, relation) => ({\n                ...relations,\n                [formatName(relation)]: {\n                  value: relation,\n                },\n              }),\n              {},\n            ),\n        })\n\n        // Only pass collections that are GraphQL enabled\n        const types = relationTo\n          .filter((relation) =>\n            graphQLCollections.some((collection) => collection.slug === relation),\n          )\n          .map((relation) => graphqlResult.collections[relation]?.graphQL.type)\n\n        type = new GraphQLObjectType({\n          name: `${relationshipName}_Relationship`,\n          fields: {\n            relationTo: {\n              type: relationToType,\n            },\n            value: {\n              type: new GraphQLUnionType({\n                name: relationshipName,\n                resolveType(data) {\n                  return graphqlResult.collections[data.collection].graphQL.type.name\n                },\n                types,\n              }),\n            },\n          },\n        })\n      } else {\n        ;({ type } = graphqlResult.collections[relationTo].graphQL)\n      }\n\n      // If the relationshipType is undefined at this point,\n      // it can be assumed that this blockType can have a relationship\n      // to itself. Therefore, we set the relationshipType equal to the blockType\n      // that is currently being created.\n\n      type = type || newlyCreatedBlockType\n\n      const relationshipArgs: {\n        draft?: unknown\n        fallbackLocale?: unknown\n        limit?: unknown\n        locale?: unknown\n        page?: unknown\n        where?: unknown\n      } = {}\n\n      const relationsUseDrafts = (Array.isArray(relationTo) ? relationTo : [relationTo])\n        .filter((relation) => graphQLCollections.some((collection) => collection.slug === relation))\n        .some((relation) => graphqlResult.collections[relation].config.versions?.drafts)\n\n      if (relationsUseDrafts) {\n        relationshipArgs.draft = {\n          type: GraphQLBoolean,\n        }\n      }\n\n      if (config.localization) {\n        relationshipArgs.locale = {\n          type: graphqlResult.types.localeInputType,\n        }\n\n        relationshipArgs.fallbackLocale = {\n          type: graphqlResult.types.fallbackLocaleInputType,\n        }\n      }\n\n      const relationship = {\n        type: withNullableType(\n          field,\n          hasManyValues ? new GraphQLList(new GraphQLNonNull(type)) : type,\n          forceNullable,\n        ),\n        args: relationshipArgs,\n        extensions: {\n          complexity:\n            typeof field?.graphQL?.complexity === 'number' ? field.graphQL.complexity : 10,\n        },\n        async resolve(parent, args, context: Context) {\n          const value = parent[field.name]\n          const locale = args.locale || context.req.locale\n          const fallbackLocale = args.fallbackLocale || context.req.fallbackLocale\n          let relatedCollectionSlug = field.relationTo\n          const draft = Boolean(args.draft ?? context.req.query?.draft)\n\n          if (hasManyValues) {\n            const results = []\n            const resultPromises = []\n\n            const createPopulationPromise = async (relatedDoc, i) => {\n              let id = relatedDoc\n              let collectionSlug = field.relationTo\n              const isValidGraphQLCollection = isRelatedToManyCollections\n                ? graphQLCollections.some((collection) => collectionSlug.includes(collection.slug))\n                : graphQLCollections.some((collection) => collectionSlug === collection.slug)\n\n              if (isValidGraphQLCollection) {\n                if (isRelatedToManyCollections) {\n                  collectionSlug = relatedDoc.relationTo\n                  id = relatedDoc.value\n                }\n\n                const result = await context.req.payloadDataLoader.load(\n                  createDataloaderCacheKey({\n                    collectionSlug: collectionSlug as string,\n                    currentDepth: 0,\n                    depth: 0,\n                    docID: id,\n                    draft,\n                    fallbackLocale,\n                    locale,\n                    overrideAccess: false,\n                    showHiddenFields: false,\n                    transactionID: context.req.transactionID,\n                  }),\n                )\n\n                if (result) {\n                  if (isRelatedToManyCollections) {\n                    results[i] = {\n                      relationTo: collectionSlug,\n                      value: {\n                        ...result,\n                        collection: collectionSlug,\n                      },\n                    }\n                  } else {\n                    results[i] = result\n                  }\n                }\n              }\n            }\n\n            if (value) {\n              value.forEach((relatedDoc, i) => {\n                resultPromises.push(createPopulationPromise(relatedDoc, i))\n              })\n            }\n\n            await Promise.all(resultPromises)\n            return results\n          }\n\n          let id = value\n          if (isRelatedToManyCollections && value) {\n            id = value.value\n            relatedCollectionSlug = value.relationTo\n          }\n\n          if (id) {\n            if (\n              graphQLCollections.some((collection) => collection.slug === relatedCollectionSlug)\n            ) {\n              const relatedDocument = await context.req.payloadDataLoader.load(\n                createDataloaderCacheKey({\n                  collectionSlug: relatedCollectionSlug as string,\n                  currentDepth: 0,\n                  depth: 0,\n                  docID: id,\n                  draft,\n                  fallbackLocale,\n                  locale,\n                  overrideAccess: false,\n                  showHiddenFields: false,\n                  transactionID: context.req.transactionID,\n                }),\n              )\n\n              if (relatedDocument) {\n                if (isRelatedToManyCollections) {\n                  return {\n                    relationTo: relatedCollectionSlug,\n                    value: {\n                      ...relatedDocument,\n                      collection: relatedCollectionSlug,\n                    },\n                  }\n                }\n\n                return relatedDocument\n              }\n            }\n\n            return null\n          }\n\n          return null\n        },\n      }\n\n      return {\n        ...objectTypeConfig,\n        [field.name]: relationship,\n      }\n    },\n    richText: (objectTypeConfig: ObjectTypeConfig, field: RichTextField) => ({\n      ...objectTypeConfig,\n      [field.name]: {\n        type: withNullableType(field, GraphQLJSON, forceNullable),\n        args: {\n          depth: {\n            type: GraphQLInt,\n          },\n        },\n        async resolve(parent, args, context: Context) {\n          let depth = config.defaultDepth\n          if (typeof args.depth !== 'undefined') {\n            depth = args.depth\n          }\n          if (!field?.editor) {\n            throw new MissingEditorProp(field) // while we allow disabling editor functionality, you should not have any richText fields defined if you do not have an editor\n          }\n\n          if (typeof field?.editor === 'function') {\n            throw new Error('Attempted to access unsanitized rich text editor.')\n          }\n\n          const editor: RichTextAdapter = field?.editor\n\n          // RichText fields have their own depth argument in GraphQL.\n          // This is why the populationPromise (which populates richtext fields like uploads and relationships)\n          // is run here again, with the provided depth.\n          // In the graphql find.ts resolver, the depth is then hard-coded to 0.\n          // Effectively, this means that the populationPromise for GraphQL is only run here, and not in the find.ts resolver / normal population promise.\n          if (editor?.graphQLPopulationPromises) {\n            const fieldPromises = []\n            const populationPromises = []\n            const populateDepth =\n              field?.maxDepth !== undefined && field?.maxDepth < depth ? field?.maxDepth : depth\n\n            editor?.graphQLPopulationPromises({\n              context,\n              depth: populateDepth,\n              draft: args.draft,\n              field,\n              fieldPromises,\n              findMany: false,\n              flattenLocales: false,\n              overrideAccess: false,\n              populationPromises,\n              req: context.req,\n              showHiddenFields: false,\n              siblingDoc: parent,\n            })\n            await Promise.all(fieldPromises)\n            await Promise.all(populationPromises)\n          }\n\n          return parent[field.name]\n        },\n      },\n    }),\n    row: (objectTypeConfig: ObjectTypeConfig, field: RowField) =>\n      field.fields.reduce((objectTypeConfigWithRowFields, subField) => {\n        const addSubField = fieldToSchemaMap[subField.type]\n        if (addSubField) {\n          return addSubField(objectTypeConfigWithRowFields, subField)\n        }\n        return objectTypeConfigWithRowFields\n      }, objectTypeConfig),\n    select: (objectTypeConfig: ObjectTypeConfig, field: SelectField) => {\n      const fullName = combineParentName(parentName, field.name)\n\n      let type: GraphQLType = new GraphQLEnumType({\n        name: fullName,\n        values: formatOptions(field),\n      })\n\n      type = field.hasMany ? new GraphQLList(new GraphQLNonNull(type)) : type\n      type = withNullableType(field, type, forceNullable)\n\n      return {\n        ...objectTypeConfig,\n        [field.name]: { type },\n      }\n    },\n    tabs: (objectTypeConfig: ObjectTypeConfig, field: TabsField) =>\n      field.tabs.reduce((tabSchema, tab) => {\n        if (tabHasName(tab)) {\n          const interfaceName =\n            tab?.interfaceName || combineParentName(parentName, toWords(tab.name, true))\n\n          if (!graphqlResult.types.groupTypes[interfaceName]) {\n            const objectType = buildObjectType({\n              name: interfaceName,\n              config,\n              fields: tab.fields,\n              forceNullable,\n              graphqlResult,\n              parentName: interfaceName,\n            })\n\n            if (Object.keys(objectType.getFields()).length) {\n              graphqlResult.types.groupTypes[interfaceName] = objectType\n            }\n          }\n\n          if (!graphqlResult.types.groupTypes[interfaceName]) {\n            return tabSchema\n          }\n\n          return {\n            ...tabSchema,\n            [tab.name]: {\n              type: graphqlResult.types.groupTypes[interfaceName],\n              resolve(parent, args, context: Context) {\n                return {\n                  ...parent[tab.name],\n                  _id: parent._id ?? parent.id,\n                }\n              },\n            },\n          }\n        }\n\n        return {\n          ...tabSchema,\n          ...tab.fields.reduce((subFieldSchema, subField) => {\n            const addSubField = fieldToSchemaMap[subField.type]\n            if (addSubField) {\n              return addSubField(subFieldSchema, subField)\n            }\n            return subFieldSchema\n          }, tabSchema),\n        }\n      }, objectTypeConfig),\n    text: (objectTypeConfig: ObjectTypeConfig, field: TextField) => ({\n      ...objectTypeConfig,\n      [field.name]: {\n        type: withNullableType(\n          field,\n          field.hasMany === true ? new GraphQLList(GraphQLString) : GraphQLString,\n          forceNullable,\n        ),\n      },\n    }),\n    textarea: (objectTypeConfig: ObjectTypeConfig, field: TextareaField) => ({\n      ...objectTypeConfig,\n      [field.name]: { type: withNullableType(field, GraphQLString, forceNullable) },\n    }),\n    upload: (objectTypeConfig: ObjectTypeConfig, field: UploadField) => {\n      const { relationTo } = field\n      const isRelatedToManyCollections = Array.isArray(relationTo)\n      const hasManyValues = field.hasMany\n      const relationshipName = combineParentName(parentName, toWords(field.name, true))\n\n      let type\n      let relationToType = null\n\n      if (Array.isArray(relationTo)) {\n        relationToType = new GraphQLEnumType({\n          name: `${relationshipName}_RelationTo`,\n          values: relationTo.reduce(\n            (relations, relation) => ({\n              ...relations,\n              [formatName(relation)]: {\n                value: relation,\n              },\n            }),\n            {},\n          ),\n        })\n\n        const types = relationTo.map((relation) => graphqlResult.collections[relation].graphQL.type)\n\n        type = new GraphQLObjectType({\n          name: `${relationshipName}_Relationship`,\n          fields: {\n            relationTo: {\n              type: relationToType,\n            },\n            value: {\n              type: new GraphQLUnionType({\n                name: relationshipName,\n                resolveType(data) {\n                  return graphqlResult.collections[data.collection].graphQL.type.name\n                },\n                types,\n              }),\n            },\n          },\n        })\n      } else {\n        ;({ type } = graphqlResult.collections[relationTo].graphQL)\n      }\n\n      // If the relationshipType is undefined at this point,\n      // it can be assumed that this blockType can have a relationship\n      // to itself. Therefore, we set the relationshipType equal to the blockType\n      // that is currently being created.\n\n      type = type || newlyCreatedBlockType\n\n      const relationshipArgs: {\n        draft?: unknown\n        fallbackLocale?: unknown\n        limit?: unknown\n        locale?: unknown\n        page?: unknown\n        where?: unknown\n      } = {}\n\n      const relationsUseDrafts = (Array.isArray(relationTo) ? relationTo : [relationTo]).some(\n        (relation) => graphqlResult.collections[relation].config.versions?.drafts,\n      )\n\n      if (relationsUseDrafts) {\n        relationshipArgs.draft = {\n          type: GraphQLBoolean,\n        }\n      }\n\n      if (config.localization) {\n        relationshipArgs.locale = {\n          type: graphqlResult.types.localeInputType,\n        }\n\n        relationshipArgs.fallbackLocale = {\n          type: graphqlResult.types.fallbackLocaleInputType,\n        }\n      }\n\n      const relationship = {\n        type: withNullableType(\n          field,\n          hasManyValues ? new GraphQLList(new GraphQLNonNull(type)) : type,\n          forceNullable,\n        ),\n        args: relationshipArgs,\n        extensions: {\n          complexity:\n            typeof field?.graphQL?.complexity === 'number' ? field.graphQL.complexity : 10,\n        },\n        async resolve(parent, args, context: Context) {\n          const value = parent[field.name]\n          const locale = args.locale || context.req.locale\n          const fallbackLocale = args.fallbackLocale || context.req.fallbackLocale\n          let relatedCollectionSlug = field.relationTo\n          const draft = Boolean(args.draft ?? context.req.query?.draft)\n\n          if (hasManyValues) {\n            const results = []\n            const resultPromises = []\n\n            const createPopulationPromise = async (relatedDoc, i) => {\n              let id = relatedDoc\n              let collectionSlug = field.relationTo\n\n              if (isRelatedToManyCollections) {\n                collectionSlug = relatedDoc.relationTo\n                id = relatedDoc.value\n              }\n\n              const result = await context.req.payloadDataLoader.load(\n                createDataloaderCacheKey({\n                  collectionSlug,\n                  currentDepth: 0,\n                  depth: 0,\n                  docID: id,\n                  draft,\n                  fallbackLocale,\n                  locale,\n                  overrideAccess: false,\n                  showHiddenFields: false,\n                  transactionID: context.req.transactionID,\n                }),\n              )\n\n              if (result) {\n                if (isRelatedToManyCollections) {\n                  results[i] = {\n                    relationTo: collectionSlug,\n                    value: {\n                      ...result,\n                      collection: collectionSlug,\n                    },\n                  }\n                } else {\n                  results[i] = result\n                }\n              }\n            }\n\n            if (value) {\n              value.forEach((relatedDoc, i) => {\n                resultPromises.push(createPopulationPromise(relatedDoc, i))\n              })\n            }\n\n            await Promise.all(resultPromises)\n            return results\n          }\n\n          let id = value\n          if (isRelatedToManyCollections && value) {\n            id = value.value\n            relatedCollectionSlug = value.relationTo\n          }\n\n          if (id) {\n            const relatedDocument = await context.req.payloadDataLoader.load(\n              createDataloaderCacheKey({\n                collectionSlug: relatedCollectionSlug,\n                currentDepth: 0,\n                depth: 0,\n                docID: id,\n                draft,\n                fallbackLocale,\n                locale,\n                overrideAccess: false,\n                showHiddenFields: false,\n                transactionID: context.req.transactionID,\n              }),\n            )\n\n            if (relatedDocument) {\n              if (isRelatedToManyCollections) {\n                return {\n                  relationTo: relatedCollectionSlug,\n                  value: {\n                    ...relatedDocument,\n                    collection: relatedCollectionSlug,\n                  },\n                }\n              }\n\n              return relatedDocument\n            }\n\n            return null\n          }\n\n          return null\n        },\n      }\n\n      return {\n        ...objectTypeConfig,\n        [field.name]: relationship,\n      }\n    },\n  }\n\n  const objectSchema = {\n    name,\n    fields: () =>\n      fields.reduce((objectTypeConfig, field) => {\n        const fieldSchema = fieldToSchemaMap[field.type]\n\n        if (typeof fieldSchema !== 'function') {\n          return objectTypeConfig\n        }\n\n        return {\n          ...objectTypeConfig,\n          ...fieldSchema(objectTypeConfig, field),\n        }\n      }, baseFields),\n  }\n\n  const newlyCreatedBlockType = new GraphQLObjectType(objectSchema)\n\n  return newlyCreatedBlockType\n}\n"],"names":["GraphQLBoolean","GraphQLEnumType","GraphQLFloat","GraphQLInt","GraphQLList","GraphQLNonNull","GraphQLObjectType","GraphQLString","GraphQLUnionType","DateTimeResolver","EmailAddressResolver","combineQueries","createDataloaderCacheKey","MissingEditorProp","toWords","tabHasName","GraphQLJSON","combineParentName","formatName","formatOptions","isFieldNullable","withNullableType","buildObjectType","name","baseFields","config","fields","forceNullable","graphqlResult","parentName","fieldToSchemaMap","array","objectTypeConfig","field","interfaceName","types","arrayTypes","objectType","Object","keys","getFields","length","arrayType","type","blocks","blockTypes","reduce","acc","block","slug","graphQL","singularName","push","fullName","resolveType","data","blockType","checkbox","code","collapsible","objectTypeConfigWithCollapsibleFields","subField","addSubField","date","email","group","groupTypes","resolve","parent","args","context","_id","id","join","joinName","joinType","docs","collections","collection","hasNextPage","limit","sort","where","whereInputType","extensions","complexity","req","fullWhere","on","equals","payload","find","depth","fallbackLocale","locale","overrideAccess","json","number","hasMany","point","radio","values","relationship","relationTo","isRelatedToManyCollections","Array","isArray","hasManyValues","relationshipName","relationToType","graphQLCollections","filter","collectionConfig","relation","some","relations","value","map","newlyCreatedBlockType","relationshipArgs","relationsUseDrafts","versions","drafts","draft","localization","localeInputType","fallbackLocaleInputType","relatedCollectionSlug","Boolean","query","results","resultPromises","createPopulationPromise","relatedDoc","i","collectionSlug","isValidGraphQLCollection","includes","result","payloadDataLoader","load","currentDepth","docID","showHiddenFields","transactionID","forEach","Promise","all","relatedDocument","richText","defaultDepth","editor","Error","graphQLPopulationPromises","fieldPromises","populationPromises","populateDepth","maxDepth","undefined","findMany","flattenLocales","siblingDoc","row","objectTypeConfigWithRowFields","select","tabs","tabSchema","tab","subFieldSchema","text","textarea","upload","objectSchema","fieldSchema"],"mappings":";;;AA6BA,SACEA,cAAc,EACdC,eAAe,EACfC,YAAY,EACZC,UAAU,EACVC,WAAW,EACXC,cAAc,EACdC,iBAAiB,EACjBC,aAAa,EACbC,gBAAgB,QACX,UAAS;AAOhB,SAASQ,WAAW,QAAQ,yCAAwC;AACpE,SAASC,iBAAiB,QAAQ,oCAAmC;AACrE,SAASC,UAAU,QAAQ,6BAA4B;AACvD,SAASC,aAAa,QAAQ,gCAA+B;AAC7D,SAASC,eAAe,QAAQ,uBAAsB;AACtD,SAASC,gBAAgB,QAAQ,wBAAuB;AAVxD,SAASV,cAAc,EAAEC,wBAAwB,EAAEC,iBAAiB,EAAEC,OAAO,QAAQ,UAAS;AAD9F,SAASL,gBAAgB,EAAEC,oBAAoB,QAAQ,kBAAiB;;;;;AAExE,SAASK,UAAU,QAAQ,iBAAgB;;;;;;;;;;;AAyBpC,SAASO,gBAAgB,EAC9BC,IAAI,EACJC,aAAa,CAAC,CAAC,EACfC,MAAM,EACNC,MAAM,EACNC,aAAa,EACbC,aAAa,EACbC,UAAU,EACL;IACL,MAAMC,mBAAmB;QACvBC,OAAO,CAACC,kBAAoCC;YAC1C,MAAMC,gBACJD,OAAOC,mZAAiBjB,oBAAAA,EAAkBY,qYAAYf,UAAAA,EAAQmB,MAAMV,IAAI,EAAE;YAE5E,IAAI,CAACK,cAAcO,KAAK,CAACC,UAAU,CAACF,cAAc,EAAE;gBAClD,MAAMG,aAAaf,gBAAgB;oBACjCC,MAAMW;oBACNT;oBACAC,QAAQO,MAAMP,MAAM;oBACpBC,mBAAeP,2YAAAA,EAAgBa,OAAON;oBACtCC;oBACAC,YAAYK;gBACd;gBAEA,IAAII,OAAOC,IAAI,CAACF,WAAWG,SAAS,IAAIC,MAAM,EAAE;oBAC9Cb,cAAcO,KAAK,CAACC,UAAU,CAACF,cAAc,GAAGG;gBAClD;YACF;YAEA,IAAI,CAACT,cAAcO,KAAK,CAACC,UAAU,CAACF,cAAc,EAAE;gBAClD,OAAOF;YACT;YAEA,MAAMU,YAAY,4GAAItC,cAAAA,CACpB,4GAAIC,iBAAAA,CAAeuB,cAAcO,KAAK,CAACC,UAAU,CAACF,cAAc;YAGlE,OAAO;gBACL,GAAGF,gBAAgB;gBACnB,CAACC,MAAMV,IAAI,CAAC,EAAE;oBAAEoB,oYAAMtB,mBAAAA,EAAiBY,OAAOS;gBAAW;YAC3D;QACF;QACAE,QAAQ,CAACZ,kBAAoCC;YAC3C,MAAMY,aAA4CZ,MAAMW,MAAM,CAACE,MAAM,CAAC,CAACC,KAAKC;gBAC1E,IAAI,CAACpB,cAAcO,KAAK,CAACU,UAAU,CAACG,MAAMC,IAAI,CAAC,EAAE;oBAC/C,MAAMf,gBACJc,OAAOd,iBAAiBc,OAAOE,SAASC,iBAAgBrC,kYAAAA,EAAQkC,MAAMC,IAAI,EAAE;oBAE9E,MAAMZ,aAAaf,gBAAgB;wBACjCC,MAAMW;wBACNT;wBACAC,QAAQ;+BACHsB,MAAMtB,MAAM;4BACf;gCACEH,MAAM;gCACNoB,MAAM;4BACR;yBACD;wBACDhB;wBACAC;wBACAC,YAAYK;oBACd;oBAEA,IAAII,OAAOC,IAAI,CAACF,WAAWG,SAAS,IAAIC,MAAM,EAAE;wBAC9Cb,cAAcO,KAAK,CAACU,UAAU,CAACG,MAAMC,IAAI,CAAC,GAAGZ;oBAC/C;gBACF;gBAEA,IAAIT,cAAcO,KAAK,CAACU,UAAU,CAACG,MAAMC,IAAI,CAAC,EAAE;oBAC9CF,IAAIK,IAAI,CAACxB,cAAcO,KAAK,CAACU,UAAU,CAACG,MAAMC,IAAI,CAAC;gBACrD;gBAEA,OAAOF;YACT,GAAG,EAAE;YAEL,IAAIF,WAAWJ,MAAM,KAAK,GAAG;gBAC3B,OAAOT;YACT;YAEA,MAAMqB,6YAAWpC,oBAAAA,EAAkBY,YAAYf,mYAAAA,EAAQmB,MAAMV,IAAI,EAAE;YAEnE,MAAMoB,OAAO,4GAAIvC,cAAAA,CACf,4GAAIC,iBAAAA,CACF,4GAAIG,mBAAAA,CAAiB;gBACnBe,MAAM8B;gBACNC,aAAa,CAACC,OAAS3B,cAAcO,KAAK,CAACU,UAAU,CAACU,KAAKC,SAAS,CAAC,CAACjC,IAAI;gBAC1EY,OAAOU;YACT;YAIJ,OAAO;gBACL,GAAGb,gBAAgB;gBACnB,CAACC,MAAMV,IAAI,CAAC,EAAE;oBAAEoB,oYAAMtB,mBAAAA,EAAiBY,OAAOU;gBAAM;YACtD;QACF;QACAc,UAAU,CAACzB,kBAAoCC,QAA0B,CAAA;gBACvE,GAAGD,gBAAgB;gBACnB,CAACC,MAAMV,IAAI,CAAC,EAAE;oBAAEoB,oYAAMtB,mBAAAA,EAAiBY,+GAAOjC,iBAAAA,EAAgB2B;gBAAe;YAC/E,CAAA;QACA+B,MAAM,CAAC1B,kBAAoCC,QAAsB,CAAA;gBAC/D,GAAGD,gBAAgB;gBACnB,CAACC,MAAMV,IAAI,CAAC,EAAE;oBAAEoB,oYAAMtB,mBAAAA,EAAiBY,+GAAO1B,gBAAAA,EAAeoB;gBAAe;YAC9E,CAAA;QACAgC,aAAa,CAAC3B,kBAAoCC,QAChDA,MAAMP,MAAM,CAACoB,MAAM,CAAC,CAACc,uCAAuCC;gBAC1D,MAAMC,cAAchC,gBAAgB,CAAC+B,SAASlB,IAAI,CAAC;gBACnD,IAAImB,aAAa;oBACf,OAAOA,YAAYF,uCAAuCC;gBAC5D;gBACA,OAAOD;YACT,GAAG5B;QACL+B,MAAM,CAAC/B,kBAAoCC,QAAsB,CAAA;gBAC/D,GAAGD,gBAAgB;gBACnB,CAACC,MAAMV,IAAI,CAAC,EAAE;oBAAEoB,mYAAMtB,oBAAAA,EAAiBY,yUAAOxB,mBAAAA,EAAkBkB;gBAAe;YACjF,CAAA;QACAqC,OAAO,CAAChC,kBAAoCC,QAAuB,CAAA;gBACjE,GAAGD,gBAAgB;gBACnB,CAACC,MAAMV,IAAI,CAAC,EAAE;oBAAEoB,oYAAMtB,mBAAAA,EAAiBY,sUAAOvB,uBAAAA,EAAsBiB;gBAAe;YACrF,CAAA;QACAsC,OAAO,CAACjC,kBAAoCC;YAC1C,MAAMC,gBACJD,OAAOC,kBAAiBjB,qZAAAA,EAAkBY,oYAAYf,WAAAA,EAAQmB,MAAMV,IAAI,EAAE;YAE5E,IAAI,CAACK,cAAcO,KAAK,CAAC+B,UAAU,CAAChC,cAAc,EAAE;gBAClD,MAAMG,aAAaf,gBAAgB;oBACjCC,MAAMW;oBACNT;oBACAC,QAAQO,MAAMP,MAAM;oBACpBC,4YAAeP,kBAAAA,EAAgBa,OAAON;oBACtCC;oBACAC,YAAYK;gBACd;gBAEA,IAAII,OAAOC,IAAI,CAACF,WAAWG,SAAS,IAAIC,MAAM,EAAE;oBAC9Cb,cAAcO,KAAK,CAAC+B,UAAU,CAAChC,cAAc,GAAGG;gBAClD;YACF;YAEA,IAAI,CAACT,cAAcO,KAAK,CAAC+B,UAAU,CAAChC,cAAc,EAAE;gBAClD,OAAOF;YACT;YAEA,OAAO;gBACL,GAAGA,gBAAgB;gBACnB,CAACC,MAAMV,IAAI,CAAC,EAAE;oBACZoB,MAAMf,cAAcO,KAAK,CAAC+B,UAAU,CAAChC,cAAc;oBACnDiC,SAAS,CAACC,QAAQC,MAAMC;wBACtB,OAAO;4BACL,GAAGF,MAAM,CAACnC,MAAMV,IAAI,CAAC;4BACrBgD,KAAKH,OAAOG,GAAG,IAAIH,OAAOI,EAAE;wBAC9B;oBACF;gBACF;YACF;QACF;QACAC,MAAM,CAACzC,kBAAoCC;YACzC,MAAMyC,6YAAWzD,oBAAAA,EAAkBY,YAAYf,mYAAAA,EAAQmB,MAAMV,IAAI,EAAE;YAEnE,MAAMoD,WAAW;gBACfhC,MAAM,4GAAIrC,oBAAAA,CAAkB;oBAC1BiB,MAAMmD;oBACNhD,QAAQ;wBACNkD,MAAM;4BACJjC,MAAM,IAAIvC,sHAAAA,CAAYwB,cAAciD,WAAW,CAAC5C,MAAM6C,UAAU,CAAC,CAAC5B,OAAO,CAACP,IAAI;wBAChF;wBACAoC,aAAa;4BAAEpC,8GAAM3C,iBAAAA;wBAAe;oBACtC;gBACF;gBACAqE,MAAM;oBACJW,OAAO;wBACLrC,MAAMxC,qHAAAA;oBACR;oBACA8E,MAAM;wBACJtC,8GAAMpC,gBAAAA;oBACR;oBACA2E,OAAO;wBACLvC,MAAMf,cAAciD,WAAW,CAAC5C,MAAM6C,UAAU,CAAC,CAAC5B,OAAO,CAACiC,cAAc;oBAC1E;gBACF;gBACAC,YAAY;oBACVC,YACE,OAAOpD,OAAOiB,SAASmC,eAAe,WAAWpD,MAAMiB,OAAO,CAACmC,UAAU,GAAG;gBAChF;gBACA,MAAMlB,SAAQC,MAAM,EAAEC,IAAI,EAAEC,OAAgB;oBAC1C,MAAM,EAAEQ,UAAU,EAAE,GAAG7C;oBACvB,MAAM,EAAE+C,KAAK,EAAEC,IAAI,EAAEC,KAAK,EAAE,GAAGb;oBAC/B,MAAM,EAAEiB,GAAG,EAAE,GAAGhB;oBAEhB,MAAMiB,aAAY5E,0YAAAA,EAAeuE,OAAO;wBACtC,CAACjD,MAAMuD,EAAE,CAAC,EAAE;4BAAEC,QAAQrB,OAAOG,GAAG,IAAIH,OAAOI,EAAE;wBAAC;oBAChD;oBAEA,OAAO,MAAMc,IAAII,OAAO,CAACC,IAAI,CAAC;wBAC5Bb;wBACAc,OAAO;wBACPC,gBAAgBP,IAAIO,cAAc;wBAClCb;wBACAc,QAAQR,IAAIQ,MAAM;wBAClBC,gBAAgB;wBAChBT;wBACAL;wBACAC,OAAOK;oBACT;gBACF;YACF;YAEA,OAAO;gBACL,GAAGvD,gBAAgB;gBACnB,CAACC,MAAMV,IAAI,CAAC,EAAEoD;YAChB;QACF;QACAqB,MAAM,CAAChE,kBAAoCC,QAAsB,CAAA;gBAC/D,GAAGD,gBAAgB;gBACnB,CAACC,MAAMV,IAAI,CAAC,EAAE;oBAAEoB,oYAAMtB,mBAAAA,EAAiBY,OAAOjB,0ZAAAA,EAAaW;gBAAe;YAC5E,CAAA;QACAsE,QAAQ,CAACjE,kBAAoCC;YAC3C,MAAMU,OAAOV,OAAOV,SAAS,8GAAOpB,cAAAA,2GAAaD,eAAAA;YACjD,OAAO;gBACL,GAAG8B,gBAAgB;gBACnB,CAACC,MAAMV,IAAI,CAAC,EAAE;oBACZoB,MAAMtB,iZAAAA,EACJY,OACAA,OAAOiE,YAAY,OAAO,4GAAI9F,cAAAA,CAAYuC,QAAQA,MAClDhB;gBAEJ;YACF;QACF;QACAwE,OAAO,CAACnE,kBAAoCC,QAAuB,CAAA;gBACjE,GAAGD,gBAAgB;gBACnB,CAACC,MAAMV,IAAI,CAAC,EAAE;oBACZoB,oYAAMtB,mBAAAA,EACJY,OACA,4GAAI7B,cAAAA,CAAY,4GAAIC,iBAAAA,yGAAeH,eAAAA,IACnCyB;gBAEJ;YACF,CAAA;QACAyE,OAAO,CAACpE,kBAAoCC,QAAuB,CAAA;gBACjE,GAAGD,gBAAgB;gBACnB,CAACC,MAAMV,IAAI,CAAC,EAAE;oBACZoB,oYAAMtB,mBAAAA,EACJY,OACA,4GAAIhC,kBAAAA,CAAgB;wBAClBsB,wYAAMN,oBAAAA,EAAkBY,YAAYI,MAAMV,IAAI;wBAC9C8E,sYAAQlF,gBAAAA,EAAcc;oBACxB,IACAN;gBAEJ;YACF,CAAA;QACA2E,cAAc,CAACtE,kBAAoCC;YACjD,MAAM,EAAEsE,UAAU,EAAE,GAAGtE;YACvB,MAAMuE,6BAA6BC,MAAMC,OAAO,CAACH;YACjD,MAAMI,gBAAgB1E,MAAMiE,OAAO;YACnC,MAAMU,qZAAmB3F,oBAAAA,EAAkBY,qYAAYf,UAAAA,EAAQmB,MAAMV,IAAI,EAAE;YAE3E,IAAIoB;YACJ,IAAIkE,iBAAiB;YAErB,MAAMC,qBAAqBrF,OAAOoD,WAAW,CAACkC,MAAM,CAClD,CAACC,mBAAqBA,iBAAiB9D,OAAO,KAAK;YAGrD,IAAIuD,MAAMC,OAAO,CAACH,aAAa;gBAC7BM,iBAAiB,4GAAI5G,kBAAAA,CAAgB;oBACnCsB,MAAM,GAAGqF,iBAAiB,WAAW,CAAC;oBACtCP,QAAQE,WACLQ,MAAM,CAAC,CAACE,WACPH,mBAAmBI,IAAI,CAAC,CAACpC,aAAeA,WAAW7B,IAAI,KAAKgE,WAE7DnE,MAAM,CACL,CAACqE,WAAWF,WAAc,CAAA;4BACxB,GAAGE,SAAS;4BACZ,4XAACjG,aAAAA,EAAW+F,UAAU,EAAE;gCACtBG,OAAOH;4BACT;wBACF,CAAA,GACA,CAAC;gBAEP;gBAEA,iDAAiD;gBACjD,MAAM9E,QAAQoE,WACXQ,MAAM,CAAC,CAACE,WACPH,mBAAmBI,IAAI,CAAC,CAACpC,aAAeA,WAAW7B,IAAI,KAAKgE,WAE7DI,GAAG,CAAC,CAACJ,WAAarF,cAAciD,WAAW,CAACoC,SAAS,EAAE/D,QAAQP;gBAElEA,OAAO,4GAAIrC,oBAAAA,CAAkB;oBAC3BiB,MAAM,GAAGqF,iBAAiB,aAAa,CAAC;oBACxClF,QAAQ;wBACN6E,YAAY;4BACV5D,MAAMkE;wBACR;wBACAO,OAAO;4BACLzE,MAAM,4GAAInC,mBAAAA,CAAiB;gCACzBe,MAAMqF;gCACNtD,aAAYC,IAAI;oCACd,OAAO3B,cAAciD,WAAW,CAACtB,KAAKuB,UAAU,CAAC,CAAC5B,OAAO,CAACP,IAAI,CAACpB,IAAI;gCACrE;gCACAY;4BACF;wBACF;oBACF;gBACF;YACF,OAAO;;gBACH,CAAA,EAAEQ,IAAI,EAAE,GAAGf,cAAciD,WAAW,CAAC0B,WAAW,CAACrD,OAAM;YAC3D;YAEA,sDAAsD;YACtD,gEAAgE;YAChE,2EAA2E;YAC3E,mCAAmC;YAEnCP,OAAOA,QAAQ2E;YAEf,MAAMC,mBAOF,CAAC;YAEL,MAAMC,qBAAsBf,CAAAA,MAAMC,OAAO,CAACH,cAAcA,aAAa;gBAACA;aAAU,EAC7EQ,MAAM,CAAC,CAACE,WAAaH,mBAAmBI,IAAI,CAAC,CAACpC,aAAeA,WAAW7B,IAAI,KAAKgE,WACjFC,IAAI,CAAC,CAACD,WAAarF,cAAciD,WAAW,CAACoC,SAAS,CAACxF,MAAM,CAACgG,QAAQ,EAAEC;YAE3E,IAAIF,oBAAoB;gBACtBD,iBAAiBI,KAAK,GAAG;oBACvBhF,8GAAM3C,iBAAAA;gBACR;YACF;YAEA,IAAIyB,OAAOmG,YAAY,EAAE;gBACvBL,iBAAiBzB,MAAM,GAAG;oBACxBnD,MAAMf,cAAcO,KAAK,CAAC0F,eAAe;gBAC3C;gBAEAN,iBAAiB1B,cAAc,GAAG;oBAChClD,MAAMf,cAAcO,KAAK,CAAC2F,uBAAuB;gBACnD;YACF;YAEA,MAAMxB,eAAe;gBACnB3D,UAAMtB,6YAAAA,EACJY,OACA0E,gBAAgB,4GAAIvG,cAAAA,CAAY,4GAAIC,iBAAAA,CAAesC,SAASA,MAC5DhB;gBAEF0C,MAAMkD;gBACNnC,YAAY;oBACVC,YACE,OAAOpD,OAAOiB,SAASmC,eAAe,WAAWpD,MAAMiB,OAAO,CAACmC,UAAU,GAAG;gBAChF;gBACA,MAAMlB,SAAQC,MAAM,EAAEC,IAAI,EAAEC,OAAgB;oBAC1C,MAAM8C,QAAQhD,MAAM,CAACnC,MAAMV,IAAI,CAAC;oBAChC,MAAMuE,SAASzB,KAAKyB,MAAM,IAAIxB,QAAQgB,GAAG,CAACQ,MAAM;oBAChD,MAAMD,iBAAiBxB,KAAKwB,cAAc,IAAIvB,QAAQgB,GAAG,CAACO,cAAc;oBACxE,IAAIkC,wBAAwB9F,MAAMsE,UAAU;oBAC5C,MAAMoB,QAAQK,QAAQ3D,KAAKsD,KAAK,IAAIrD,QAAQgB,GAAG,CAAC2C,KAAK,EAAEN;oBAEvD,IAAIhB,eAAe;wBACjB,MAAMuB,UAAU,EAAE;wBAClB,MAAMC,iBAAiB,EAAE;wBAEzB,MAAMC,0BAA0B,OAAOC,YAAYC;4BACjD,IAAI9D,KAAK6D;4BACT,IAAIE,iBAAiBtG,MAAMsE,UAAU;4BACrC,MAAMiC,2BAA2BhC,6BAC7BM,mBAAmBI,IAAI,CAAC,CAACpC,aAAeyD,eAAeE,QAAQ,CAAC3D,WAAW7B,IAAI,KAC/E6D,mBAAmBI,IAAI,CAAC,CAACpC,aAAeyD,mBAAmBzD,WAAW7B,IAAI;4BAE9E,IAAIuF,0BAA0B;gCAC5B,IAAIhC,4BAA4B;oCAC9B+B,iBAAiBF,WAAW9B,UAAU;oCACtC/B,KAAK6D,WAAWjB,KAAK;gCACvB;gCAEA,MAAMsB,SAAS,MAAMpE,QAAQgB,GAAG,CAACqD,iBAAiB,CAACC,IAAI,CACrDhI,oZAAAA,EAAyB;oCACvB2H,gBAAgBA;oCAChBM,cAAc;oCACdjD,OAAO;oCACPkD,OAAOtE;oCACPmD;oCACA9B;oCACAC;oCACAC,gBAAgB;oCAChBgD,kBAAkB;oCAClBC,eAAe1E,QAAQgB,GAAG,CAAC0D,aAAa;gCAC1C;gCAGF,IAAIN,QAAQ;oCACV,IAAIlC,4BAA4B;wCAC9B0B,OAAO,CAACI,EAAE,GAAG;4CACX/B,YAAYgC;4CACZnB,OAAO;gDACL,GAAGsB,MAAM;gDACT5D,YAAYyD;4CACd;wCACF;oCACF,OAAO;wCACLL,OAAO,CAACI,EAAE,GAAGI;oCACf;gCACF;4BACF;wBACF;wBAEA,IAAItB,OAAO;4BACTA,MAAM6B,OAAO,CAAC,CAACZ,YAAYC;gCACzBH,eAAe/E,IAAI,CAACgF,wBAAwBC,YAAYC;4BAC1D;wBACF;wBAEA,MAAMY,QAAQC,GAAG,CAAChB;wBAClB,OAAOD;oBACT;oBAEA,IAAI1D,KAAK4C;oBACT,IAAIZ,8BAA8BY,OAAO;wBACvC5C,KAAK4C,MAAMA,KAAK;wBAChBW,wBAAwBX,MAAMb,UAAU;oBAC1C;oBAEA,IAAI/B,IAAI;wBACN,IACEsC,mBAAmBI,IAAI,CAAC,CAACpC,aAAeA,WAAW7B,IAAI,KAAK8E,wBAC5D;4BACA,MAAMqB,kBAAkB,MAAM9E,QAAQgB,GAAG,CAACqD,iBAAiB,CAACC,IAAI,0XAC9DhI,2BAAAA,EAAyB;gCACvB2H,gBAAgBR;gCAChBc,cAAc;gCACdjD,OAAO;gCACPkD,OAAOtE;gCACPmD;gCACA9B;gCACAC;gCACAC,gBAAgB;gCAChBgD,kBAAkB;gCAClBC,eAAe1E,QAAQgB,GAAG,CAAC0D,aAAa;4BAC1C;4BAGF,IAAII,iBAAiB;gCACnB,IAAI5C,4BAA4B;oCAC9B,OAAO;wCACLD,YAAYwB;wCACZX,OAAO;4CACL,GAAGgC,eAAe;4CAClBtE,YAAYiD;wCACd;oCACF;gCACF;gCAEA,OAAOqB;4BACT;wBACF;wBAEA,OAAO;oBACT;oBAEA,OAAO;gBACT;YACF;YAEA,OAAO;gBACL,GAAGpH,gBAAgB;gBACnB,CAACC,MAAMV,IAAI,CAAC,EAAE+E;YAChB;QACF;QACA+C,UAAU,CAACrH,kBAAoCC,QAA0B,CAAA;gBACvE,GAAGD,gBAAgB;gBACnB,CAACC,MAAMV,IAAI,CAAC,EAAE;oBACZoB,oYAAMtB,mBAAAA,EAAiBY,kZAAOjB,eAAAA,EAAaW;oBAC3C0C,MAAM;wBACJuB,OAAO;4BACLjD,8GAAMxC,aAAAA;wBACR;oBACF;oBACA,MAAMgE,SAAQC,MAAM,EAAEC,IAAI,EAAEC,OAAgB;wBAC1C,IAAIsB,QAAQnE,OAAO6H,YAAY;wBAC/B,IAAI,OAAOjF,KAAKuB,KAAK,KAAK,aAAa;4BACrCA,QAAQvB,KAAKuB,KAAK;wBACpB;wBACA,IAAI,CAAC3D,OAAOsH,QAAQ;4BAClB,MAAM,2XAAI1I,oBAAAA,CAAkBoB,OAAO,8HAA8H;;wBACnK;wBAEA,IAAI,OAAOA,OAAOsH,WAAW,YAAY;4BACvC,MAAM,IAAIC,MAAM;wBAClB;wBAEA,MAAMD,SAA0BtH,OAAOsH;wBAEvC,4DAA4D;wBAC5D,qGAAqG;wBACrG,8CAA8C;wBAC9C,sEAAsE;wBACtE,gJAAgJ;wBAChJ,IAAIA,QAAQE,2BAA2B;4BACrC,MAAMC,gBAAgB,EAAE;4BACxB,MAAMC,qBAAqB,EAAE;4BAC7B,MAAMC,gBACJ3H,OAAO4H,aAAaC,aAAa7H,OAAO4H,WAAWjE,QAAQ3D,OAAO4H,WAAWjE;4BAE/E2D,QAAQE,0BAA0B;gCAChCnF;gCACAsB,OAAOgE;gCACPjC,OAAOtD,KAAKsD,KAAK;gCACjB1F;gCACAyH;gCACAK,UAAU;gCACVC,gBAAgB;gCAChBjE,gBAAgB;gCAChB4D;gCACArE,KAAKhB,QAAQgB,GAAG;gCAChByD,kBAAkB;gCAClBkB,YAAY7F;4BACd;4BACA,MAAM8E,QAAQC,GAAG,CAACO;4BAClB,MAAMR,QAAQC,GAAG,CAACQ;wBACpB;wBAEA,OAAOvF,MAAM,CAACnC,MAAMV,IAAI,CAAC;oBAC3B;gBACF;YACF,CAAA;QACA2I,KAAK,CAAClI,kBAAoCC,QACxCA,MAAMP,MAAM,CAACoB,MAAM,CAAC,CAACqH,+BAA+BtG;gBAClD,MAAMC,cAAchC,gBAAgB,CAAC+B,SAASlB,IAAI,CAAC;gBACnD,IAAImB,aAAa;oBACf,OAAOA,YAAYqG,+BAA+BtG;gBACpD;gBACA,OAAOsG;YACT,GAAGnI;QACLoI,QAAQ,CAACpI,kBAAoCC;YAC3C,MAAMoB,6YAAWpC,oBAAAA,EAAkBY,YAAYI,MAAMV,IAAI;YAEzD,IAAIoB,OAAoB,4GAAI1C,kBAAAA,CAAgB;gBAC1CsB,MAAM8B;gBACNgD,sYAAQlF,gBAAAA,EAAcc;YACxB;YAEAU,OAAOV,MAAMiE,OAAO,GAAG,IAAI9F,sHAAAA,CAAY,4GAAIC,iBAAAA,CAAesC,SAASA;YACnEA,qYAAOtB,mBAAAA,EAAiBY,OAAOU,MAAMhB;YAErC,OAAO;gBACL,GAAGK,gBAAgB;gBACnB,CAACC,MAAMV,IAAI,CAAC,EAAE;oBAAEoB;gBAAK;YACvB;QACF;QACA0H,MAAM,CAACrI,kBAAoCC,QACzCA,MAAMoI,IAAI,CAACvH,MAAM,CAAC,CAACwH,WAAWC;gBAC5B,6XAAIxJ,aAAAA,EAAWwJ,MAAM;oBACnB,MAAMrI,gBACJqI,KAAKrI,qBAAiBjB,kZAAAA,EAAkBY,qYAAYf,UAAAA,EAAQyJ,IAAIhJ,IAAI,EAAE;oBAExE,IAAI,CAACK,cAAcO,KAAK,CAAC+B,UAAU,CAAChC,cAAc,EAAE;wBAClD,MAAMG,aAAaf,gBAAgB;4BACjCC,MAAMW;4BACNT;4BACAC,QAAQ6I,IAAI7I,MAAM;4BAClBC;4BACAC;4BACAC,YAAYK;wBACd;wBAEA,IAAII,OAAOC,IAAI,CAACF,WAAWG,SAAS,IAAIC,MAAM,EAAE;4BAC9Cb,cAAcO,KAAK,CAAC+B,UAAU,CAAChC,cAAc,GAAGG;wBAClD;oBACF;oBAEA,IAAI,CAACT,cAAcO,KAAK,CAAC+B,UAAU,CAAChC,cAAc,EAAE;wBAClD,OAAOoI;oBACT;oBAEA,OAAO;wBACL,GAAGA,SAAS;wBACZ,CAACC,IAAIhJ,IAAI,CAAC,EAAE;4BACVoB,MAAMf,cAAcO,KAAK,CAAC+B,UAAU,CAAChC,cAAc;4BACnDiC,SAAQC,MAAM,EAAEC,IAAI,EAAEC,OAAgB;gCACpC,OAAO;oCACL,GAAGF,MAAM,CAACmG,IAAIhJ,IAAI,CAAC;oCACnBgD,KAAKH,OAAOG,GAAG,IAAIH,OAAOI,EAAE;gCAC9B;4BACF;wBACF;oBACF;gBACF;gBAEA,OAAO;oBACL,GAAG8F,SAAS;oBACZ,GAAGC,IAAI7I,MAAM,CAACoB,MAAM,CAAC,CAAC0H,gBAAgB3G;wBACpC,MAAMC,cAAchC,gBAAgB,CAAC+B,SAASlB,IAAI,CAAC;wBACnD,IAAImB,aAAa;4BACf,OAAOA,YAAY0G,gBAAgB3G;wBACrC;wBACA,OAAO2G;oBACT,GAAGF,UAAU;gBACf;YACF,GAAGtI;QACLyI,MAAM,CAACzI,kBAAoCC,QAAsB,CAAA;gBAC/D,GAAGD,gBAAgB;gBACnB,CAACC,MAAMV,IAAI,CAAC,EAAE;oBACZoB,oYAAMtB,mBAAAA,EACJY,OACAA,MAAMiE,OAAO,KAAK,OAAO,IAAI9F,sHAAAA,CAAYG,wHAAAA,4GAAiBA,gBAAAA,EAC1DoB;gBAEJ;YACF,CAAA;QACA+I,UAAU,CAAC1I,kBAAoCC,QAA0B,CAAA;gBACvE,GAAGD,gBAAgB;gBACnB,CAACC,MAAMV,IAAI,CAAC,EAAE;oBAAEoB,oYAAMtB,mBAAAA,EAAiBY,+GAAO1B,gBAAAA,EAAeoB;gBAAe;YAC9E,CAAA;QACAgJ,QAAQ,CAAC3I,kBAAoCC;YAC3C,MAAM,EAAEsE,UAAU,EAAE,GAAGtE;YACvB,MAAMuE,6BAA6BC,MAAMC,OAAO,CAACH;YACjD,MAAMI,gBAAgB1E,MAAMiE,OAAO;YACnC,MAAMU,qZAAmB3F,oBAAAA,EAAkBY,YAAYf,mYAAAA,EAAQmB,MAAMV,IAAI,EAAE;YAE3E,IAAIoB;YACJ,IAAIkE,iBAAiB;YAErB,IAAIJ,MAAMC,OAAO,CAACH,aAAa;gBAC7BM,iBAAiB,4GAAI5G,kBAAAA,CAAgB;oBACnCsB,MAAM,GAAGqF,iBAAiB,WAAW,CAAC;oBACtCP,QAAQE,WAAWzD,MAAM,CACvB,CAACqE,WAAWF,WAAc,CAAA;4BACxB,GAAGE,SAAS;4BACZ,CAACjG,wYAAAA,EAAW+F,UAAU,EAAE;gCACtBG,OAAOH;4BACT;wBACF,CAAA,GACA,CAAC;gBAEL;gBAEA,MAAM9E,QAAQoE,WAAWc,GAAG,CAAC,CAACJ,WAAarF,cAAciD,WAAW,CAACoC,SAAS,CAAC/D,OAAO,CAACP,IAAI;gBAE3FA,OAAO,4GAAIrC,oBAAAA,CAAkB;oBAC3BiB,MAAM,GAAGqF,iBAAiB,aAAa,CAAC;oBACxClF,QAAQ;wBACN6E,YAAY;4BACV5D,MAAMkE;wBACR;wBACAO,OAAO;4BACLzE,MAAM,4GAAInC,mBAAAA,CAAiB;gCACzBe,MAAMqF;gCACNtD,aAAYC,IAAI;oCACd,OAAO3B,cAAciD,WAAW,CAACtB,KAAKuB,UAAU,CAAC,CAAC5B,OAAO,CAACP,IAAI,CAACpB,IAAI;gCACrE;gCACAY;4BACF;wBACF;oBACF;gBACF;YACF,OAAO;;gBACH,CAAA,EAAEQ,IAAI,EAAE,GAAGf,cAAciD,WAAW,CAAC0B,WAAW,CAACrD,OAAM;YAC3D;YAEA,sDAAsD;YACtD,gEAAgE;YAChE,2EAA2E;YAC3E,mCAAmC;YAEnCP,OAAOA,QAAQ2E;YAEf,MAAMC,mBAOF,CAAC;YAEL,MAAMC,qBAAsBf,CAAAA,MAAMC,OAAO,CAACH,cAAcA,aAAa;gBAACA;aAAU,EAAGW,IAAI,CACrF,CAACD,WAAarF,cAAciD,WAAW,CAACoC,SAAS,CAACxF,MAAM,CAACgG,QAAQ,EAAEC;YAGrE,IAAIF,oBAAoB;gBACtBD,iBAAiBI,KAAK,GAAG;oBACvBhF,MAAM3C,yHAAAA;gBACR;YACF;YAEA,IAAIyB,OAAOmG,YAAY,EAAE;gBACvBL,iBAAiBzB,MAAM,GAAG;oBACxBnD,MAAMf,cAAcO,KAAK,CAAC0F,eAAe;gBAC3C;gBAEAN,iBAAiB1B,cAAc,GAAG;oBAChClD,MAAMf,cAAcO,KAAK,CAAC2F,uBAAuB;gBACnD;YACF;YAEA,MAAMxB,eAAe;gBACnB3D,MAAMtB,iZAAAA,EACJY,OACA0E,gBAAgB,4GAAIvG,cAAAA,CAAY,4GAAIC,iBAAAA,CAAesC,SAASA,MAC5DhB;gBAEF0C,MAAMkD;gBACNnC,YAAY;oBACVC,YACE,OAAOpD,OAAOiB,SAASmC,eAAe,WAAWpD,MAAMiB,OAAO,CAACmC,UAAU,GAAG;gBAChF;gBACA,MAAMlB,SAAQC,MAAM,EAAEC,IAAI,EAAEC,OAAgB;oBAC1C,MAAM8C,QAAQhD,MAAM,CAACnC,MAAMV,IAAI,CAAC;oBAChC,MAAMuE,SAASzB,KAAKyB,MAAM,IAAIxB,QAAQgB,GAAG,CAACQ,MAAM;oBAChD,MAAMD,iBAAiBxB,KAAKwB,cAAc,IAAIvB,QAAQgB,GAAG,CAACO,cAAc;oBACxE,IAAIkC,wBAAwB9F,MAAMsE,UAAU;oBAC5C,MAAMoB,QAAQK,QAAQ3D,KAAKsD,KAAK,IAAIrD,QAAQgB,GAAG,CAAC2C,KAAK,EAAEN;oBAEvD,IAAIhB,eAAe;wBACjB,MAAMuB,UAAU,EAAE;wBAClB,MAAMC,iBAAiB,EAAE;wBAEzB,MAAMC,0BAA0B,OAAOC,YAAYC;4BACjD,IAAI9D,KAAK6D;4BACT,IAAIE,iBAAiBtG,MAAMsE,UAAU;4BAErC,IAAIC,4BAA4B;gCAC9B+B,iBAAiBF,WAAW9B,UAAU;gCACtC/B,KAAK6D,WAAWjB,KAAK;4BACvB;4BAEA,MAAMsB,SAAS,MAAMpE,QAAQgB,GAAG,CAACqD,iBAAiB,CAACC,IAAI,EACrDhI,mZAAAA,EAAyB;gCACvB2H;gCACAM,cAAc;gCACdjD,OAAO;gCACPkD,OAAOtE;gCACPmD;gCACA9B;gCACAC;gCACAC,gBAAgB;gCAChBgD,kBAAkB;gCAClBC,eAAe1E,QAAQgB,GAAG,CAAC0D,aAAa;4BAC1C;4BAGF,IAAIN,QAAQ;gCACV,IAAIlC,4BAA4B;oCAC9B0B,OAAO,CAACI,EAAE,GAAG;wCACX/B,YAAYgC;wCACZnB,OAAO;4CACL,GAAGsB,MAAM;4CACT5D,YAAYyD;wCACd;oCACF;gCACF,OAAO;oCACLL,OAAO,CAACI,EAAE,GAAGI;gCACf;4BACF;wBACF;wBAEA,IAAItB,OAAO;4BACTA,MAAM6B,OAAO,CAAC,CAACZ,YAAYC;gCACzBH,eAAe/E,IAAI,CAACgF,wBAAwBC,YAAYC;4BAC1D;wBACF;wBAEA,MAAMY,QAAQC,GAAG,CAAChB;wBAClB,OAAOD;oBACT;oBAEA,IAAI1D,KAAK4C;oBACT,IAAIZ,8BAA8BY,OAAO;wBACvC5C,KAAK4C,MAAMA,KAAK;wBAChBW,wBAAwBX,MAAMb,UAAU;oBAC1C;oBAEA,IAAI/B,IAAI;wBACN,MAAM4E,kBAAkB,MAAM9E,QAAQgB,GAAG,CAACqD,iBAAiB,CAACC,IAAI,0XAC9DhI,2BAAAA,EAAyB;4BACvB2H,gBAAgBR;4BAChBc,cAAc;4BACdjD,OAAO;4BACPkD,OAAOtE;4BACPmD;4BACA9B;4BACAC;4BACAC,gBAAgB;4BAChBgD,kBAAkB;4BAClBC,eAAe1E,QAAQgB,GAAG,CAAC0D,aAAa;wBAC1C;wBAGF,IAAII,iBAAiB;4BACnB,IAAI5C,4BAA4B;gCAC9B,OAAO;oCACLD,YAAYwB;oCACZX,OAAO;wCACL,GAAGgC,eAAe;wCAClBtE,YAAYiD;oCACd;gCACF;4BACF;4BAEA,OAAOqB;wBACT;wBAEA,OAAO;oBACT;oBAEA,OAAO;gBACT;YACF;YAEA,OAAO;gBACL,GAAGpH,gBAAgB;gBACnB,CAACC,MAAMV,IAAI,CAAC,EAAE+E;YAChB;QACF;IACF;IAEA,MAAMsE,eAAe;QACnBrJ;QACAG,QAAQ,IACNA,OAAOoB,MAAM,CAAC,CAACd,kBAAkBC;gBAC/B,MAAM4I,cAAc/I,gBAAgB,CAACG,MAAMU,IAAI,CAAC;gBAEhD,IAAI,OAAOkI,gBAAgB,YAAY;oBACrC,OAAO7I;gBACT;gBAEA,OAAO;oBACL,GAAGA,gBAAgB;oBACnB,GAAG6I,YAAY7I,kBAAkBC,MAAM;gBACzC;YACF,GAAGT;IACP;IAEA,MAAM8F,wBAAwB,4GAAIhH,oBAAAA,CAAkBsK;IAEpD,OAAOtD;AACT","ignoreList":[0]}},
    {"offset": {"line": 2559, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2565, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/schema/buildPaginatedListType.ts"],"sourcesContent":["import { GraphQLBoolean, GraphQLInt, GraphQLList, GraphQLObjectType } from 'graphql'\n\nexport const buildPaginatedListType = (name, docType) =>\n  new GraphQLObjectType({\n    name,\n    fields: {\n      docs: {\n        type: new GraphQLList(docType),\n      },\n      hasNextPage: { type: GraphQLBoolean },\n      hasPrevPage: { type: GraphQLBoolean },\n      limit: { type: GraphQLInt },\n      nextPage: { type: GraphQLInt },\n      offset: { type: GraphQLInt },\n      page: { type: GraphQLInt },\n      pagingCounter: { type: GraphQLInt },\n      prevPage: { type: GraphQLInt },\n      totalDocs: { type: GraphQLInt },\n      totalPages: { type: GraphQLInt },\n    },\n  })\n"],"names":["GraphQLBoolean","GraphQLInt","GraphQLList","GraphQLObjectType","buildPaginatedListType","name","docType","fields","docs","type","hasNextPage","hasPrevPage","limit","nextPage","offset","page","pagingCounter","prevPage","totalDocs","totalPages"],"mappings":";;;AAAA,SAASA,cAAc,EAAEC,UAAU,EAAEC,WAAW,EAAEC,iBAAiB,QAAQ,UAAS;;AAE7E,MAAMC,yBAAyB,CAACC,MAAMC,UAC3C,4GAAIH,oBAAAA,CAAkB;QACpBE;QACAE,QAAQ;YACNC,MAAM;gBACJC,MAAM,4GAAIP,cAAAA,CAAYI;YACxB;YACAI,aAAa;gBAAED,8GAAMT,iBAAAA;YAAe;YACpCW,aAAa;gBAAEF,8GAAMT,iBAAAA;YAAe;YACpCY,OAAO;gBAAEH,8GAAMR,aAAAA;YAAW;YAC1BY,UAAU;gBAAEJ,8GAAMR,aAAAA;YAAW;YAC7Ba,QAAQ;gBAAEL,8GAAMR,aAAAA;YAAW;YAC3Bc,MAAM;gBAAEN,8GAAMR,aAAAA;YAAW;YACzBe,eAAe;gBAAEP,8GAAMR,aAAAA;YAAW;YAClCgB,UAAU;gBAAER,8GAAMR,aAAAA;YAAW;YAC7BiB,WAAW;gBAAET,8GAAMR,aAAAA;YAAW;YAC9BkB,YAAY;gBAAEV,8GAAMR,aAAAA;YAAW;QACjC;IACF,GAAE","ignoreList":[0]}},
    {"offset": {"line": 2608, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2614, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/schema/recursivelyBuildNestedPaths.ts"],"sourcesContent":["import type { FieldWithSubFields, TabsField } from 'payload'\n\nimport { fieldAffectsData, fieldIsPresentationalOnly } from 'payload/shared'\n\nimport { fieldToSchemaMap } from './fieldToWhereInputSchemaMap.js'\n\ntype Args = {\n  field: FieldWithSubFields | TabsField\n  nestedFieldName2: string\n  parentName: string\n}\n\nexport const recursivelyBuildNestedPaths = ({ field, nestedFieldName2, parentName }: Args) => {\n  const fieldName = fieldAffectsData(field) ? field.name : undefined\n  const nestedFieldName = fieldName || nestedFieldName2\n\n  if (field.type === 'tabs') {\n    // if the tab has a name, treat it as a group\n    // otherwise, treat it as a row\n    return field.tabs.reduce((tabSchema, tab: any) => {\n      tabSchema.push(\n        ...recursivelyBuildNestedPaths({\n          field: {\n            ...tab,\n            type: 'name' in tab ? 'group' : 'row',\n          },\n          nestedFieldName2: nestedFieldName,\n          parentName,\n        }),\n      )\n      return tabSchema\n    }, [])\n  }\n\n  const nestedPaths = field.fields.reduce((nestedFields, nestedField) => {\n    if (!fieldIsPresentationalOnly(nestedField)) {\n      if (!fieldAffectsData(nestedField)) {\n        return [\n          ...nestedFields,\n          ...recursivelyBuildNestedPaths({\n            field: nestedField,\n            nestedFieldName2: nestedFieldName,\n            parentName,\n          }),\n        ]\n      }\n\n      const nestedPathName = fieldAffectsData(nestedField)\n        ? `${nestedFieldName ? `${nestedFieldName}__` : ''}${nestedField.name}`\n        : undefined\n      const getFieldSchema = fieldToSchemaMap({\n        nestedFieldName,\n        parentName,\n      })[nestedField.type]\n\n      if (getFieldSchema) {\n        const fieldSchema = getFieldSchema({\n          ...nestedField,\n          name: nestedPathName,\n        })\n\n        if (Array.isArray(fieldSchema)) {\n          return [...nestedFields, ...fieldSchema]\n        }\n\n        return [\n          ...nestedFields,\n          {\n            type: fieldSchema,\n            key: nestedPathName,\n          },\n        ]\n      }\n    }\n\n    return nestedFields\n  }, [])\n\n  return nestedPaths\n}\n"],"names":["fieldAffectsData","fieldIsPresentationalOnly","fieldToSchemaMap","recursivelyBuildNestedPaths","field","nestedFieldName2","parentName","fieldName","name","undefined","nestedFieldName","type","tabs","reduce","tabSchema","tab","push","nestedPaths","fields","nestedFields","nestedField","nestedPathName","getFieldSchema","fieldSchema","Array","isArray","key"],"mappings":";;;AAIA,SAASE,gBAAgB,QAAQ,kCAAiC;AAFlE,SAASF,gBAAgB,EAAEC,yBAAyB,QAAQ,iBAAgB;;;AAUrE,MAAME,8BAA8B,CAAC,EAAEC,KAAK,EAAEC,gBAAgB,EAAEC,UAAU,EAAQ;IACvF,MAAMC,qYAAYP,mBAAAA,EAAiBI,SAASA,MAAMI,IAAI,GAAGC;IACzD,MAAMC,kBAAkBH,aAAaF;IAErC,IAAID,MAAMO,IAAI,KAAK,QAAQ;QACzB,6CAA6C;QAC7C,+BAA+B;QAC/B,OAAOP,MAAMQ,IAAI,CAACC,MAAM,CAAC,CAACC,WAAWC;YACnCD,UAAUE,IAAI,IACTb,4BAA4B;gBAC7BC,OAAO;oBACL,GAAGW,GAAG;oBACNJ,MAAM,UAAUI,MAAM,UAAU;gBAClC;gBACAV,kBAAkBK;gBAClBJ;YACF;YAEF,OAAOQ;QACT,GAAG,EAAE;IACP;IAEA,MAAMG,cAAcb,MAAMc,MAAM,CAACL,MAAM,CAAC,CAACM,cAAcC;QACrD,IAAI,CAACnB,qZAAAA,EAA0BmB,cAAc;YAC3C,IAAI,0XAACpB,mBAAAA,EAAiBoB,cAAc;gBAClC,OAAO;uBACFD;uBACAhB,4BAA4B;wBAC7BC,OAAOgB;wBACPf,kBAAkBK;wBAClBJ;oBACF;iBACD;YACH;YAEA,MAAMe,0YAAiBrB,mBAAAA,EAAiBoB,eACpC,GAAGV,kBAAkB,GAAGA,gBAAgB,EAAE,CAAC,GAAG,KAAKU,YAAYZ,IAAI,EAAE,GACrEC;YACJ,MAAMa,yZAAiBpB,mBAAAA,EAAiB;gBACtCQ;gBACAJ;YACF,EAAE,CAACc,YAAYT,IAAI,CAAC;YAEpB,IAAIW,gBAAgB;gBAClB,MAAMC,cAAcD,eAAe;oBACjC,GAAGF,WAAW;oBACdZ,MAAMa;gBACR;gBAEA,IAAIG,MAAMC,OAAO,CAACF,cAAc;oBAC9B,OAAO;2BAAIJ;2BAAiBI;qBAAY;gBAC1C;gBAEA,OAAO;uBACFJ;oBACH;wBACER,MAAMY;wBACNG,KAAKL;oBACP;iBACD;YACH;QACF;QAEA,OAAOF;IACT,GAAG,EAAE;IAEL,OAAOF;AACT,EAAC","ignoreList":[0]}},
    {"offset": {"line": 2680, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2686, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/schema/operators.ts"],"sourcesContent":["export const operators = {\n  comparison: ['greater_than_equal', 'greater_than', 'less_than_equal', 'less_than'],\n  contains: ['in', 'not_in', 'all'],\n  equality: ['equals', 'not_equals'],\n  geo: ['near'],\n  geojson: ['within', 'intersects'],\n  partial: ['like', 'contains'],\n}\n"],"names":["operators","comparison","contains","equality","geo","geojson","partial"],"mappings":";;;AAAO,MAAMA,YAAY;IACvBC,YAAY;QAAC;QAAsB;QAAgB;QAAmB;KAAY;IAClFC,UAAU;QAAC;QAAM;QAAU;KAAM;IACjCC,UAAU;QAAC;QAAU;KAAa;IAClCC,KAAK;QAAC;KAAO;IACbC,SAAS;QAAC;QAAU;KAAa;IACjCC,SAAS;QAAC;QAAQ;KAAW;AAC/B,EAAC","ignoreList":[0]}},
    {"offset": {"line": 2717, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2723, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/schema/withOperators.ts"],"sourcesContent":["import type { GraphQLType } from 'graphql'\nimport type { FieldAffectingData, NumberField, RadioField, SelectField } from 'payload'\n\nimport {\n  GraphQLBoolean,\n  GraphQLEnumType,\n  GraphQLFloat,\n  GraphQLInputObjectType,\n  GraphQLInt,\n  GraphQLList,\n  GraphQLString,\n} from 'graphql'\nimport { DateTimeResolver, EmailAddressResolver } from 'graphql-scalars'\nimport { optionIsObject } from 'payload/shared'\n\nimport { GraphQLJSON } from '../packages/graphql-type-json/index.js'\nimport { combineParentName } from '../utilities/combineParentName.js'\nimport { formatName } from '../utilities/formatName.js'\nimport { operators } from './operators.js'\n\ntype staticTypes =\n  | 'checkbox'\n  | 'code'\n  | 'date'\n  | 'email'\n  | 'json'\n  | 'number'\n  | 'point'\n  | 'relationship'\n  | 'richText'\n  | 'text'\n  | 'textarea'\n  | 'upload'\n\ntype dynamicTypes = 'radio' | 'select'\n\nconst GeoJSONObject = new GraphQLInputObjectType({\n  name: 'GeoJSONObject',\n  fields: {\n    type: { type: GraphQLString },\n    coordinates: {\n      type: GraphQLJSON,\n    },\n  },\n})\n\ntype DefaultsType = {\n  [key in dynamicTypes]: {\n    operators: {\n      name: string\n      type: (field: FieldAffectingData, parentName: string) => GraphQLType\n    }[]\n  }\n} & {\n  [key in staticTypes]: {\n    operators: {\n      name: string\n      type: ((field: FieldAffectingData, parentName: string) => GraphQLType) | GraphQLType\n    }[]\n  }\n}\n\nconst defaults: DefaultsType = {\n  checkbox: {\n    operators: [\n      ...operators.equality.map((operator) => ({\n        name: operator,\n        type: GraphQLBoolean,\n      })),\n    ],\n  },\n  code: {\n    operators: [\n      ...[...operators.equality, ...operators.partial].map((operator) => ({\n        name: operator,\n        type: GraphQLString,\n      })),\n    ],\n  },\n  date: {\n    operators: [\n      ...[...operators.equality, ...operators.comparison, 'like'].map((operator) => ({\n        name: operator,\n        type: DateTimeResolver,\n      })),\n    ],\n  },\n  email: {\n    operators: [\n      ...[...operators.equality, ...operators.partial, ...operators.contains].map((operator) => ({\n        name: operator,\n        type: EmailAddressResolver,\n      })),\n    ],\n  },\n  json: {\n    operators: [\n      ...[...operators.equality, ...operators.partial, ...operators.geojson].map((operator) => ({\n        name: operator,\n        type: GraphQLJSON,\n      })),\n    ],\n  },\n  number: {\n    operators: [\n      ...[...operators.equality, ...operators.comparison].map((operator) => ({\n        name: operator,\n        type: (field: NumberField): GraphQLType => {\n          return field?.name === 'id' ? GraphQLInt : GraphQLFloat\n        },\n      })),\n    ],\n  },\n  point: {\n    operators: [\n      ...[...operators.equality, ...operators.comparison, ...operators.geo].map((operator) => ({\n        name: operator,\n        type: new GraphQLList(GraphQLFloat),\n      })),\n      ...operators.geojson.map((operator) => ({\n        name: operator,\n        /**\n         * @example:\n         * within: {\n         *  type: \"Polygon\",\n         *  coordinates: [[\n         *   [0.0, 0.0],\n         *   [1.0, 1.0],\n         *   [1.0, 0.0],\n         *   [0.0, 0.0],\n         *  ]],\n         * }\n         * @example\n         * intersects: {\n         *  type: \"Point\",\n         *  coordinates: [ 0.5, 0.5 ]\n         * }\n         */\n        type: GeoJSONObject,\n      })),\n    ],\n  },\n  radio: {\n    operators: [\n      ...[...operators.equality, ...operators.partial].map((operator) => ({\n        name: operator,\n        type: (field: RadioField, parentName): GraphQLType =>\n          new GraphQLEnumType({\n            name: `${combineParentName(parentName, field.name)}_Input`,\n            values: field.options.reduce((values, option) => {\n              if (optionIsObject(option)) {\n                return {\n                  ...values,\n                  [formatName(option.value)]: {\n                    value: option.value,\n                  },\n                }\n              }\n\n              return {\n                ...values,\n                [formatName(option)]: {\n                  value: option,\n                },\n              }\n            }, {}),\n          }),\n      })),\n    ],\n  },\n  relationship: {\n    operators: [\n      ...[...operators.equality, ...operators.contains].map((operator) => ({\n        name: operator,\n        type: GraphQLJSON,\n      })),\n    ],\n  },\n  richText: {\n    operators: [\n      ...[...operators.equality, ...operators.partial].map((operator) => ({\n        name: operator,\n        type: GraphQLJSON,\n      })),\n    ],\n  },\n  select: {\n    operators: [\n      ...[...operators.equality, ...operators.contains].map((operator) => ({\n        name: operator,\n        type: (field: SelectField, parentName): GraphQLType =>\n          new GraphQLEnumType({\n            name: `${combineParentName(parentName, field.name)}_Input`,\n            values: field.options.reduce((values, option) => {\n              if (optionIsObject(option)) {\n                return {\n                  ...values,\n                  [formatName(option.value)]: {\n                    value: option.value,\n                  },\n                }\n              }\n\n              return {\n                ...values,\n                [formatName(option)]: {\n                  value: option,\n                },\n              }\n            }, {}),\n          }),\n      })),\n    ],\n  },\n  text: {\n    operators: [\n      ...[...operators.equality, ...operators.partial, ...operators.contains].map((operator) => ({\n        name: operator,\n        type: GraphQLString,\n      })),\n    ],\n  },\n  textarea: {\n    operators: [\n      ...[...operators.equality, ...operators.partial].map((operator) => ({\n        name: operator,\n        type: GraphQLString,\n      })),\n    ],\n  },\n  upload: {\n    operators: [\n      ...[...operators.equality, ...operators.contains].map((operator) => ({\n        name: operator,\n        type: GraphQLJSON,\n      })),\n    ],\n  },\n  // array: n/a\n  // group: n/a\n  // row: n/a\n  // collapsible: n/a\n  // tabs: n/a\n}\n\nconst listOperators = ['in', 'not_in', 'all']\n\nconst gqlTypeCache: Record<string, GraphQLType> = {}\n\n/**\n * In GraphQL, you can use \"where\" as an argument to filter a collection. Example:\n * { Posts(where: { title: { equals: \"Hello\" } }) { text } }\n * This function defines the operators for a field's condition in the \"where\" argument of the collection (it thus gets called for every field).\n * For example, in the example above, it would control that\n * - \"equals\" is a valid operator for the \"title\" field\n * - the accepted type of the \"equals\" argument has to be a string.\n *\n * @param field the field for which their valid operators inside a \"where\" argument is being defined\n * @param parentName the name of the parent field (if any)\n * @returns all the operators (including their types) which can be used as a condition for a given field inside a where\n */\nexport const withOperators = (\n  field: FieldAffectingData,\n  parentName: string,\n): GraphQLInputObjectType => {\n  if (!defaults?.[field.type]) {\n    throw new Error(`Error: ${field.type} has no defaults configured.`)\n  }\n\n  const name = `${combineParentName(parentName, field.name)}_operator`\n\n  // Get the default operators for the field type which are hard-coded above\n  const fieldOperators = [...defaults[field.type].operators]\n\n  if (!('required' in field) || !field.required) {\n    fieldOperators.push({\n      name: 'exists',\n      type: fieldOperators[0].type,\n    })\n  }\n\n  return new GraphQLInputObjectType({\n    name,\n    fields: fieldOperators.reduce((objectTypeFields, operator) => {\n      // Get the type of the operator. It can be either static, or dynamic (=> a function)\n      let gqlType: GraphQLType =\n        typeof operator.type === 'function' ? operator.type(field, parentName) : operator.type\n\n      // GraphQL does not allow types with duplicate names, so we use this cache to avoid that.\n      // Without this, select and radio fields would have the same name, and GraphQL would throw an error\n      // This usually only happens if a custom type is returned from the operator.type function\n      if (typeof operator.type === 'function' && 'name' in gqlType) {\n        if (gqlTypeCache[gqlType.name]) {\n          gqlType = gqlTypeCache[gqlType.name]\n        } else {\n          gqlTypeCache[gqlType.name] = gqlType\n        }\n      }\n\n      if (listOperators.includes(operator.name)) {\n        gqlType = new GraphQLList(gqlType)\n      } else if (operator.name === 'exists') {\n        gqlType = GraphQLBoolean\n      }\n\n      return {\n        ...objectTypeFields,\n        [operator.name]: {\n          type: gqlType,\n        },\n      }\n    }, {}),\n  })\n}\n"],"names":["GraphQLBoolean","GraphQLEnumType","GraphQLFloat","GraphQLInputObjectType","GraphQLInt","GraphQLList","GraphQLString","DateTimeResolver","EmailAddressResolver","optionIsObject","GraphQLJSON","combineParentName","formatName","operators","GeoJSONObject","name","fields","type","coordinates","defaults","checkbox","equality","map","operator","code","partial","date","comparison","email","contains","json","geojson","number","field","point","geo","radio","parentName","values","options","reduce","option","value","relationship","richText","select","text","textarea","upload","listOperators","gqlTypeCache","withOperators","Error","fieldOperators","required","push","objectTypeFields","gqlType","includes"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3018, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3024, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/schema/fieldToWhereInputSchemaMap.ts"],"sourcesContent":["import type {\n  ArrayField,\n  CheckboxField,\n  CodeField,\n  CollapsibleField,\n  DateField,\n  EmailField,\n  GroupField,\n  JSONField,\n  NumberField,\n  PointField,\n  RadioField,\n  RelationshipField,\n  RichTextField,\n  RowField,\n  SelectField,\n  TabsField,\n  TextareaField,\n  TextField,\n  UploadField,\n} from 'payload'\n\nimport { GraphQLEnumType, GraphQLInputObjectType } from 'graphql'\n\nimport { GraphQLJSON } from '../packages/graphql-type-json/index.js'\nimport { combineParentName } from '../utilities/combineParentName.js'\nimport { formatName } from '../utilities/formatName.js'\nimport { recursivelyBuildNestedPaths } from './recursivelyBuildNestedPaths.js'\nimport { withOperators } from './withOperators.js'\n\ntype Args = {\n  nestedFieldName?: string\n  parentName: string\n}\n\nexport const fieldToSchemaMap = ({ nestedFieldName, parentName }: Args): any => ({\n  array: (field: ArrayField) =>\n    recursivelyBuildNestedPaths({\n      field,\n      nestedFieldName2: nestedFieldName,\n      parentName,\n    }),\n  checkbox: (field: CheckboxField) => ({\n    type: withOperators(field, parentName),\n  }),\n  code: (field: CodeField) => ({\n    type: withOperators(field, parentName),\n  }),\n  collapsible: (field: CollapsibleField) =>\n    recursivelyBuildNestedPaths({\n      field,\n      nestedFieldName2: nestedFieldName,\n      parentName,\n    }),\n  date: (field: DateField) => ({\n    type: withOperators(field, parentName),\n  }),\n  email: (field: EmailField) => ({\n    type: withOperators(field, parentName),\n  }),\n  group: (field: GroupField) =>\n    recursivelyBuildNestedPaths({\n      field,\n      nestedFieldName2: nestedFieldName,\n      parentName,\n    }),\n  json: (field: JSONField) => ({\n    type: withOperators(field, parentName),\n  }),\n  number: (field: NumberField) => ({\n    type: withOperators(field, parentName),\n  }),\n  point: (field: PointField) => ({\n    type: withOperators(field, parentName),\n  }),\n  radio: (field: RadioField) => ({\n    type: withOperators(field, parentName),\n  }),\n  relationship: (field: RelationshipField) => {\n    if (Array.isArray(field.relationTo)) {\n      return {\n        type: new GraphQLInputObjectType({\n          name: `${combineParentName(parentName, field.name)}_Relation`,\n          fields: {\n            relationTo: {\n              type: new GraphQLEnumType({\n                name: `${combineParentName(parentName, field.name)}_Relation_RelationTo`,\n                values: field.relationTo.reduce(\n                  (values, relation) => ({\n                    ...values,\n                    [formatName(relation)]: {\n                      value: relation,\n                    },\n                  }),\n                  {},\n                ),\n              }),\n            },\n            value: { type: GraphQLJSON },\n          },\n        }),\n      }\n    }\n\n    return {\n      type: withOperators(field, parentName),\n    }\n  },\n  richText: (field: RichTextField) => ({\n    type: withOperators(field, parentName),\n  }),\n  row: (field: RowField) =>\n    recursivelyBuildNestedPaths({\n      field,\n      nestedFieldName2: nestedFieldName,\n      parentName,\n    }),\n  select: (field: SelectField) => ({\n    type: withOperators(field, parentName),\n  }),\n  tabs: (field: TabsField) =>\n    recursivelyBuildNestedPaths({\n      field,\n      nestedFieldName2: nestedFieldName,\n      parentName,\n    }),\n  text: (field: TextField) => ({\n    type: withOperators(field, parentName),\n  }),\n  textarea: (field: TextareaField) => ({\n    type: withOperators(field, parentName),\n  }),\n  upload: (field: UploadField) => {\n    if (Array.isArray(field.relationTo)) {\n      return {\n        type: new GraphQLInputObjectType({\n          name: `${combineParentName(parentName, field.name)}_Relation`,\n          fields: {\n            relationTo: {\n              type: new GraphQLEnumType({\n                name: `${combineParentName(parentName, field.name)}_Relation_RelationTo`,\n                values: field.relationTo.reduce(\n                  (values, relation) => ({\n                    ...values,\n                    [formatName(relation)]: {\n                      value: relation,\n                    },\n                  }),\n                  {},\n                ),\n              }),\n            },\n            value: { type: GraphQLJSON },\n          },\n        }),\n      }\n    }\n\n    return {\n      type: withOperators(field, parentName),\n    }\n  },\n})\n"],"names":["GraphQLEnumType","GraphQLInputObjectType","GraphQLJSON","combineParentName","formatName","recursivelyBuildNestedPaths","withOperators","fieldToSchemaMap","nestedFieldName","parentName","array","field","nestedFieldName2","checkbox","type","code","collapsible","date","email","group","json","number","point","radio","relationship","Array","isArray","relationTo","name","fields","values","reduce","relation","value","richText","row","select","tabs","text","textarea","upload"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3158, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3164, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/schema/buildWhereInputType.ts"],"sourcesContent":["import type { Field, FieldAffectingData } from 'payload'\n\nimport { GraphQLInputObjectType, GraphQLList } from 'graphql'\nimport { flattenTopLevelFields } from 'payload'\nimport { fieldAffectsData, fieldHasSubFields, fieldIsPresentationalOnly } from 'payload/shared'\n\nimport { formatName } from '../utilities/formatName.js'\nimport { fieldToSchemaMap } from './fieldToWhereInputSchemaMap.js'\nimport { withOperators } from './withOperators.js'\n\ntype Args = {\n  fields: Field[]\n  name: string\n  parentName: string\n}\n\n/** This does as the function name suggests. It builds a where GraphQL input type\n * for all the fields which are passed to the function.\n * Each field has different operators which may be valid for a where input type.\n * For example, a text field may have a \"contains\" operator, but a number field\n * may not.\n *\n * buildWhereInputType is similar to buildObjectType and operates\n * on a field basis with a few distinct differences.\n *\n * 1. Everything needs to be a GraphQLInputObjectType or scalar / enum\n * 2. Relationships, groups, repeaters and flex content are not\n *    directly searchable. Instead, we need to build a chained pathname\n *    using dot notation so MongoDB can properly search nested paths.\n */\nexport const buildWhereInputType = ({ name, fields, parentName }: Args): GraphQLInputObjectType => {\n  // This is the function that builds nested paths for all\n  // field types with nested paths.\n\n  const idField = flattenTopLevelFields(fields).find(\n    (field) => fieldAffectsData(field) && field.name === 'id',\n  )\n\n  const fieldTypes = fields.reduce((schema, field) => {\n    if (!fieldIsPresentationalOnly(field) && !field.hidden) {\n      const getFieldSchema = fieldToSchemaMap({\n        parentName,\n      })[field.type]\n\n      if (getFieldSchema) {\n        const fieldSchema = getFieldSchema(field)\n\n        if (fieldHasSubFields(field) || field.type === 'tabs') {\n          return {\n            ...schema,\n            ...fieldSchema.reduce(\n              (subFields, subField) => ({\n                ...subFields,\n                [formatName(subField.key)]: subField.type,\n              }),\n              {},\n            ),\n          }\n        }\n\n        return {\n          ...schema,\n          [formatName(field.name)]: fieldSchema,\n        }\n      }\n    }\n\n    return schema\n  }, {})\n\n  if (!idField) {\n    fieldTypes.id = {\n      type: withOperators({ name: 'id', type: 'text' } as FieldAffectingData, parentName),\n    }\n  }\n\n  const fieldName = formatName(name)\n\n  const recursiveFields = {\n    AND: {\n      type: new GraphQLList(\n        new GraphQLInputObjectType({\n          name: `${fieldName}_where_and`,\n          fields: () => ({\n            ...fieldTypes,\n            ...recursiveFields,\n          }),\n        }),\n      ),\n    },\n    OR: {\n      type: new GraphQLList(\n        new GraphQLInputObjectType({\n          name: `${fieldName}_where_or`,\n          fields: () => ({\n            ...fieldTypes,\n            ...recursiveFields,\n          }),\n        }),\n      ),\n    },\n  }\n\n  return new GraphQLInputObjectType({\n    name: `${fieldName}_where`,\n    fields: {\n      ...fieldTypes,\n      ...recursiveFields,\n    },\n  })\n}\n"],"names":["GraphQLInputObjectType","GraphQLList","flattenTopLevelFields","fieldAffectsData","fieldHasSubFields","fieldIsPresentationalOnly","formatName","fieldToSchemaMap","withOperators","buildWhereInputType","name","fields","parentName","idField","find","field","fieldTypes","reduce","schema","hidden","getFieldSchema","type","fieldSchema","subFields","subField","key","id","fieldName","recursiveFields","AND","OR"],"mappings":";;;AAEA,SAASA,sBAAsB,EAAEC,WAAW,QAAQ,UAAS;AAI7D,SAASK,UAAU,QAAQ,6BAA4B;AACvD,SAASC,gBAAgB,QAAQ,kCAAiC;AAClE,SAASC,aAAa,QAAQ,qBAAoB;AALlD,SAASN,qBAAqB,QAAQ,UAAS;AAC/C,SAASC,gBAAgB,EAAEC,iBAAiB,EAAEC,yBAAyB,QAAQ,iBAAgB;;;;;;;AA0BxF,MAAMI,sBAAsB,CAAC,EAAEC,IAAI,EAAEC,MAAM,EAAEC,UAAU,EAAQ;IACpE,wDAAwD;IACxD,iCAAiC;IAEjC,MAAMC,+bAAUX,yBAAAA,EAAsBS,QAAQG,IAAI,CAChD,CAACC,iYAAUZ,mBAAAA,EAAiBY,UAAUA,MAAML,IAAI,KAAK;IAGvD,MAAMM,aAAaL,OAAOM,MAAM,CAAC,CAACC,QAAQH;QACxC,IAAI,0XAACV,4BAAAA,EAA0BU,UAAU,CAACA,MAAMI,MAAM,EAAE;YACtD,MAAMC,qBAAiBb,uZAAAA,EAAiB;gBACtCK;YACF,EAAE,CAACG,MAAMM,IAAI,CAAC;YAEd,IAAID,gBAAgB;gBAClB,MAAME,cAAcF,eAAeL;gBAEnC,IAAIX,6YAAAA,EAAkBW,UAAUA,MAAMM,IAAI,KAAK,QAAQ;oBACrD,OAAO;wBACL,GAAGH,MAAM;wBACT,GAAGI,YAAYL,MAAM,CACnB,CAACM,WAAWC,WAAc,CAAA;gCACxB,GAAGD,SAAS;gCACZ,4XAACjB,aAAAA,EAAWkB,SAASC,GAAG,EAAE,EAAED,SAASH,IAAI;4BAC3C,CAAA,GACA,CAAC,EACF;oBACH;gBACF;gBAEA,OAAO;oBACL,GAAGH,MAAM;oBACT,4XAACZ,aAAAA,EAAWS,MAAML,IAAI,EAAE,EAAEY;gBAC5B;YACF;QACF;QAEA,OAAOJ;IACT,GAAG,CAAC;IAEJ,IAAI,CAACL,SAAS;QACZG,WAAWU,EAAE,GAAG;YACdL,iYAAMb,gBAAAA,EAAc;gBAAEE,MAAM;gBAAMW,MAAM;YAAO,GAAyBT;QAC1E;IACF;IAEA,MAAMe,uYAAYrB,aAAAA,EAAWI;IAE7B,MAAMkB,kBAAkB;QACtBC,KAAK;YACHR,MAAM,4GAAIpB,cAAAA,CACR,4GAAID,yBAAAA,CAAuB;gBACzBU,MAAM,GAAGiB,UAAU,UAAU,CAAC;gBAC9BhB,QAAQ,IAAO,CAAA;wBACb,GAAGK,UAAU;wBACb,GAAGY,eAAe;oBACpB,CAAA;YACF;QAEJ;QACAE,IAAI;YACFT,MAAM,4GAAIpB,cAAAA,CACR,4GAAID,yBAAAA,CAAuB;gBACzBU,MAAM,GAAGiB,UAAU,SAAS,CAAC;gBAC7BhB,QAAQ,IAAO,CAAA;wBACb,GAAGK,UAAU;wBACb,GAAGY,eAAe;oBACpB,CAAA;YACF;QAEJ;IACF;IAEA,OAAO,4GAAI5B,yBAAAA,CAAuB;QAChCU,MAAM,GAAGiB,UAAU,MAAM,CAAC;QAC1BhB,QAAQ;YACN,GAAGK,UAAU;YACb,GAAGY,eAAe;QACpB;IACF;AACF,EAAC","ignoreList":[0]}},
    {"offset": {"line": 3244, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3250, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/schema/initCollections.ts"],"sourcesContent":["import type {\n  Collection,\n  Field,\n  GraphQLInfo,\n  SanitizedCollectionConfig,\n  SanitizedConfig,\n} from 'payload'\n\nimport {\n  GraphQLBoolean,\n  GraphQLInt,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLString,\n} from 'graphql'\nimport { buildVersionCollectionFields, flattenTopLevelFields, formatNames, toWords } from 'payload'\nimport { fieldAffectsData, getLoginOptions } from 'payload/shared'\n\nimport type { ObjectTypeConfig } from './buildObjectType.js'\n\nimport { forgotPassword } from '../resolvers/auth/forgotPassword.js'\nimport { init } from '../resolvers/auth/init.js'\nimport { login } from '../resolvers/auth/login.js'\nimport { logout } from '../resolvers/auth/logout.js'\nimport { me } from '../resolvers/auth/me.js'\nimport { refresh } from '../resolvers/auth/refresh.js'\nimport { resetPassword } from '../resolvers/auth/resetPassword.js'\nimport { unlock } from '../resolvers/auth/unlock.js'\nimport { verifyEmail } from '../resolvers/auth/verifyEmail.js'\nimport { countResolver } from '../resolvers/collections/count.js'\nimport { createResolver } from '../resolvers/collections/create.js'\nimport { getDeleteResolver } from '../resolvers/collections/delete.js'\nimport { docAccessResolver } from '../resolvers/collections/docAccess.js'\nimport { duplicateResolver } from '../resolvers/collections/duplicate.js'\nimport { findResolver } from '../resolvers/collections/find.js'\nimport { findByIDResolver } from '../resolvers/collections/findByID.js'\nimport { findVersionByIDResolver } from '../resolvers/collections/findVersionByID.js'\nimport { findVersionsResolver } from '../resolvers/collections/findVersions.js'\nimport { restoreVersionResolver } from '../resolvers/collections/restoreVersion.js'\nimport { updateResolver } from '../resolvers/collections/update.js'\nimport { formatName } from '../utilities/formatName.js'\nimport { buildMutationInputType, getCollectionIDType } from './buildMutationInputType.js'\nimport { buildObjectType } from './buildObjectType.js'\nimport { buildPaginatedListType } from './buildPaginatedListType.js'\nimport { buildPolicyType } from './buildPoliciesType.js'\nimport { buildWhereInputType } from './buildWhereInputType.js'\n\ntype InitCollectionsGraphQLArgs = {\n  config: SanitizedConfig\n  graphqlResult: GraphQLInfo\n}\nexport function initCollections({ config, graphqlResult }: InitCollectionsGraphQLArgs): void {\n  Object.keys(graphqlResult.collections).forEach((slug) => {\n    const collection: Collection = graphqlResult.collections[slug]\n    const {\n      config: collectionConfig,\n      config: { fields, graphQL = {} as SanitizedCollectionConfig['graphQL'], versions },\n    } = collection\n\n    if (!graphQL) {\n      return\n    }\n\n    let singularName\n    let pluralName\n\n    const fromSlug = formatNames(collection.config.slug)\n\n    if (graphQL.singularName) {\n      singularName = toWords(graphQL.singularName, true)\n    } else {\n      singularName = fromSlug.singular\n    }\n    if (graphQL.pluralName) {\n      pluralName = toWords(graphQL.pluralName, true)\n    } else {\n      pluralName = fromSlug.plural\n    }\n\n    // For collections named 'Media' or similar,\n    // there is a possibility that the singular name\n    // will equal the plural name. Append `all` to the beginning\n    // of potential conflicts\n    if (singularName === pluralName) {\n      pluralName = `all${singularName}`\n    }\n\n    collection.graphQL = {} as Collection['graphQL']\n\n    const hasIDField =\n      flattenTopLevelFields(fields).findIndex(\n        (field) => fieldAffectsData(field) && field.name === 'id',\n      ) > -1\n\n    const idType = getCollectionIDType(config.db.defaultIDType, collectionConfig)\n\n    const baseFields: ObjectTypeConfig = {}\n\n    const whereInputFields = [...fields]\n\n    if (!hasIDField) {\n      baseFields.id = { type: new GraphQLNonNull(idType) }\n      whereInputFields.push({\n        name: 'id',\n        type: config.db.defaultIDType as 'text',\n      })\n    }\n\n    const forceNullableObjectType = Boolean(versions?.drafts)\n\n    collection.graphQL.type = buildObjectType({\n      name: singularName,\n      baseFields,\n      config,\n      fields,\n      forceNullable: forceNullableObjectType,\n      graphqlResult,\n      parentName: singularName,\n    })\n\n    collection.graphQL.paginatedType = buildPaginatedListType(pluralName, collection.graphQL.type)\n\n    collection.graphQL.whereInputType = buildWhereInputType({\n      name: singularName,\n      fields: whereInputFields,\n      parentName: singularName,\n    })\n\n    const mutationInputFields = [...fields]\n\n    if (\n      collectionConfig.auth &&\n      (!collectionConfig.auth.disableLocalStrategy ||\n        (typeof collectionConfig.auth.disableLocalStrategy === 'object' &&\n          collectionConfig.auth.disableLocalStrategy.optionalPassword))\n    ) {\n      mutationInputFields.push({\n        name: 'password',\n        type: 'text',\n        label: 'Password',\n        required: !(\n          typeof collectionConfig.auth.disableLocalStrategy === 'object' &&\n          collectionConfig.auth.disableLocalStrategy.optionalPassword\n        ),\n      })\n    }\n\n    const createMutationInputType = buildMutationInputType({\n      name: singularName,\n      config,\n      fields: mutationInputFields,\n      graphqlResult,\n      parentName: singularName,\n    })\n    if (createMutationInputType) {\n      collection.graphQL.mutationInputType = new GraphQLNonNull(createMutationInputType)\n    }\n\n    const updateMutationInputType = buildMutationInputType({\n      name: `${singularName}Update`,\n      config,\n      fields: mutationInputFields.filter(\n        (field) => !(fieldAffectsData(field) && field.name === 'id'),\n      ),\n      forceNullable: true,\n      graphqlResult,\n      parentName: `${singularName}Update`,\n    })\n    if (updateMutationInputType) {\n      collection.graphQL.updateMutationInputType = new GraphQLNonNull(updateMutationInputType)\n    }\n\n    const queriesEnabled =\n      typeof collectionConfig.graphQL !== 'object' || !collectionConfig.graphQL.disableQueries\n    const mutationsEnabled =\n      typeof collectionConfig.graphQL !== 'object' || !collectionConfig.graphQL.disableMutations\n\n    if (queriesEnabled) {\n      graphqlResult.Query.fields[singularName] = {\n        type: collection.graphQL.type,\n        args: {\n          id: { type: new GraphQLNonNull(idType) },\n          draft: { type: GraphQLBoolean },\n          ...(config.localization\n            ? {\n                fallbackLocale: { type: graphqlResult.types.fallbackLocaleInputType },\n                locale: { type: graphqlResult.types.localeInputType },\n              }\n            : {}),\n        },\n        resolve: findByIDResolver(collection),\n      }\n\n      graphqlResult.Query.fields[pluralName] = {\n        type: buildPaginatedListType(pluralName, collection.graphQL.type),\n        args: {\n          draft: { type: GraphQLBoolean },\n          where: { type: collection.graphQL.whereInputType },\n          ...(config.localization\n            ? {\n                fallbackLocale: { type: graphqlResult.types.fallbackLocaleInputType },\n                locale: { type: graphqlResult.types.localeInputType },\n              }\n            : {}),\n          limit: { type: GraphQLInt },\n          page: { type: GraphQLInt },\n          pagination: { type: GraphQLBoolean },\n          sort: { type: GraphQLString },\n        },\n        resolve: findResolver(collection),\n      }\n\n      graphqlResult.Query.fields[`count${pluralName}`] = {\n        type: new GraphQLObjectType({\n          name: `count${pluralName}`,\n          fields: {\n            totalDocs: { type: GraphQLInt },\n          },\n        }),\n        args: {\n          draft: { type: GraphQLBoolean },\n          where: { type: collection.graphQL.whereInputType },\n          ...(config.localization\n            ? {\n                locale: { type: graphqlResult.types.localeInputType },\n              }\n            : {}),\n        },\n        resolve: countResolver(collection),\n      }\n\n      graphqlResult.Query.fields[`docAccess${singularName}`] = {\n        type: buildPolicyType({\n          type: 'collection',\n          entity: collectionConfig,\n          scope: 'docAccess',\n          typeSuffix: 'DocAccess',\n        }),\n        args: {\n          id: { type: new GraphQLNonNull(idType) },\n        },\n        resolve: docAccessResolver(collection),\n      }\n    }\n\n    if (mutationsEnabled) {\n      graphqlResult.Mutation.fields[`create${singularName}`] = {\n        type: collection.graphQL.type,\n        args: {\n          ...(createMutationInputType\n            ? { data: { type: collection.graphQL.mutationInputType } }\n            : {}),\n          draft: { type: GraphQLBoolean },\n          ...(config.localization\n            ? {\n                locale: { type: graphqlResult.types.localeInputType },\n              }\n            : {}),\n        },\n        resolve: createResolver(collection),\n      }\n\n      graphqlResult.Mutation.fields[`update${singularName}`] = {\n        type: collection.graphQL.type,\n        args: {\n          id: { type: new GraphQLNonNull(idType) },\n          autosave: { type: GraphQLBoolean },\n          ...(updateMutationInputType\n            ? { data: { type: collection.graphQL.updateMutationInputType } }\n            : {}),\n          draft: { type: GraphQLBoolean },\n          ...(config.localization\n            ? {\n                locale: { type: graphqlResult.types.localeInputType },\n              }\n            : {}),\n        },\n        resolve: updateResolver(collection),\n      }\n\n      graphqlResult.Mutation.fields[`delete${singularName}`] = {\n        type: collection.graphQL.type,\n        args: {\n          id: { type: new GraphQLNonNull(idType) },\n        },\n        resolve: getDeleteResolver(collection),\n      }\n\n      if (collectionConfig.disableDuplicate !== true) {\n        graphqlResult.Mutation.fields[`duplicate${singularName}`] = {\n          type: collection.graphQL.type,\n          args: {\n            id: { type: new GraphQLNonNull(idType) },\n            ...(createMutationInputType\n              ? { data: { type: collection.graphQL.mutationInputType } }\n              : {}),\n          },\n          resolve: duplicateResolver(collection),\n        }\n      }\n    }\n\n    if (collectionConfig.versions) {\n      const versionIDType = config.db.defaultIDType === 'text' ? GraphQLString : GraphQLInt\n      const versionCollectionFields: Field[] = [\n        ...buildVersionCollectionFields(config, collectionConfig),\n        {\n          name: 'id',\n          type: config.db.defaultIDType as 'text',\n        },\n        {\n          name: 'createdAt',\n          type: 'date',\n          label: 'Created At',\n        },\n        {\n          name: 'updatedAt',\n          type: 'date',\n          label: 'Updated At',\n        },\n      ]\n\n      collection.graphQL.versionType = buildObjectType({\n        name: `${singularName}Version`,\n        config,\n        fields: versionCollectionFields,\n        forceNullable: forceNullableObjectType,\n        graphqlResult,\n        parentName: `${singularName}Version`,\n      })\n\n      if (queriesEnabled) {\n        graphqlResult.Query.fields[`version${formatName(singularName)}`] = {\n          type: collection.graphQL.versionType,\n          args: {\n            id: { type: versionIDType },\n            ...(config.localization\n              ? {\n                  fallbackLocale: { type: graphqlResult.types.fallbackLocaleInputType },\n                  locale: { type: graphqlResult.types.localeInputType },\n                }\n              : {}),\n          },\n          resolve: findVersionByIDResolver(collection),\n        }\n        graphqlResult.Query.fields[`versions${pluralName}`] = {\n          type: buildPaginatedListType(\n            `versions${formatName(pluralName)}`,\n            collection.graphQL.versionType,\n          ),\n          args: {\n            where: {\n              type: buildWhereInputType({\n                name: `versions${singularName}`,\n                fields: versionCollectionFields,\n                parentName: `versions${singularName}`,\n              }),\n            },\n            ...(config.localization\n              ? {\n                  fallbackLocale: { type: graphqlResult.types.fallbackLocaleInputType },\n                  locale: { type: graphqlResult.types.localeInputType },\n                }\n              : {}),\n            limit: { type: GraphQLInt },\n            page: { type: GraphQLInt },\n            pagination: { type: GraphQLBoolean },\n            sort: { type: GraphQLString },\n          },\n          resolve: findVersionsResolver(collection),\n        }\n      }\n\n      if (mutationsEnabled) {\n        graphqlResult.Mutation.fields[`restoreVersion${formatName(singularName)}`] = {\n          type: collection.graphQL.type,\n          args: {\n            id: { type: versionIDType },\n            draft: { type: GraphQLBoolean },\n          },\n          resolve: restoreVersionResolver(collection),\n        }\n      }\n    }\n\n    if (collectionConfig.auth) {\n      const authFields: Field[] =\n        collectionConfig.auth.disableLocalStrategy ||\n        (collectionConfig.auth.loginWithUsername &&\n          !collectionConfig.auth.loginWithUsername.allowEmailLogin &&\n          !collectionConfig.auth.loginWithUsername.requireEmail)\n          ? []\n          : [\n              {\n                name: 'email',\n                type: 'email',\n                required: true,\n              },\n            ]\n      collection.graphQL.JWT = buildObjectType({\n        name: formatName(`${slug}JWT`),\n        config,\n        fields: [\n          ...collectionConfig.fields.filter((field) => fieldAffectsData(field) && field.saveToJWT),\n          ...authFields,\n          {\n            name: 'collection',\n            type: 'text',\n            required: true,\n          },\n        ],\n        graphqlResult,\n        parentName: formatName(`${slug}JWT`),\n      })\n\n      if (queriesEnabled) {\n        graphqlResult.Query.fields[`me${singularName}`] = {\n          type: new GraphQLObjectType({\n            name: formatName(`${slug}Me`),\n            fields: {\n              collection: {\n                type: GraphQLString,\n              },\n              exp: {\n                type: GraphQLInt,\n              },\n              strategy: {\n                type: GraphQLString,\n              },\n              token: {\n                type: GraphQLString,\n              },\n              user: {\n                type: collection.graphQL.type,\n              },\n            },\n          }),\n          resolve: me(collection),\n        }\n\n        graphqlResult.Query.fields[`initialized${singularName}`] = {\n          type: GraphQLBoolean,\n          resolve: init(collection.config.slug),\n        }\n      }\n\n      if (mutationsEnabled) {\n        graphqlResult.Mutation.fields[`refreshToken${singularName}`] = {\n          type: new GraphQLObjectType({\n            name: formatName(`${slug}Refreshed${singularName}`),\n            fields: {\n              exp: {\n                type: GraphQLInt,\n              },\n              refreshedToken: {\n                type: GraphQLString,\n              },\n              strategy: {\n                type: GraphQLString,\n              },\n              user: {\n                type: collection.graphQL.JWT,\n              },\n            },\n          }),\n          resolve: refresh(collection),\n        }\n\n        graphqlResult.Mutation.fields[`logout${singularName}`] = {\n          type: GraphQLString,\n          resolve: logout(collection),\n        }\n\n        if (!collectionConfig.auth.disableLocalStrategy) {\n          const authArgs = {}\n\n          const { canLoginWithEmail, canLoginWithUsername } = getLoginOptions(\n            collectionConfig.auth.loginWithUsername,\n          )\n\n          if (canLoginWithEmail) {\n            authArgs['email'] = { type: new GraphQLNonNull(GraphQLString) }\n          }\n          if (canLoginWithUsername) {\n            authArgs['username'] = { type: new GraphQLNonNull(GraphQLString) }\n          }\n\n          if (collectionConfig.auth.maxLoginAttempts > 0) {\n            graphqlResult.Mutation.fields[`unlock${singularName}`] = {\n              type: new GraphQLNonNull(GraphQLBoolean),\n              args: authArgs,\n              resolve: unlock(collection),\n            }\n          }\n\n          graphqlResult.Mutation.fields[`login${singularName}`] = {\n            type: new GraphQLObjectType({\n              name: formatName(`${slug}LoginResult`),\n              fields: {\n                exp: {\n                  type: GraphQLInt,\n                },\n                token: {\n                  type: GraphQLString,\n                },\n                user: {\n                  type: collection.graphQL.type,\n                },\n              },\n            }),\n            args: {\n              ...authArgs,\n              password: { type: GraphQLString },\n            },\n            resolve: login(collection),\n          }\n\n          graphqlResult.Mutation.fields[`forgotPassword${singularName}`] = {\n            type: new GraphQLNonNull(GraphQLBoolean),\n            args: {\n              disableEmail: { type: GraphQLBoolean },\n              expiration: { type: GraphQLInt },\n              ...authArgs,\n            },\n            resolve: forgotPassword(collection),\n          }\n\n          graphqlResult.Mutation.fields[`resetPassword${singularName}`] = {\n            type: new GraphQLObjectType({\n              name: formatName(`${slug}ResetPassword`),\n              fields: {\n                token: { type: GraphQLString },\n                user: { type: collection.graphQL.type },\n              },\n            }),\n            args: {\n              password: { type: GraphQLString },\n              token: { type: GraphQLString },\n            },\n            resolve: resetPassword(collection),\n          }\n\n          graphqlResult.Mutation.fields[`verifyEmail${singularName}`] = {\n            type: GraphQLBoolean,\n            args: {\n              token: { type: GraphQLString },\n            },\n            resolve: verifyEmail(collection),\n          }\n        }\n      }\n    }\n  })\n}\n"],"names":["GraphQLBoolean","GraphQLInt","GraphQLNonNull","GraphQLObjectType","GraphQLString","buildVersionCollectionFields","flattenTopLevelFields","formatNames","toWords","fieldAffectsData","getLoginOptions","forgotPassword","init","login","logout","me","refresh","resetPassword","unlock","verifyEmail","countResolver","createResolver","getDeleteResolver","docAccessResolver","duplicateResolver","findResolver","findByIDResolver","findVersionByIDResolver","findVersionsResolver","restoreVersionResolver","updateResolver","formatName","buildMutationInputType","getCollectionIDType","buildObjectType","buildPaginatedListType","buildPolicyType","buildWhereInputType","initCollections","config","graphqlResult","Object","keys","collections","forEach","slug","collection","collectionConfig","fields","graphQL","versions","singularName","pluralName","fromSlug","singular","plural","hasIDField","findIndex","field","name","idType","db","defaultIDType","baseFields","whereInputFields","id","type","push","forceNullableObjectType","Boolean","drafts","forceNullable","parentName","paginatedType","whereInputType","mutationInputFields","auth","disableLocalStrategy","optionalPassword","label","required","createMutationInputType","mutationInputType","updateMutationInputType","filter","queriesEnabled","disableQueries","mutationsEnabled","disableMutations","Query","args","draft","localization","fallbackLocale","types","fallbackLocaleInputType","locale","localeInputType","resolve","where","limit","page","pagination","sort","totalDocs","entity","scope","typeSuffix","Mutation","data","autosave","disableDuplicate","versionIDType","versionCollectionFields","versionType","authFields","loginWithUsername","allowEmailLogin","requireEmail","JWT","saveToJWT","exp","strategy","token","user","refreshedToken","authArgs","canLoginWithEmail","canLoginWithUsername","maxLoginAttempts","password","disableEmail","expiration"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3833, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3839, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/resolvers/globals/docAccess.ts"],"sourcesContent":["import type {\n  PayloadRequest,\n  SanitizedCollectionPermission,\n  SanitizedGlobalConfig,\n  SanitizedGlobalPermission,\n} from 'payload'\n\nimport { docAccessOperationGlobal, isolateObjectProperty } from 'payload'\n\nimport type { Context } from '../types.js'\n\nexport type Resolver = (\n  _: unknown,\n  context: {\n    req: PayloadRequest\n  },\n) => Promise<SanitizedCollectionPermission | SanitizedGlobalPermission>\n\nexport function docAccessResolver(global: SanitizedGlobalConfig): Resolver {\n  async function resolver(_, context: Context) {\n    return docAccessOperationGlobal({\n      globalConfig: global,\n      req: isolateObjectProperty(context.req, 'transactionID'),\n    })\n  }\n\n  return resolver\n}\n"],"names":["docAccessOperationGlobal","isolateObjectProperty","docAccessResolver","global","resolver","_","context","globalConfig","req"],"mappings":";;;AAOA,SAASA,wBAAwB,EAAEC,qBAAqB,QAAQ,UAAS;;;AAWlE,SAASC,kBAAkBC,MAA6B;IAC7D,eAAeC,SAASC,CAAC,EAAEC,OAAgB;QACzC,2cAAON,2BAAAA,EAAyB;YAC9BO,cAAcJ;YACdK,2bAAKP,wBAAAA,EAAsBK,QAAQE,GAAG,EAAE;QAC1C;IACF;IAEA,OAAOJ;AACT","ignoreList":[0]}},
    {"offset": {"line": 3854, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3860, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/resolvers/globals/findOne.ts"],"sourcesContent":["import type { Document, SanitizedGlobalConfig } from 'payload'\n\nimport { findOneOperation, isolateObjectProperty } from 'payload'\n\nimport type { Context } from '../types.js'\n\nexport function findOne(globalConfig: SanitizedGlobalConfig): Document {\n  return async function resolver(_, args, context: Context) {\n    if (args.locale) {\n      context.req.locale = args.locale\n    }\n    if (args.fallbackLocale) {\n      context.req.fallbackLocale = args.fallbackLocale\n    }\n\n    const { slug } = globalConfig\n\n    const options = {\n      slug,\n      depth: 0,\n      draft: args.draft,\n      globalConfig,\n      req: isolateObjectProperty(context.req, 'transactionID'),\n    }\n\n    const result = await findOneOperation(options)\n    return result\n  }\n}\n"],"names":["findOneOperation","isolateObjectProperty","findOne","globalConfig","resolver","_","args","context","locale","req","fallbackLocale","slug","options","depth","draft","result"],"mappings":";;;AAEA,SAASA,gBAAgB,EAAEC,qBAAqB,QAAQ,UAAS;;;AAI1D,SAASC,QAAQC,YAAmC;IACzD,OAAO,eAAeC,SAASC,CAAC,EAAEC,IAAI,EAAEC,OAAgB;QACtD,IAAID,KAAKE,MAAM,EAAE;YACfD,QAAQE,GAAG,CAACD,MAAM,GAAGF,KAAKE,MAAM;QAClC;QACA,IAAIF,KAAKI,cAAc,EAAE;YACvBH,QAAQE,GAAG,CAACC,cAAc,GAAGJ,KAAKI,cAAc;QAClD;QAEA,MAAM,EAAEC,IAAI,EAAE,GAAGR;QAEjB,MAAMS,UAAU;YACdD;YACAE,OAAO;YACPC,OAAOR,KAAKQ,KAAK;YACjBX;YACAM,2bAAKR,wBAAAA,EAAsBM,QAAQE,GAAG,EAAE;QAC1C;QAEA,MAAMM,SAAS,sYAAMf,mBAAAA,EAAiBY;QACtC,OAAOG;IACT;AACF","ignoreList":[0]}},
    {"offset": {"line": 3886, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3892, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/resolvers/globals/findVersionByID.ts"],"sourcesContent":["import type { Document, PayloadRequest, SanitizedGlobalConfig } from 'payload'\n\nimport { findVersionByIDOperationGlobal, isolateObjectProperty } from 'payload'\n\nimport type { Context } from '../types.js'\n\nexport type Resolver = (\n  _: unknown,\n  args: {\n    draft?: boolean\n    fallbackLocale?: string\n    id: number | string\n    locale?: string\n  },\n  context: {\n    req: PayloadRequest\n  },\n) => Promise<Document>\n\nexport function findVersionByID(globalConfig: SanitizedGlobalConfig): Resolver {\n  return async function resolver(_, args, context: Context) {\n    if (args.locale) {\n      context.req.locale = args.locale\n    }\n    if (args.fallbackLocale) {\n      context.req.fallbackLocale = args.fallbackLocale\n    }\n\n    const options = {\n      id: args.id,\n      depth: 0,\n      draft: args.draft,\n      globalConfig,\n      req: isolateObjectProperty(context.req, 'transactionID'),\n    }\n\n    const result = await findVersionByIDOperationGlobal(options)\n    return result\n  }\n}\n"],"names":["findVersionByIDOperationGlobal","isolateObjectProperty","findVersionByID","globalConfig","resolver","_","args","context","locale","req","fallbackLocale","options","id","depth","draft","result"],"mappings":";;;AAEA,SAASA,8BAA8B,EAAEC,qBAAqB,QAAQ,UAAS;;;AAiBxE,SAASC,gBAAgBC,YAAmC;IACjE,OAAO,eAAeC,SAASC,CAAC,EAAEC,IAAI,EAAEC,OAAgB;QACtD,IAAID,KAAKE,MAAM,EAAE;YACfD,QAAQE,GAAG,CAACD,MAAM,GAAGF,KAAKE,MAAM;QAClC;QACA,IAAIF,KAAKI,cAAc,EAAE;YACvBH,QAAQE,GAAG,CAACC,cAAc,GAAGJ,KAAKI,cAAc;QAClD;QAEA,MAAMC,UAAU;YACdC,IAAIN,KAAKM,EAAE;YACXC,OAAO;YACPC,OAAOR,KAAKQ,KAAK;YACjBX;YACAM,2bAAKR,wBAAAA,EAAsBM,QAAQE,GAAG,EAAE;QAC1C;QAEA,MAAMM,SAAS,4dAAMf,iCAAAA,EAA+BW;QACpD,OAAOI;IACT;AACF","ignoreList":[0]}},
    {"offset": {"line": 3917, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3923, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/resolvers/globals/findVersions.ts"],"sourcesContent":["import type { Document, PayloadRequest, SanitizedGlobalConfig, Where } from 'payload'\n\nimport { findVersionsOperationGlobal, isolateObjectProperty } from 'payload'\n\nimport type { Context } from '../types.js'\n\nexport type Resolver = (\n  _: unknown,\n  args: {\n    fallbackLocale?: string\n    limit?: number\n    locale?: string\n    page?: number\n    pagination?: boolean\n    sort?: string\n    where: Where\n  },\n  context: {\n    req: PayloadRequest\n  },\n) => Promise<Document>\n\nexport function findVersions(globalConfig: SanitizedGlobalConfig): Resolver {\n  return async function resolver(_, args, context: Context) {\n    const options = {\n      depth: 0,\n      globalConfig,\n      limit: args.limit,\n      page: args.page,\n      pagination: args.pagination,\n      req: isolateObjectProperty(context.req, 'transactionID'),\n      sort: args.sort,\n      where: args.where,\n    }\n\n    const result = await findVersionsOperationGlobal(options)\n\n    return result\n  }\n}\n"],"names":["findVersionsOperationGlobal","isolateObjectProperty","findVersions","globalConfig","resolver","_","args","context","options","depth","limit","page","pagination","req","sort","where","result"],"mappings":";;;AAEA,SAASA,2BAA2B,EAAEC,qBAAqB,QAAQ,UAAS;;;AAoBrE,SAASC,aAAaC,YAAmC;IAC9D,OAAO,eAAeC,SAASC,CAAC,EAAEC,IAAI,EAAEC,OAAgB;QACtD,MAAMC,UAAU;YACdC,OAAO;YACPN;YACAO,OAAOJ,KAAKI,KAAK;YACjBC,MAAML,KAAKK,IAAI;YACfC,YAAYN,KAAKM,UAAU;YAC3BC,MAAKZ,6cAAAA,EAAsBM,QAAQM,GAAG,EAAE;YACxCC,MAAMR,KAAKQ,IAAI;YACfC,OAAOT,KAAKS,KAAK;QACnB;QAEA,MAAMC,SAAS,mdAAMhB,8BAAAA,EAA4BQ;QAEjD,OAAOQ;IACT;AACF","ignoreList":[0]}},
    {"offset": {"line": 3945, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3951, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/resolvers/globals/restoreVersion.ts"],"sourcesContent":["import type { Document, PayloadRequest, SanitizedGlobalConfig } from 'payload'\n\nimport { isolateObjectProperty, restoreVersionOperationGlobal } from 'payload'\n\nimport type { Context } from '../types.js'\n\ntype Resolver = (\n  _: unknown,\n  args: {\n    draft?: boolean\n    id: number | string\n  },\n  context: {\n    req: PayloadRequest\n  },\n) => Promise<Document>\nexport function restoreVersion(globalConfig: SanitizedGlobalConfig): Resolver {\n  return async function resolver(_, args, context: Context) {\n    const options = {\n      id: args.id,\n      depth: 0,\n      draft: args.draft,\n      globalConfig,\n      req: isolateObjectProperty(context.req, 'transactionID'),\n    }\n\n    const result = await restoreVersionOperationGlobal(options)\n    return result\n  }\n}\n"],"names":["isolateObjectProperty","restoreVersionOperationGlobal","restoreVersion","globalConfig","resolver","_","args","context","options","id","depth","draft","req","result"],"mappings":";;;AAEA,SAASA,qBAAqB,EAAEC,6BAA6B,QAAQ,UAAS;;;AAcvE,SAASC,eAAeC,YAAmC;IAChE,OAAO,eAAeC,SAASC,CAAC,EAAEC,IAAI,EAAEC,OAAgB;QACtD,MAAMC,UAAU;YACdC,IAAIH,KAAKG,EAAE;YACXC,OAAO;YACPC,OAAOL,KAAKK,KAAK;YACjBR;YACAS,2bAAKZ,wBAAAA,EAAsBO,QAAQK,GAAG,EAAE;QAC1C;QAEA,MAAMC,SAAS,ydAAMZ,gCAAAA,EAA8BO;QACnD,OAAOK;IACT;AACF","ignoreList":[0]}},
    {"offset": {"line": 3970, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3976, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/resolvers/globals/update.ts"],"sourcesContent":["import type {\n  DataFromGlobalSlug,\n  GlobalSlug,\n  PayloadRequest,\n  SanitizedGlobalConfig,\n  SelectType,\n} from 'payload'\nimport type { DeepPartial } from 'ts-essentials'\n\nimport { isolateObjectProperty, updateOperationGlobal } from 'payload'\n\nimport type { Context } from '../types.js'\n\ntype Resolver<TSlug extends GlobalSlug> = (\n  _: unknown,\n  args: {\n    data?: DeepPartial<Omit<DataFromGlobalSlug<TSlug>, 'id'>>\n    draft?: boolean\n    fallbackLocale?: string\n    locale?: string\n  },\n  context: {\n    req: PayloadRequest\n  },\n) => Promise<DataFromGlobalSlug<TSlug>>\n\nexport function update<TSlug extends GlobalSlug>(\n  globalConfig: SanitizedGlobalConfig,\n): Resolver<TSlug> {\n  return async function resolver(_, args, context: Context) {\n    if (args.locale) {\n      context.req.locale = args.locale\n    }\n    if (args.fallbackLocale) {\n      context.req.fallbackLocale = args.fallbackLocale\n    }\n\n    const { slug } = globalConfig\n\n    const options = {\n      slug,\n      data: args.data,\n      depth: 0,\n      draft: args.draft,\n      globalConfig,\n      req: isolateObjectProperty(context.req, 'transactionID'),\n    }\n\n    const result = await updateOperationGlobal<TSlug, SelectType>(options)\n    return result\n  }\n}\n"],"names":["isolateObjectProperty","updateOperationGlobal","update","globalConfig","resolver","_","args","context","locale","req","fallbackLocale","slug","options","data","depth","draft","result"],"mappings":";;;AASA,SAASA,qBAAqB,EAAEC,qBAAqB,QAAQ,UAAS;;;AAiB/D,SAASC,OACdC,YAAmC;IAEnC,OAAO,eAAeC,SAASC,CAAC,EAAEC,IAAI,EAAEC,OAAgB;QACtD,IAAID,KAAKE,MAAM,EAAE;YACfD,QAAQE,GAAG,CAACD,MAAM,GAAGF,KAAKE,MAAM;QAClC;QACA,IAAIF,KAAKI,cAAc,EAAE;YACvBH,QAAQE,GAAG,CAACC,cAAc,GAAGJ,KAAKI,cAAc;QAClD;QAEA,MAAM,EAAEC,IAAI,EAAE,GAAGR;QAEjB,MAAMS,UAAU;YACdD;YACAE,MAAMP,KAAKO,IAAI;YACfC,OAAO;YACPC,OAAOT,KAAKS,KAAK;YACjBZ;YACAM,KAAKT,8cAAAA,EAAsBO,QAAQE,GAAG,EAAE;QAC1C;QAEA,MAAMO,SAAS,icAAMf,wBAAAA,EAAyCW;QAC9D,OAAOI;IACT;AACF","ignoreList":[0]}},
    {"offset": {"line": 4003, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4009, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/schema/initGlobals.ts"],"sourcesContent":["import { GraphQLBoolean, GraphQLInt, GraphQLNonNull, GraphQLString } from 'graphql'\nimport pluralize from 'pluralize'\nconst { singular } = pluralize\n\nimport type { Field, GraphQLInfo, SanitizedConfig, SanitizedGlobalConfig } from 'payload'\n\nimport { buildVersionGlobalFields, toWords } from 'payload'\n\nimport { docAccessResolver } from '../resolvers/globals/docAccess.js'\nimport { findOne } from '../resolvers/globals/findOne.js'\nimport { findVersionByID } from '../resolvers/globals/findVersionByID.js'\nimport { findVersions } from '../resolvers/globals/findVersions.js'\nimport { restoreVersion } from '../resolvers/globals/restoreVersion.js'\nimport { update } from '../resolvers/globals/update.js'\nimport { formatName } from '../utilities/formatName.js'\nimport { buildMutationInputType } from './buildMutationInputType.js'\nimport { buildObjectType } from './buildObjectType.js'\nimport { buildPaginatedListType } from './buildPaginatedListType.js'\nimport { buildPolicyType } from './buildPoliciesType.js'\nimport { buildWhereInputType } from './buildWhereInputType.js'\n\ntype InitGlobalsGraphQLArgs = {\n  config: SanitizedConfig\n  graphqlResult: GraphQLInfo\n}\nexport function initGlobals({ config, graphqlResult }: InitGlobalsGraphQLArgs): void {\n  Object.keys(graphqlResult.globals.config).forEach((slug) => {\n    const global: SanitizedGlobalConfig = graphqlResult.globals.config[slug]\n    const { fields, graphQL, versions } = global\n\n    if (graphQL === false) {\n      return\n    }\n\n    const formattedName = graphQL?.name ? graphQL.name : singular(toWords(global.slug, true))\n\n    const forceNullableObjectType = Boolean(versions?.drafts)\n\n    if (!graphqlResult.globals.graphQL) {\n      graphqlResult.globals.graphQL = {}\n    }\n\n    const updateMutationInputType = buildMutationInputType({\n      name: formattedName,\n      config,\n      fields,\n      graphqlResult,\n      parentName: formattedName,\n    })\n    graphqlResult.globals.graphQL[slug] = {\n      type: buildObjectType({\n        name: formattedName,\n        config,\n        fields,\n        forceNullable: forceNullableObjectType,\n        graphqlResult,\n        parentName: formattedName,\n      }),\n      mutationInputType: updateMutationInputType\n        ? new GraphQLNonNull(updateMutationInputType)\n        : null,\n    }\n\n    const queriesEnabled = typeof global.graphQL !== 'object' || !global.graphQL.disableQueries\n    const mutationsEnabled = typeof global.graphQL !== 'object' || !global.graphQL.disableMutations\n\n    if (queriesEnabled) {\n      graphqlResult.Query.fields[formattedName] = {\n        type: graphqlResult.globals.graphQL[slug].type,\n        args: {\n          draft: { type: GraphQLBoolean },\n          ...(config.localization\n            ? {\n                fallbackLocale: { type: graphqlResult.types.fallbackLocaleInputType },\n                locale: { type: graphqlResult.types.localeInputType },\n              }\n            : {}),\n        },\n        resolve: findOne(global),\n      }\n\n      graphqlResult.Query.fields[`docAccess${formattedName}`] = {\n        type: buildPolicyType({\n          type: 'global',\n          entity: global,\n          scope: 'docAccess',\n          typeSuffix: 'DocAccess',\n        }),\n        resolve: docAccessResolver(global),\n      }\n    }\n\n    if (mutationsEnabled) {\n      graphqlResult.Mutation.fields[`update${formattedName}`] = {\n        type: graphqlResult.globals.graphQL[slug].type,\n        args: {\n          ...(updateMutationInputType\n            ? { data: { type: graphqlResult.globals.graphQL[slug].mutationInputType } }\n            : {}),\n          draft: { type: GraphQLBoolean },\n          ...(config.localization\n            ? {\n                locale: { type: graphqlResult.types.localeInputType },\n              }\n            : {}),\n        },\n        resolve: update(global),\n      }\n    }\n\n    if (global.versions) {\n      const idType = config.db.defaultIDType === 'number' ? GraphQLInt : GraphQLString\n\n      const versionGlobalFields: Field[] = [\n        ...buildVersionGlobalFields(config, global),\n        {\n          name: 'id',\n          type: config.db.defaultIDType as 'text',\n        },\n        {\n          name: 'createdAt',\n          type: 'date',\n          label: 'Created At',\n        },\n        {\n          name: 'updatedAt',\n          type: 'date',\n          label: 'Updated At',\n        },\n      ]\n\n      graphqlResult.globals.graphQL[slug].versionType = buildObjectType({\n        name: `${formattedName}Version`,\n        config,\n        fields: versionGlobalFields,\n        forceNullable: forceNullableObjectType,\n        graphqlResult,\n        parentName: `${formattedName}Version`,\n      })\n\n      if (queriesEnabled) {\n        graphqlResult.Query.fields[`version${formatName(formattedName)}`] = {\n          type: graphqlResult.globals.graphQL[slug].versionType,\n          args: {\n            id: { type: idType },\n            draft: { type: GraphQLBoolean },\n            ...(config.localization\n              ? {\n                  fallbackLocale: { type: graphqlResult.types.fallbackLocaleInputType },\n                  locale: { type: graphqlResult.types.localeInputType },\n                }\n              : {}),\n          },\n          resolve: findVersionByID(global),\n        }\n        graphqlResult.Query.fields[`versions${formattedName}`] = {\n          type: buildPaginatedListType(\n            `versions${formatName(formattedName)}`,\n            graphqlResult.globals.graphQL[slug].versionType,\n          ),\n          args: {\n            where: {\n              type: buildWhereInputType({\n                name: `versions${formattedName}`,\n                fields: versionGlobalFields,\n                parentName: `versions${formattedName}`,\n              }),\n            },\n            ...(config.localization\n              ? {\n                  fallbackLocale: { type: graphqlResult.types.fallbackLocaleInputType },\n                  locale: { type: graphqlResult.types.localeInputType },\n                }\n              : {}),\n            limit: { type: GraphQLInt },\n            page: { type: GraphQLInt },\n            pagination: { type: GraphQLBoolean },\n            sort: { type: GraphQLString },\n          },\n          resolve: findVersions(global),\n        }\n      }\n\n      if (mutationsEnabled) {\n        graphqlResult.Mutation.fields[`restoreVersion${formatName(formattedName)}`] = {\n          type: graphqlResult.globals.graphQL[slug].type,\n          args: {\n            id: { type: idType },\n            draft: { type: GraphQLBoolean },\n          },\n          resolve: restoreVersion(global),\n        }\n      }\n    }\n  })\n}\n"],"names":["GraphQLBoolean","GraphQLInt","GraphQLNonNull","GraphQLString","pluralize","singular","buildVersionGlobalFields","toWords","docAccessResolver","findOne","findVersionByID","findVersions","restoreVersion","update","formatName","buildMutationInputType","buildObjectType","buildPaginatedListType","buildPolicyType","buildWhereInputType","initGlobals","config","graphqlResult","Object","keys","globals","forEach","slug","global","fields","graphQL","versions","formattedName","name","forceNullableObjectType","Boolean","drafts","updateMutationInputType","parentName","type","forceNullable","mutationInputType","queriesEnabled","disableQueries","mutationsEnabled","disableMutations","Query","args","draft","localization","fallbackLocale","types","fallbackLocaleInputType","locale","localeInputType","resolve","entity","scope","typeSuffix","Mutation","data","idType","db","defaultIDType","versionGlobalFields","label","versionType","id","where","limit","page","pagination","sort"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 4224, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4230, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/utilities/wrapCustomResolver.ts"],"sourcesContent":["import type { ObjMap } from 'graphql/jsutils/ObjMap.js'\nimport type { GraphQLFieldConfig, GraphQLFieldResolver } from 'graphql/type/definition.js'\nimport type { PayloadRequest } from 'payload'\n\nimport { isolateObjectProperty } from 'payload'\n\ntype PayloadContext = { req: PayloadRequest }\n\nfunction wrapCustomResolver<TSource, TArgs, TResult>(\n  resolver: GraphQLFieldResolver<TSource, PayloadContext, TArgs, TResult>,\n): GraphQLFieldResolver<TSource, PayloadContext, TArgs, TResult> {\n  return (source, args, context, info) => {\n    return resolver(\n      source,\n      args,\n      { ...context, req: isolateObjectProperty(context.req, 'transactionID') },\n      info,\n    )\n  }\n}\n\nexport function wrapCustomFields<TSource>(\n  fields: ObjMap<GraphQLFieldConfig<TSource, PayloadContext>>,\n): ObjMap<GraphQLFieldConfig<TSource, PayloadContext>> {\n  for (const key in fields) {\n    if (fields[key].resolve) {\n      fields[key].resolve = wrapCustomResolver(fields[key].resolve)\n    }\n  }\n  return fields\n}\n"],"names":["isolateObjectProperty","wrapCustomResolver","resolver","source","args","context","info","req","wrapCustomFields","fields","key","resolve"],"mappings":";;;AAIA,SAASA,qBAAqB,QAAQ,UAAS;;AAI/C,SAASC,mBACPC,QAAuE;IAEvE,OAAO,CAACC,QAAQC,MAAMC,SAASC;QAC7B,OAAOJ,SACLC,QACAC,MACA;YAAE,GAAGC,OAAO;YAAEE,KAAKP,8cAAAA,EAAsBK,QAAQE,GAAG,EAAE;QAAiB,GACvED;IAEJ;AACF;AAEO,SAASE,iBACdC,MAA2D;IAE3D,IAAK,MAAMC,OAAOD,OAAQ;QACxB,IAAIA,MAAM,CAACC,IAAI,CAACC,OAAO,EAAE;YACvBF,MAAM,CAACC,IAAI,CAACC,OAAO,GAAGV,mBAAmBQ,MAAM,CAACC,IAAI,CAACC,OAAO;QAC9D;IACF;IACA,OAAOF;AACT","ignoreList":[0]}},
    {"offset": {"line": 4251, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4257, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/%40payloadcms%2Bgraphql%403.23.0_graphql%4016.10.0_payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52._xru4ouhmmdpevogb54w6do6uju/node_modules/%40payloadcms/graphql/src/index.ts"],"sourcesContent":["import type { OperationArgs } from 'graphql-http'\nimport type { GraphQLInfo, SanitizedConfig } from 'payload'\n\nimport * as GraphQL from 'graphql'\n\nimport {\n  createComplexityRule,\n  fieldExtensionsEstimator,\n  simpleEstimator,\n} from './packages/graphql-query-complexity/index.js'\nimport { accessResolver } from './resolvers/auth/access.js'\nimport { buildFallbackLocaleInputType } from './schema/buildFallbackLocaleInputType.js'\nimport { buildLocaleInputType } from './schema/buildLocaleInputType.js'\nimport { buildPoliciesType } from './schema/buildPoliciesType.js'\nimport { initCollections } from './schema/initCollections.js'\nimport { initGlobals } from './schema/initGlobals.js'\nimport { wrapCustomFields } from './utilities/wrapCustomResolver.js'\n\nexport function configToSchema(config: SanitizedConfig): {\n  schema: GraphQL.GraphQLSchema\n  validationRules: (args: OperationArgs<any>) => GraphQL.ValidationRule[]\n} {\n  const collections = config.collections.reduce((acc, collection) => {\n    acc[collection.slug] = {\n      config: collection,\n    }\n\n    return acc\n  }, {})\n\n  const globals = {\n    config: config.globals,\n  }\n\n  const graphqlResult: GraphQLInfo = {\n    collections,\n    globals,\n    Mutation: {\n      name: 'Mutation',\n      fields: {},\n    },\n    Query: {\n      name: 'Query',\n      fields: {},\n    },\n    types: {\n      arrayTypes: {},\n      blockInputTypes: {},\n      blockTypes: {},\n      groupTypes: {},\n      tabTypes: {},\n    },\n  }\n\n  if (config.localization) {\n    graphqlResult.types['localeInputType'] = buildLocaleInputType(config.localization)\n    graphqlResult.types['fallbackLocaleInputType'] = buildFallbackLocaleInputType(\n      config.localization,\n    )\n  }\n\n  initCollections({ config, graphqlResult })\n  initGlobals({ config, graphqlResult })\n\n  graphqlResult.Query.fields['Access'] = {\n    type: buildPoliciesType(config),\n    resolve: accessResolver(config),\n  }\n\n  if (typeof config.graphQL.queries === 'function') {\n    const customQueries = config.graphQL.queries(GraphQL, {\n      ...graphqlResult,\n      config,\n    })\n    graphqlResult.Query = {\n      ...graphqlResult.Query,\n      fields: {\n        ...graphqlResult.Query.fields,\n        ...wrapCustomFields((customQueries || {}) as never),\n      },\n    }\n  }\n\n  if (typeof config.graphQL.mutations === 'function') {\n    const customMutations = config.graphQL.mutations(GraphQL, {\n      ...graphqlResult,\n      config,\n    })\n    graphqlResult.Mutation = {\n      ...graphqlResult.Mutation,\n      fields: {\n        ...graphqlResult.Mutation.fields,\n        ...wrapCustomFields((customMutations || {}) as never),\n      },\n    }\n  }\n\n  const query = new GraphQL.GraphQLObjectType(graphqlResult.Query)\n  const mutation = new GraphQL.GraphQLObjectType(graphqlResult.Mutation)\n\n  const schema = new GraphQL.GraphQLSchema({\n    mutation,\n    query,\n  })\n\n  const validationRules = (args): GraphQL.ValidationRule[] => [\n    createComplexityRule({\n      estimators: [\n        fieldExtensionsEstimator(),\n        simpleEstimator({ defaultComplexity: 1 }), // Fallback if complexity not set\n      ],\n      maximumComplexity: config.graphQL.maxComplexity,\n      variables: args.variableValues,\n      // onComplete: (complexity) => { console.log('Query Complexity:', complexity); },\n    }),\n    ...(typeof config?.graphQL?.validationRules === 'function'\n      ? config.graphQL.validationRules(args)\n      : []),\n  ]\n\n  return {\n    schema,\n    validationRules,\n  }\n}\n"],"names":["GraphQL","createComplexityRule","fieldExtensionsEstimator","simpleEstimator","accessResolver","buildFallbackLocaleInputType","buildLocaleInputType","buildPoliciesType","initCollections","initGlobals","wrapCustomFields","configToSchema","config","collections","reduce","acc","collection","slug","globals","graphqlResult","Mutation","name","fields","Query","types","arrayTypes","blockInputTypes","blockTypes","groupTypes","tabTypes","localization","type","resolve","graphQL","queries","customQueries","mutations","customMutations","query","GraphQLObjectType","mutation","schema","GraphQLSchema","validationRules","args","estimators","defaultComplexity","maximumComplexity","maxComplexity","variables","variableValues"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 4376, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}