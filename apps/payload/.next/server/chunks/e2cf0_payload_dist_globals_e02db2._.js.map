{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/globals/operations/docAccess.ts"],"sourcesContent":["import type { SanitizedGlobalPermission } from '../../auth/index.js'\nimport type { AllOperations, PayloadRequest } from '../../types/index.js'\nimport type { SanitizedGlobalConfig } from '../config/types.js'\n\nimport { commitTransaction } from '../../utilities/commitTransaction.js'\nimport { getEntityPolicies } from '../../utilities/getEntityPolicies.js'\nimport { initTransaction } from '../../utilities/initTransaction.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport { sanitizePermissions } from '../../utilities/sanitizePermissions.js'\n\ntype Arguments = {\n  globalConfig: SanitizedGlobalConfig\n  req: PayloadRequest\n}\n\nexport const docAccessOperation = async (args: Arguments): Promise<SanitizedGlobalPermission> => {\n  const { globalConfig, req } = args\n\n  const globalOperations: AllOperations[] = ['read', 'update']\n\n  if (globalConfig.versions) {\n    globalOperations.push('readVersions')\n  }\n\n  try {\n    const shouldCommit = await initTransaction(req)\n    const result = await getEntityPolicies({\n      type: 'global',\n      entity: globalConfig,\n      operations: globalOperations,\n      req,\n    })\n    if (shouldCommit) {\n      await commitTransaction(req)\n    }\n    const sanitizedPermissions = sanitizePermissions({\n      globals: {\n        [globalConfig.slug]: result,\n      },\n    })\n\n    return sanitizedPermissions?.globals?.[globalConfig.slug]\n  } catch (e: unknown) {\n    await killTransaction(req)\n    throw e\n  }\n}\n"],"names":["commitTransaction","getEntityPolicies","initTransaction","killTransaction","sanitizePermissions","docAccessOperation","args","globalConfig","req","globalOperations","versions","push","shouldCommit","result","type","entity","operations","sanitizedPermissions","globals","slug","e"],"mappings":";;;AAMA,SAASE,eAAe,QAAQ,qCAAoC;AADpE,SAASD,iBAAiB,QAAQ,uCAAsC;AADxE,SAASD,iBAAiB,QAAQ,uCAAsC;AAIxE,SAASI,mBAAmB,QAAQ,yCAAwC;AAD5E,SAASD,eAAe,QAAQ,qCAAoC;;;;;;AAQ7D,MAAME,qBAAqB,OAAOC;IACvC,MAAM,EAAEC,YAAY,EAAEC,GAAG,EAAE,GAAGF;IAE9B,MAAMG,mBAAoC;QAAC;QAAQ;KAAS;IAE5D,IAAIF,aAAaG,QAAQ,EAAE;QACzBD,iBAAiBE,IAAI,CAAC;IACxB;IAEA,IAAI;QACF,MAAMC,eAAe,MAAMV,8YAAAA,EAAgBM;QAC3C,MAAMK,SAAS,oYAAMZ,oBAAAA,EAAkB;YACrCa,MAAM;YACNC,QAAQR;YACRS,YAAYP;YACZD;QACF;QACA,IAAII,cAAc;YAChB,oYAAMZ,oBAAAA,EAAkBQ;QAC1B;QACA,MAAMS,uZAAuBb,sBAAAA,EAAoB;YAC/Cc,SAAS;gBACP,CAACX,aAAaY,IAAI,CAAC,EAAEN;YACvB;QACF;QAEA,OAAOI,sBAAsBC,SAAS,CAACX,aAAaY,IAAI,CAAC;IAC3D,EAAE,OAAOC,GAAY;QACnB,kYAAMjB,kBAAAA,EAAgBK;QACtB,MAAMY;IACR;AACF,EAAC","ignoreList":[0]}},
    {"offset": {"line": 51, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 57, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/globals/endpoints/docAccess.ts"],"sourcesContent":["import { status as httpStatus } from 'http-status'\n\nimport type { PayloadHandler } from '../../config/types.js'\n\nimport { getRequestGlobal } from '../../utilities/getRequestEntity.js'\nimport { headersWithCors } from '../../utilities/headersWithCors.js'\nimport { docAccessOperation } from '../operations/docAccess.js'\n\nexport const docAccessHandler: PayloadHandler = async (req) => {\n  const globalConfig = getRequestGlobal(req)\n  const result = await docAccessOperation({\n    globalConfig,\n    req,\n  })\n\n  return Response.json(result, {\n    headers: headersWithCors({\n      headers: new Headers(),\n      req,\n    }),\n    status: httpStatus.OK,\n  })\n}\n"],"names":["status","httpStatus","getRequestGlobal","headersWithCors","docAccessOperation","docAccessHandler","req","globalConfig","result","Response","json","headers","Headers","OK"],"mappings":";;;AAAA,SAASA,UAAUC,UAAU,QAAQ,cAAa;AAIlD,SAASC,gBAAgB,QAAQ,sCAAqC;AAEtE,SAASE,kBAAkB,QAAQ,6BAA4B;AAD/D,SAASD,eAAe,QAAQ,qCAAoC;;;;;;AAG7D,MAAME,mBAAmC,OAAOC;IACrD,MAAMC,4YAAeL,mBAAAA,EAAiBI;IACtC,MAAME,SAAS,wYAAMJ,qBAAAA,EAAmB;QACtCG;QACAD;IACF;IAEA,OAAOG,SAASC,IAAI,CAACF,QAAQ;QAC3BG,qYAASR,kBAAAA,EAAgB;YACvBQ,SAAS,IAAIC;YACbN;QACF;QACAN,gQAAQC,SAAAA,CAAWY,EAAE;IACvB;AACF,EAAC","ignoreList":[0]}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 89, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/globals/operations/findOne.ts"],"sourcesContent":["import type { AccessResult } from '../../config/types.js'\nimport type { PayloadRequest, PopulateType, SelectType, Where } from '../../types/index.js'\nimport type { SanitizedGlobalConfig } from '../config/types.js'\n\nimport executeAccess from '../../auth/executeAccess.js'\nimport { afterRead } from '../../fields/hooks/afterRead/index.js'\nimport { getSelectMode } from '../../utilities/getSelectMode.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport replaceWithDraftIfAvailable from '../../versions/drafts/replaceWithDraftIfAvailable.js'\n\ntype Args = {\n  depth?: number\n  draft?: boolean\n  globalConfig: SanitizedGlobalConfig\n  includeLockStatus?: boolean\n  overrideAccess?: boolean\n  populate?: PopulateType\n  req: PayloadRequest\n  select?: SelectType\n  showHiddenFields?: boolean\n  slug: string\n}\n\nexport const findOneOperation = async <T extends Record<string, unknown>>(\n  args: Args,\n): Promise<T> => {\n  const {\n    slug,\n    depth,\n    draft: draftEnabled = false,\n    globalConfig,\n    includeLockStatus,\n    overrideAccess = false,\n    populate,\n    req: { fallbackLocale, locale },\n    req,\n    select,\n    showHiddenFields,\n  } = args\n\n  try {\n    // /////////////////////////////////////\n    // Retrieve and execute access\n    // /////////////////////////////////////\n\n    let accessResult: AccessResult\n\n    if (!overrideAccess) {\n      accessResult = await executeAccess({ req }, globalConfig.access.read)\n    }\n\n    // /////////////////////////////////////\n    // Perform database operation\n    // /////////////////////////////////////\n\n    let doc = await req.payload.db.findGlobal({\n      slug,\n      locale,\n      req,\n      select,\n      where: overrideAccess ? undefined : (accessResult as Where),\n    })\n    if (!doc) {\n      doc = {}\n    }\n\n    // /////////////////////////////////////\n    // Include Lock Status if required\n    // /////////////////////////////////////\n    if (includeLockStatus && slug) {\n      let lockStatus = null\n\n      try {\n        const lockDocumentsProp = globalConfig?.lockDocuments\n\n        const lockDurationDefault = 300 // Default 5 minutes in seconds\n        const lockDuration =\n          typeof lockDocumentsProp === 'object' ? lockDocumentsProp.duration : lockDurationDefault\n        const lockDurationInMilliseconds = lockDuration * 1000\n\n        const lockedDocument = await req.payload.find({\n          collection: 'payload-locked-documents',\n          depth: 1,\n          limit: 1,\n          overrideAccess: false,\n          pagination: false,\n          req,\n          where: {\n            and: [\n              {\n                globalSlug: {\n                  equals: slug,\n                },\n              },\n              {\n                updatedAt: {\n                  greater_than: new Date(new Date().getTime() - lockDurationInMilliseconds),\n                },\n              },\n            ],\n          },\n        })\n\n        if (lockedDocument && lockedDocument.docs.length > 0) {\n          lockStatus = lockedDocument.docs[0]\n        }\n      } catch {\n        // swallow error\n      }\n\n      doc._isLocked = !!lockStatus\n      doc._userEditing = lockStatus?.user?.value ?? null\n    }\n\n    // /////////////////////////////////////\n    // Replace document with draft if available\n    // /////////////////////////////////////\n\n    if (globalConfig.versions?.drafts && draftEnabled) {\n      doc = await replaceWithDraftIfAvailable({\n        accessResult,\n        doc,\n        entity: globalConfig,\n        entityType: 'global',\n        overrideAccess,\n        req,\n        select,\n      })\n    }\n\n    // /////////////////////////////////////\n    // Execute before global hook\n    // /////////////////////////////////////\n\n    await globalConfig.hooks.beforeRead.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      doc =\n        (await hook({\n          context: req.context,\n          doc,\n          global: globalConfig,\n          req,\n        })) || doc\n    }, Promise.resolve())\n\n    // /////////////////////////////////////\n    // Execute globalType field if not selected\n    // /////////////////////////////////////\n    if (select && doc.globalType) {\n      const selectMode = getSelectMode(select)\n      if (\n        (selectMode === 'include' && !select['globalType']) ||\n        (selectMode === 'exclude' && select['globalType'] === false)\n      ) {\n        delete doc['globalType']\n      }\n    }\n\n    // /////////////////////////////////////\n    // Execute field-level hooks and access\n    // /////////////////////////////////////\n\n    doc = await afterRead({\n      collection: null,\n      context: req.context,\n      depth,\n      doc,\n      draft: draftEnabled,\n      fallbackLocale,\n      global: globalConfig,\n      locale,\n      overrideAccess,\n      populate,\n      req,\n      select,\n      showHiddenFields,\n    })\n\n    // /////////////////////////////////////\n    // Execute after global hook\n    // /////////////////////////////////////\n\n    await globalConfig.hooks.afterRead.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      doc =\n        (await hook({\n          context: req.context,\n          doc,\n          global: globalConfig,\n          req,\n        })) || doc\n    }, Promise.resolve())\n\n    // /////////////////////////////////////\n    // Return results\n    // /////////////////////////////////////\n\n    return doc\n  } catch (error: unknown) {\n    await killTransaction(req)\n    throw error\n  }\n}\n"],"names":["executeAccess","afterRead","getSelectMode","killTransaction","replaceWithDraftIfAvailable","findOneOperation","args","slug","depth","draft","draftEnabled","globalConfig","includeLockStatus","overrideAccess","populate","req","fallbackLocale","locale","select","showHiddenFields","accessResult","access","read","doc","payload","db","findGlobal","where","undefined","lockStatus","lockDocumentsProp","lockDocuments","lockDurationDefault","lockDuration","duration","lockDurationInMilliseconds","lockedDocument","find","collection","limit","pagination","and","globalSlug","equals","updatedAt","greater_than","Date","getTime","docs","length","_isLocked","_userEditing","user","value","versions","drafts","entity","entityType","hooks","beforeRead","reduce","priorHook","hook","context","global","Promise","resolve","globalType","selectMode","error"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 243, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 249, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/globals/endpoints/findOne.ts"],"sourcesContent":["import { status as httpStatus } from 'http-status'\n\nimport type { PayloadHandler } from '../../config/types.js'\n\nimport { getRequestGlobal } from '../../utilities/getRequestEntity.js'\nimport { headersWithCors } from '../../utilities/headersWithCors.js'\nimport { isNumber } from '../../utilities/isNumber.js'\nimport { sanitizePopulateParam } from '../../utilities/sanitizePopulateParam.js'\nimport { sanitizeSelectParam } from '../../utilities/sanitizeSelectParam.js'\nimport { findOneOperation } from '../operations/findOne.js'\n\nexport const findOneHandler: PayloadHandler = async (req) => {\n  const globalConfig = getRequestGlobal(req)\n  const { searchParams } = req\n  const depth = searchParams.get('depth')\n\n  const result = await findOneOperation({\n    slug: globalConfig.slug,\n    depth: isNumber(depth) ? Number(depth) : undefined,\n    draft: searchParams.get('draft') === 'true',\n    globalConfig,\n    populate: sanitizePopulateParam(req.query.populate),\n    req,\n    select: sanitizeSelectParam(req.query.select),\n  })\n\n  return Response.json(result, {\n    headers: headersWithCors({\n      headers: new Headers(),\n      req,\n    }),\n    status: httpStatus.OK,\n  })\n}\n"],"names":["status","httpStatus","getRequestGlobal","headersWithCors","isNumber","sanitizePopulateParam","sanitizeSelectParam","findOneOperation","findOneHandler","req","globalConfig","searchParams","depth","get","result","slug","Number","undefined","draft","populate","query","select","Response","json","headers","Headers","OK"],"mappings":";;;AAAA,SAASA,UAAUC,UAAU,QAAQ,cAAa;AAIlD,SAASC,gBAAgB,QAAQ,sCAAqC;AAKtE,SAASK,gBAAgB,QAAQ,2BAA0B;AAH3D,SAASH,QAAQ,QAAQ,8BAA6B;AACtD,SAASC,qBAAqB,QAAQ,2CAA0C;AAChF,SAASC,mBAAmB,QAAQ,yCAAwC;AAH5E,SAASH,eAAe,QAAQ,qCAAoC;;;;;;;;;AAM7D,MAAMK,iBAAiC,OAAOC;IACnD,MAAMC,mBAAeR,4YAAAA,EAAiBO;IACtC,MAAM,EAAEE,YAAY,EAAE,GAAGF;IACzB,MAAMG,QAAQD,aAAaE,GAAG,CAAC;IAE/B,MAAMC,SAAS,OAAMP,kZAAAA,EAAiB;QACpCQ,MAAML,aAAaK,IAAI;QACvBH,4XAAOR,WAAAA,EAASQ,SAASI,OAAOJ,SAASK;QACzCC,OAAOP,aAAaE,GAAG,CAAC,aAAa;QACrCH;QACAS,4YAAUd,wBAAAA,EAAsBI,IAAIW,KAAK,CAACD,QAAQ;QAClDV;QACAY,wYAAQf,sBAAAA,EAAoBG,IAAIW,KAAK,CAACC,MAAM;IAC9C;IAEA,OAAOC,SAASC,IAAI,CAACT,QAAQ;QAC3BU,qYAASrB,kBAAAA,EAAgB;YACvBqB,SAAS,IAAIC;YACbhB;QACF;QACAT,gQAAQC,SAAAA,CAAWyB,EAAE;IACvB;AACF,EAAC","ignoreList":[0]}},
    {"offset": {"line": 288, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 294, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/globals/operations/findVersionByID.ts"],"sourcesContent":["import type { FindGlobalVersionsArgs } from '../../database/types.js'\nimport type { PayloadRequest, PopulateType, SelectType } from '../../types/index.js'\nimport type { TypeWithVersion } from '../../versions/types.js'\nimport type { SanitizedGlobalConfig } from '../config/types.js'\n\nimport executeAccess from '../../auth/executeAccess.js'\nimport { combineQueries } from '../../database/combineQueries.js'\nimport { Forbidden, NotFound } from '../../errors/index.js'\nimport { afterRead } from '../../fields/hooks/afterRead/index.js'\nimport { deepCopyObjectSimple } from '../../utilities/deepCopyObject.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\n\nexport type Arguments = {\n  currentDepth?: number\n  depth?: number\n  disableErrors?: boolean\n  globalConfig: SanitizedGlobalConfig\n  id: number | string\n  overrideAccess?: boolean\n  populate?: PopulateType\n  req: PayloadRequest\n  select?: SelectType\n  showHiddenFields?: boolean\n}\n\nexport const findVersionByIDOperation = async <T extends TypeWithVersion<T> = any>(\n  args: Arguments,\n): Promise<T> => {\n  const {\n    id,\n    currentDepth,\n    depth,\n    disableErrors,\n    globalConfig,\n    overrideAccess,\n    populate,\n    req: { fallbackLocale, locale, payload },\n    req,\n    select,\n    showHiddenFields,\n  } = args\n\n  try {\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    const accessResults = !overrideAccess\n      ? await executeAccess({ id, disableErrors, req }, globalConfig.access.readVersions)\n      : true\n\n    // If errors are disabled, and access returns false, return null\n    if (accessResults === false) {\n      return null\n    }\n\n    const hasWhereAccess = typeof accessResults === 'object'\n\n    const findGlobalVersionsArgs: FindGlobalVersionsArgs = {\n      global: globalConfig.slug,\n      limit: 1,\n      locale,\n      req,\n      select,\n      where: combineQueries({ id: { equals: id } }, accessResults),\n    }\n\n    // /////////////////////////////////////\n    // Find by ID\n    // /////////////////////////////////////\n\n    if (!findGlobalVersionsArgs.where.and[0].id) {\n      throw new NotFound(req.t)\n    }\n\n    const { docs: results } = await payload.db.findGlobalVersions(findGlobalVersionsArgs)\n    if (!results || results?.length === 0) {\n      if (!disableErrors) {\n        if (!hasWhereAccess) {\n          throw new NotFound(req.t)\n        }\n        if (hasWhereAccess) {\n          throw new Forbidden(req.t)\n        }\n      }\n\n      return null\n    }\n\n    // Clone the result - it may have come back memoized\n    let result: any = deepCopyObjectSimple(results[0])\n\n    if (!result.version) {\n      result.version = {}\n    }\n\n    // Patch globalType onto version doc\n    result.version.globalType = globalConfig.slug\n\n    // /////////////////////////////////////\n    // beforeRead - Collection\n    // /////////////////////////////////////\n\n    await globalConfig.hooks.beforeRead.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      result =\n        (await hook({\n          context: req.context,\n          doc: result.version,\n          global: globalConfig,\n          req,\n        })) || result.version\n    }, Promise.resolve())\n\n    // /////////////////////////////////////\n    // afterRead - Fields\n    // /////////////////////////////////////\n\n    result.version = await afterRead({\n      collection: null,\n      context: req.context,\n      currentDepth,\n      depth,\n      doc: result.version,\n      draft: undefined,\n      fallbackLocale,\n      global: globalConfig,\n      locale,\n      overrideAccess,\n      populate,\n      req,\n      select: typeof select?.version === 'object' ? select.version : undefined,\n      showHiddenFields,\n    })\n\n    // /////////////////////////////////////\n    // afterRead - Global\n    // /////////////////////////////////////\n\n    await globalConfig.hooks.afterRead.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      result.version =\n        (await hook({\n          context: req.context,\n          doc: result.version,\n          global: globalConfig,\n          query: findGlobalVersionsArgs.where,\n          req,\n        })) || result.version\n    }, Promise.resolve())\n\n    return result\n  } catch (error: unknown) {\n    await killTransaction(req)\n    throw error\n  }\n}\n"],"names":["executeAccess","combineQueries","Forbidden","NotFound","afterRead","deepCopyObjectSimple","killTransaction","findVersionByIDOperation","args","id","currentDepth","depth","disableErrors","globalConfig","overrideAccess","populate","req","fallbackLocale","locale","payload","select","showHiddenFields","accessResults","access","readVersions","hasWhereAccess","findGlobalVersionsArgs","global","slug","limit","where","equals","and","t","docs","results","db","findGlobalVersions","length","result","version","globalType","hooks","beforeRead","reduce","priorHook","hook","context","doc","Promise","resolve","collection","draft","undefined","query","error"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 413, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 419, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/globals/endpoints/findVersionByID.ts"],"sourcesContent":["import { status as httpStatus } from 'http-status'\n\nimport type { PayloadHandler } from '../../config/types.js'\n\nimport { getRequestGlobal } from '../../utilities/getRequestEntity.js'\nimport { headersWithCors } from '../../utilities/headersWithCors.js'\nimport { isNumber } from '../../utilities/isNumber.js'\nimport { sanitizePopulateParam } from '../../utilities/sanitizePopulateParam.js'\nimport { sanitizeSelectParam } from '../../utilities/sanitizeSelectParam.js'\nimport { findVersionByIDOperation } from '../operations/findVersionByID.js'\n\nexport const findVersionByIDHandler: PayloadHandler = async (req) => {\n  const globalConfig = getRequestGlobal(req)\n  const { searchParams } = req\n  const depth = searchParams.get('depth')\n\n  const result = await findVersionByIDOperation({\n    id: req.routeParams.id as string,\n    depth: isNumber(depth) ? Number(depth) : undefined,\n    globalConfig,\n    populate: sanitizePopulateParam(req.query.populate),\n    req,\n    select: sanitizeSelectParam(req.query.select),\n  })\n\n  return Response.json(result, {\n    headers: headersWithCors({\n      headers: new Headers(),\n      req,\n    }),\n    status: httpStatus.OK,\n  })\n}\n"],"names":["status","httpStatus","getRequestGlobal","headersWithCors","isNumber","sanitizePopulateParam","sanitizeSelectParam","findVersionByIDOperation","findVersionByIDHandler","req","globalConfig","searchParams","depth","get","result","id","routeParams","Number","undefined","populate","query","select","Response","json","headers","Headers","OK"],"mappings":";;;AAAA,SAASA,UAAUC,UAAU,QAAQ,cAAa;AAIlD,SAASC,gBAAgB,QAAQ,sCAAqC;AAKtE,SAASK,wBAAwB,QAAQ,mCAAkC;AAH3E,SAASH,QAAQ,QAAQ,8BAA6B;AACtD,SAASC,qBAAqB,QAAQ,2CAA0C;AAChF,SAASC,mBAAmB,QAAQ,yCAAwC;AAH5E,SAASH,eAAe,QAAQ,qCAAoC;;;;;;;;;AAM7D,MAAMK,yBAAyC,OAAOC;IAC3D,MAAMC,mBAAeR,4YAAAA,EAAiBO;IACtC,MAAM,EAAEE,YAAY,EAAE,GAAGF;IACzB,MAAMG,QAAQD,aAAaE,GAAG,CAAC;IAE/B,MAAMC,SAAS,OAAMP,kaAAAA,EAAyB;QAC5CQ,IAAIN,IAAIO,WAAW,CAACD,EAAE;QACtBH,4XAAOR,WAAAA,EAASQ,SAASK,OAAOL,SAASM;QACzCR;QACAS,UAAUd,0ZAAAA,EAAsBI,IAAIW,KAAK,CAACD,QAAQ;QAClDV;QACAY,wYAAQf,sBAAAA,EAAoBG,IAAIW,KAAK,CAACC,MAAM;IAC9C;IAEA,OAAOC,SAASC,IAAI,CAACT,QAAQ;QAC3BU,qYAASrB,kBAAAA,EAAgB;YACvBqB,SAAS,IAAIC;YACbhB;QACF;QACAT,gQAAQC,SAAAA,CAAWyB,EAAE;IACvB;AACF,EAAC","ignoreList":[0]}},
    {"offset": {"line": 457, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 463, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/globals/operations/findVersions.ts"],"sourcesContent":["import type { PaginatedDocs } from '../../database/types.js'\nimport type { PayloadRequest, PopulateType, SelectType, Sort, Where } from '../../types/index.js'\nimport type { TypeWithVersion } from '../../versions/types.js'\nimport type { SanitizedGlobalConfig } from '../config/types.js'\n\nimport executeAccess from '../../auth/executeAccess.js'\nimport { combineQueries } from '../../database/combineQueries.js'\nimport { validateQueryPaths } from '../../database/queryValidation/validateQueryPaths.js'\nimport { afterRead } from '../../fields/hooks/afterRead/index.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport sanitizeInternalFields from '../../utilities/sanitizeInternalFields.js'\nimport { buildVersionGlobalFields } from '../../versions/buildGlobalFields.js'\n\nexport type Arguments = {\n  depth?: number\n  globalConfig: SanitizedGlobalConfig\n  limit?: number\n  overrideAccess?: boolean\n  page?: number\n  pagination?: boolean\n  populate?: PopulateType\n  req?: PayloadRequest\n  select?: SelectType\n  showHiddenFields?: boolean\n  sort?: Sort\n  where?: Where\n}\n\nexport const findVersionsOperation = async <T extends TypeWithVersion<T>>(\n  args: Arguments,\n): Promise<PaginatedDocs<T>> => {\n  const {\n    depth,\n    globalConfig,\n    limit,\n    overrideAccess,\n    page,\n    pagination = true,\n    populate,\n    req: { fallbackLocale, locale, payload },\n    req,\n    select,\n    showHiddenFields,\n    sort,\n    where,\n  } = args\n\n  const versionFields = buildVersionGlobalFields(payload.config, globalConfig, true)\n\n  try {\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    const accessResults = !overrideAccess\n      ? await executeAccess({ req }, globalConfig.access.readVersions)\n      : true\n\n    await validateQueryPaths({\n      globalConfig,\n      overrideAccess,\n      req,\n      versionFields,\n      where,\n    })\n\n    const fullWhere = combineQueries(where, accessResults)\n\n    // /////////////////////////////////////\n    // Find\n    // /////////////////////////////////////\n\n    const paginatedDocs = await payload.db.findGlobalVersions<T>({\n      global: globalConfig.slug,\n      limit: limit ?? 10,\n      locale,\n      page: page || 1,\n      pagination,\n      req,\n      select,\n      sort,\n      where: fullWhere,\n    })\n\n    // /////////////////////////////////////\n    // afterRead - Fields\n    // /////////////////////////////////////\n\n    let result = {\n      ...paginatedDocs,\n      docs: await Promise.all(\n        paginatedDocs.docs.map(async (data) => {\n          if (!data.version) {\n            // Fallback if not selected\n            ;(data as any).version = {}\n          }\n          return {\n            ...data,\n            version: await afterRead<T>({\n              collection: null,\n              context: req.context,\n              depth,\n              doc: {\n                ...data.version,\n                // Patch globalType onto version doc\n                globalType: globalConfig.slug,\n              },\n              draft: undefined,\n              fallbackLocale,\n              findMany: true,\n              global: globalConfig,\n              locale,\n              overrideAccess,\n              populate,\n              req,\n              select,\n              showHiddenFields,\n            }),\n          }\n        }),\n      ),\n    } as PaginatedDocs<T>\n\n    // /////////////////////////////////////\n    // afterRead - Global\n    // /////////////////////////////////////\n\n    result = {\n      ...result,\n      docs: await Promise.all(\n        result.docs.map(async (doc) => {\n          const docRef = doc\n\n          await globalConfig.hooks.afterRead.reduce(async (priorHook, hook) => {\n            await priorHook\n\n            docRef.version =\n              (await hook({\n                context: req.context,\n                doc: doc.version,\n                findMany: true,\n                global: globalConfig,\n                query: fullWhere,\n                req,\n              })) || doc.version\n          }, Promise.resolve())\n\n          return docRef\n        }),\n      ),\n    }\n\n    // /////////////////////////////////////\n    // Return results\n    // /////////////////////////////////////\n\n    result = {\n      ...result,\n      docs: result.docs.map((doc) => sanitizeInternalFields<T>(doc)),\n    }\n\n    return result\n  } catch (error: unknown) {\n    await killTransaction(req)\n    throw error\n  }\n}\n"],"names":["executeAccess","combineQueries","validateQueryPaths","afterRead","killTransaction","sanitizeInternalFields","buildVersionGlobalFields","findVersionsOperation","args","depth","globalConfig","limit","overrideAccess","page","pagination","populate","req","fallbackLocale","locale","payload","select","showHiddenFields","sort","where","versionFields","config","accessResults","access","readVersions","fullWhere","paginatedDocs","db","findGlobalVersions","global","slug","result","docs","Promise","all","map","data","version","collection","context","doc","globalType","draft","undefined","findMany","docRef","hooks","reduce","priorHook","hook","query","resolve","error"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 582, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 588, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/globals/endpoints/findVersions.ts"],"sourcesContent":["import { status as httpStatus } from 'http-status'\n\nimport type { PayloadHandler } from '../../config/types.js'\nimport type { Where } from '../../types/index.js'\n\nimport { getRequestGlobal } from '../../utilities/getRequestEntity.js'\nimport { headersWithCors } from '../../utilities/headersWithCors.js'\nimport { isNumber } from '../../utilities/isNumber.js'\nimport { sanitizePopulateParam } from '../../utilities/sanitizePopulateParam.js'\nimport { sanitizeSelectParam } from '../../utilities/sanitizeSelectParam.js'\nimport { findVersionsOperation } from '../operations/findVersions.js'\n\nexport const findVersionsHandler: PayloadHandler = async (req) => {\n  const globalConfig = getRequestGlobal(req)\n  const { depth, limit, page, pagination, populate, select, sort, where } = req.query as {\n    depth?: string\n    limit?: string\n    page?: string\n    pagination?: string\n    populate?: Record<string, unknown>\n    select?: Record<string, unknown>\n    sort?: string\n    where?: Where\n  }\n\n  const result = await findVersionsOperation({\n    depth: isNumber(depth) ? Number(depth) : undefined,\n    globalConfig,\n    limit: isNumber(limit) ? Number(limit) : undefined,\n    page: isNumber(page) ? Number(page) : undefined,\n    pagination: pagination === 'false' ? false : undefined,\n    populate: sanitizePopulateParam(populate),\n    req,\n    select: sanitizeSelectParam(select),\n    sort: typeof sort === 'string' ? sort.split(',') : undefined,\n    where,\n  })\n\n  return Response.json(result, {\n    headers: headersWithCors({\n      headers: new Headers(),\n      req,\n    }),\n    status: httpStatus.OK,\n  })\n}\n"],"names":["status","httpStatus","getRequestGlobal","headersWithCors","isNumber","sanitizePopulateParam","sanitizeSelectParam","findVersionsOperation","findVersionsHandler","req","globalConfig","depth","limit","page","pagination","populate","select","sort","where","query","result","Number","undefined","split","Response","json","headers","Headers","OK"],"mappings":";;;AAAA,SAASA,UAAUC,UAAU,QAAQ,cAAa;AAKlD,SAASC,gBAAgB,QAAQ,sCAAqC;AAKtE,SAASK,qBAAqB,QAAQ,gCAA+B;AAHrE,SAASH,QAAQ,QAAQ,8BAA6B;AACtD,SAASC,qBAAqB,QAAQ,2CAA0C;AAChF,SAASC,mBAAmB,QAAQ,yCAAwC;AAH5E,SAASH,eAAe,QAAQ,qCAAoC;;;;;;;;;AAM7D,MAAMK,sBAAsC,OAAOC;IACxD,MAAMC,4YAAeR,mBAAAA,EAAiBO;IACtC,MAAM,EAAEE,KAAK,EAAEC,KAAK,EAAEC,IAAI,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,IAAI,EAAEC,KAAK,EAAE,GAAGT,IAAIU,KAAK;IAWnF,MAAMC,SAAS,MAAMb,6ZAAAA,EAAsB;QACzCI,4XAAOP,WAAAA,EAASO,SAASU,OAAOV,SAASW;QACzCZ;QACAE,4XAAOR,WAAAA,EAASQ,SAASS,OAAOT,SAASU;QACzCT,OAAMT,+XAAAA,EAASS,QAAQQ,OAAOR,QAAQS;QACtCR,YAAYA,eAAe,UAAU,QAAQQ;QAC7CP,4YAAUV,wBAAAA,EAAsBU;QAChCN;QACAO,wYAAQV,sBAAAA,EAAoBU;QAC5BC,MAAM,OAAOA,SAAS,WAAWA,KAAKM,KAAK,CAAC,OAAOD;QACnDJ;IACF;IAEA,OAAOM,SAASC,IAAI,CAACL,QAAQ;QAC3BM,qYAASvB,kBAAAA,EAAgB;YACvBuB,SAAS,IAAIC;YACblB;QACF;QACAT,gQAAQC,SAAAA,CAAW2B,EAAE;IACvB;AACF,EAAC","ignoreList":[0]}},
    {"offset": {"line": 629, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 635, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/globals/endpoints/preview.ts"],"sourcesContent":["import { status as httpStatus } from 'http-status'\n\nimport type { PayloadHandler } from '../../config/types.js'\n\nimport { extractJWT } from '../../auth/extractJWT.js'\nimport { getRequestGlobal } from '../../utilities/getRequestEntity.js'\nimport { headersWithCors } from '../../utilities/headersWithCors.js'\nimport { isNumber } from '../../utilities/isNumber.js'\nimport { findOneOperation } from '../operations/findOne.js'\n\nexport const previewHandler: PayloadHandler = async (req) => {\n  const globalConfig = getRequestGlobal(req)\n  const { searchParams } = req\n  const depth = searchParams.get('depth')\n\n  const doc = await findOneOperation({\n    slug: globalConfig.slug,\n    depth: isNumber(depth) ? Number(depth) : undefined,\n    draft: searchParams.get('draft') === 'true',\n    globalConfig,\n    req,\n  })\n\n  let previewURL: string\n\n  const generatePreviewURL = req.payload.config.globals.find(\n    (config) => config.slug === globalConfig.slug,\n  )?.admin?.preview\n\n  const token = extractJWT(req)\n\n  if (typeof generatePreviewURL === 'function') {\n    previewURL = await generatePreviewURL(doc, {\n      locale: req.locale,\n      req,\n      token,\n    })\n  }\n\n  return Response.json(previewURL, {\n    headers: headersWithCors({\n      headers: new Headers(),\n      req,\n    }),\n    status: httpStatus.OK,\n  })\n}\n"],"names":["status","httpStatus","extractJWT","getRequestGlobal","headersWithCors","isNumber","findOneOperation","previewHandler","req","globalConfig","searchParams","depth","get","doc","slug","Number","undefined","draft","previewURL","generatePreviewURL","payload","config","globals","find","admin","preview","token","locale","Response","json","headers","Headers","OK"],"mappings":";;;AAAA,SAASA,UAAUC,UAAU,QAAQ,cAAa;AAKlD,SAASE,gBAAgB,QAAQ,sCAAqC;AAGtE,SAASG,gBAAgB,QAAQ,2BAA0B;AAD3D,SAASD,QAAQ,QAAQ,8BAA6B;AAHtD,SAASH,UAAU,QAAQ,2BAA0B;AAErD,SAASE,eAAe,QAAQ,qCAAoC;;;;;;;;AAI7D,MAAMG,iBAAiC,OAAOC;IACnD,MAAMC,4YAAeN,mBAAAA,EAAiBK;IACtC,MAAM,EAAEE,YAAY,EAAE,GAAGF;IACzB,MAAMG,QAAQD,aAAaE,GAAG,CAAC;IAE/B,MAAMC,MAAM,sYAAMP,mBAAAA,EAAiB;QACjCQ,MAAML,aAAaK,IAAI;QACvBH,4XAAON,WAAAA,EAASM,SAASI,OAAOJ,SAASK;QACzCC,OAAOP,aAAaE,GAAG,CAAC,aAAa;QACrCH;QACAD;IACF;IAEA,IAAIU;IAEJ,MAAMC,qBAAqBX,IAAIY,OAAO,CAACC,MAAM,CAACC,OAAO,CAACC,IAAI,CACxD,CAACF,SAAWA,OAAOP,IAAI,KAAKL,aAAaK,IAAI,GAC5CU,OAAOC;IAEV,MAAMC,SAAQxB,8XAAAA,EAAWM;IAEzB,IAAI,OAAOW,uBAAuB,YAAY;QAC5CD,aAAa,MAAMC,mBAAmBN,KAAK;YACzCc,QAAQnB,IAAImB,MAAM;YAClBnB;YACAkB;QACF;IACF;IAEA,OAAOE,SAASC,IAAI,CAACX,YAAY;QAC/BY,qYAAS1B,kBAAAA,EAAgB;YACvB0B,SAAS,IAAIC;YACbvB;QACF;QACAR,gQAAQC,SAAAA,CAAW+B,EAAE;IACvB;AACF,EAAC","ignoreList":[0]}},
    {"offset": {"line": 680, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 686, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/globals/operations/restoreVersion.ts"],"sourcesContent":["import type { PayloadRequest, PopulateType } from '../../types/index.js'\nimport type { TypeWithVersion } from '../../versions/types.js'\nimport type { SanitizedGlobalConfig } from '../config/types.js'\n\nimport executeAccess from '../../auth/executeAccess.js'\nimport { NotFound } from '../../errors/index.js'\nimport { afterChange } from '../../fields/hooks/afterChange/index.js'\nimport { afterRead } from '../../fields/hooks/afterRead/index.js'\nimport { commitTransaction } from '../../utilities/commitTransaction.js'\nimport { initTransaction } from '../../utilities/initTransaction.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\n\nexport type Arguments = {\n  depth?: number\n  draft?: boolean\n  globalConfig: SanitizedGlobalConfig\n  id: number | string\n  overrideAccess?: boolean\n  populate?: PopulateType\n  req?: PayloadRequest\n  showHiddenFields?: boolean\n}\n\nexport const restoreVersionOperation = async <T extends TypeWithVersion<T> = any>(\n  args: Arguments,\n): Promise<T> => {\n  const {\n    id,\n    depth,\n    draft,\n    globalConfig,\n    overrideAccess,\n    populate,\n    req: { fallbackLocale, locale, payload },\n    req,\n    showHiddenFields,\n  } = args\n\n  try {\n    const shouldCommit = await initTransaction(req)\n\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    if (!overrideAccess) {\n      await executeAccess({ req }, globalConfig.access.update)\n    }\n\n    // /////////////////////////////////////\n    // Retrieve original raw version\n    // /////////////////////////////////////\n\n    const { docs: versionDocs } = await payload.db.findGlobalVersions<any>({\n      global: globalConfig.slug,\n      limit: 1,\n      req,\n      where: { id: { equals: id } },\n    })\n\n    if (!versionDocs || versionDocs.length === 0) {\n      throw new NotFound(req.t)\n    }\n\n    const rawVersion = versionDocs[0]\n\n    // Patch globalType onto version doc\n    rawVersion.version.globalType = globalConfig.slug\n\n    // Overwrite draft status if draft is true\n\n    if (draft) {\n      rawVersion.version._status = 'draft'\n    }\n    // /////////////////////////////////////\n    // fetch previousDoc\n    // /////////////////////////////////////\n\n    const previousDoc = await payload.findGlobal({\n      slug: globalConfig.slug,\n      depth,\n      req,\n    })\n\n    // /////////////////////////////////////\n    // Update global\n    // /////////////////////////////////////\n\n    const global = await payload.db.findGlobal({\n      slug: globalConfig.slug,\n      req,\n    })\n\n    let result = rawVersion.version\n\n    if (global) {\n      result = await payload.db.updateGlobal({\n        slug: globalConfig.slug,\n        data: result,\n        req,\n      })\n\n      const now = new Date().toISOString()\n\n      result = await payload.db.createGlobalVersion({\n        autosave: false,\n        createdAt: result.createdAt ? new Date(result.createdAt).toISOString() : now,\n        globalSlug: globalConfig.slug,\n        parent: id,\n        req,\n        updatedAt: draft ? now : new Date(result.updatedAt).toISOString(),\n        versionData: result,\n      })\n    } else {\n      result = await payload.db.createGlobal({\n        slug: globalConfig.slug,\n        data: result,\n        req,\n      })\n    }\n\n    // /////////////////////////////////////\n    // afterRead - Fields\n    // /////////////////////////////////////\n\n    result = await afterRead({\n      collection: null,\n      context: req.context,\n      depth,\n      doc: result,\n      draft: undefined,\n      fallbackLocale,\n      global: globalConfig,\n      locale,\n      overrideAccess,\n      populate,\n      req,\n      showHiddenFields,\n    })\n\n    // /////////////////////////////////////\n    // afterRead - Global\n    // /////////////////////////////////////\n\n    await globalConfig.hooks.afterRead.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      result =\n        (await hook({\n          context: req.context,\n          doc: result,\n          global: globalConfig,\n          req,\n        })) || result\n    }, Promise.resolve())\n\n    // /////////////////////////////////////\n    // afterChange - Fields\n    // /////////////////////////////////////\n\n    result = await afterChange({\n      collection: null,\n      context: req.context,\n      data: result,\n      doc: result,\n      global: globalConfig,\n      operation: 'update',\n      previousDoc,\n      req,\n    })\n\n    // /////////////////////////////////////\n    // afterChange - Global\n    // /////////////////////////////////////\n\n    await globalConfig.hooks.afterChange.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      result =\n        (await hook({\n          context: req.context,\n          doc: result,\n          global: globalConfig,\n          previousDoc,\n          req,\n        })) || result\n    }, Promise.resolve())\n\n    if (shouldCommit) {\n      await commitTransaction(req)\n    }\n\n    return result\n  } catch (error: unknown) {\n    await killTransaction(req)\n    throw error\n  }\n}\n"],"names":["executeAccess","NotFound","afterChange","afterRead","commitTransaction","initTransaction","killTransaction","restoreVersionOperation","args","id","depth","draft","globalConfig","overrideAccess","populate","req","fallbackLocale","locale","payload","showHiddenFields","shouldCommit","access","update","docs","versionDocs","db","findGlobalVersions","global","slug","limit","where","equals","length","t","rawVersion","version","globalType","_status","previousDoc","findGlobal","result","updateGlobal","data","now","Date","toISOString","createGlobalVersion","autosave","createdAt","globalSlug","parent","updatedAt","versionData","createGlobal","collection","context","doc","undefined","hooks","reduce","priorHook","hook","Promise","resolve","operation","error"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 841, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 857, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/globals/endpoints/restoreVersion.ts"],"sourcesContent":["import { status as httpStatus } from 'http-status'\n\nimport type { PayloadHandler } from '../../config/types.js'\n\nimport { restoreVersionOperationGlobal, sanitizePopulateParam } from '../../index.js'\nimport { getRequestGlobal } from '../../utilities/getRequestEntity.js'\nimport { headersWithCors } from '../../utilities/headersWithCors.js'\nimport { isNumber } from '../../utilities/isNumber.js'\n\nexport const restoreVersionHandler: PayloadHandler = async (req) => {\n  const globalConfig = getRequestGlobal(req)\n  const { searchParams } = req\n  const depth = searchParams.get('depth')\n  const draft = searchParams.get('draft')\n\n  const doc = await restoreVersionOperationGlobal({\n    id: req.routeParams.id as string,\n    depth: isNumber(depth) ? Number(depth) : undefined,\n    draft: draft === 'true' ? true : undefined,\n    globalConfig,\n    populate: sanitizePopulateParam(req.query.populate),\n    req,\n  })\n\n  return Response.json(\n    {\n      doc,\n      message: req.t('version:restoredSuccessfully'),\n    },\n    {\n      headers: headersWithCors({\n        headers: new Headers(),\n        req,\n      }),\n      status: httpStatus.OK,\n    },\n  )\n}\n"],"names":["status","httpStatus","restoreVersionOperationGlobal","sanitizePopulateParam","getRequestGlobal","headersWithCors","isNumber","restoreVersionHandler","req","globalConfig","searchParams","depth","get","draft","doc","id","routeParams","Number","undefined","populate","query","Response","json","message","t","headers","Headers","OK"],"mappings":";;;AAAA,SAASA,UAAUC,UAAU,QAAQ,cAAa;AAKlD,SAASG,gBAAgB,QAAQ,sCAAqC;AADtE,SAASF,6BAA6B,EAAEC,qBAAqB,QAAQ,iBAAgB;AAGrF,SAASG,QAAQ,QAAQ,8BAA6B;;AADtD,SAASD,eAAe,QAAQ,qCAAoC;;;;;;;AAG7D,MAAME,wBAAwC,OAAOC;IAC1D,MAAMC,4YAAeL,mBAAAA,EAAiBI;IACtC,MAAM,EAAEE,YAAY,EAAE,GAAGF;IACzB,MAAMG,QAAQD,aAAaE,GAAG,CAAC;IAC/B,MAAMC,QAAQH,aAAaE,GAAG,CAAC;IAE/B,MAAME,MAAM,ydAAMZ,gCAAAA,EAA8B;QAC9Ca,IAAIP,IAAIQ,WAAW,CAACD,EAAE;QACtBJ,4XAAOL,WAAAA,EAASK,SAASM,OAAON,SAASO;QACzCL,OAAOA,UAAU,SAAS,OAAOK;QACjCT;QACAU,4YAAUhB,wBAAAA,EAAsBK,IAAIY,KAAK,CAACD,QAAQ;QAClDX;IACF;IAEA,OAAOa,SAASC,IAAI,CAClB;QACER;QACAS,SAASf,IAAIgB,CAAC,CAAC;IACjB,GACA;QACEC,qYAASpB,kBAAAA,EAAgB;YACvBoB,SAAS,IAAIC;YACblB;QACF;QACAR,gQAAQC,SAAAA,CAAW0B,EAAE;IACvB;AAEJ,EAAC","ignoreList":[0]}},
    {"offset": {"line": 896, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 902, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/globals/operations/update.ts"],"sourcesContent":["import type { DeepPartial } from 'ts-essentials'\n\nimport type { GlobalSlug, JsonObject } from '../../index.js'\nimport type {\n  Operation,\n  PayloadRequest,\n  PopulateType,\n  SelectType,\n  TransformGlobalWithSelect,\n  Where,\n} from '../../types/index.js'\nimport type {\n  DataFromGlobalSlug,\n  SanitizedGlobalConfig,\n  SelectFromGlobalSlug,\n} from '../config/types.js'\n\nimport executeAccess from '../../auth/executeAccess.js'\nimport { afterChange } from '../../fields/hooks/afterChange/index.js'\nimport { afterRead } from '../../fields/hooks/afterRead/index.js'\nimport { beforeChange } from '../../fields/hooks/beforeChange/index.js'\nimport { beforeValidate } from '../../fields/hooks/beforeValidate/index.js'\nimport { deepCopyObjectSimple } from '../../index.js'\nimport { checkDocumentLockStatus } from '../../utilities/checkDocumentLockStatus.js'\nimport { commitTransaction } from '../../utilities/commitTransaction.js'\nimport { getSelectMode } from '../../utilities/getSelectMode.js'\nimport { initTransaction } from '../../utilities/initTransaction.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport { getLatestGlobalVersion } from '../../versions/getLatestGlobalVersion.js'\nimport { saveVersion } from '../../versions/saveVersion.js'\n\ntype Args<TSlug extends GlobalSlug> = {\n  autosave?: boolean\n  data: DeepPartial<Omit<DataFromGlobalSlug<TSlug>, 'id'>>\n  depth?: number\n  disableTransaction?: boolean\n  draft?: boolean\n  globalConfig: SanitizedGlobalConfig\n  overrideAccess?: boolean\n  overrideLock?: boolean\n  populate?: PopulateType\n  publishSpecificLocale?: string\n  req: PayloadRequest\n  select?: SelectType\n  showHiddenFields?: boolean\n  slug: string\n}\n\nexport const updateOperation = async <\n  TSlug extends GlobalSlug,\n  TSelect extends SelectFromGlobalSlug<TSlug>,\n>(\n  args: Args<TSlug>,\n): Promise<TransformGlobalWithSelect<TSlug, TSelect>> => {\n  if (args.publishSpecificLocale) {\n    args.req.locale = args.publishSpecificLocale\n  }\n\n  const {\n    slug,\n    autosave,\n    depth,\n    disableTransaction,\n    draft: draftArg,\n    globalConfig,\n    overrideAccess,\n    overrideLock,\n    populate,\n    publishSpecificLocale,\n    req: { fallbackLocale, locale, payload },\n    req,\n    select,\n    showHiddenFields,\n  } = args\n\n  try {\n    const shouldCommit = !disableTransaction && (await initTransaction(req))\n\n    let { data } = args\n\n    const shouldSaveDraft = Boolean(draftArg && globalConfig.versions?.drafts)\n\n    // /////////////////////////////////////\n    // 1. Retrieve and execute access\n    // /////////////////////////////////////\n\n    const accessResults = !overrideAccess\n      ? await executeAccess(\n          {\n            data,\n            req,\n          },\n          globalConfig.access.update,\n        )\n      : true\n\n    // /////////////////////////////////////\n    // Retrieve document\n    // /////////////////////////////////////\n\n    const query: Where = overrideAccess ? undefined : (accessResults as Where)\n\n    // /////////////////////////////////////\n    // 2. Retrieve document\n    // /////////////////////////////////////\n    const globalVersion = await getLatestGlobalVersion({\n      slug,\n      config: globalConfig,\n      locale,\n      payload,\n      req,\n      where: query,\n    })\n    const { global, globalExists } = globalVersion || {}\n\n    let globalJSON: JsonObject = {}\n\n    if (globalVersion && globalVersion.global) {\n      globalJSON = deepCopyObjectSimple(global)\n\n      if (globalJSON._id) {\n        delete globalJSON._id\n      }\n    }\n\n    const originalDoc = await afterRead({\n      collection: null,\n      context: req.context,\n      depth: 0,\n      doc: deepCopyObjectSimple(globalJSON),\n      draft: draftArg,\n      fallbackLocale,\n      global: globalConfig,\n      locale,\n      overrideAccess: true,\n      req,\n      showHiddenFields,\n    })\n\n    // ///////////////////////////////////////////\n    // Handle potentially locked global documents\n    // ///////////////////////////////////////////\n\n    await checkDocumentLockStatus({\n      globalSlug: slug,\n      lockErrorMessage: `Global with slug \"${slug}\" is currently locked by another user and cannot be updated.`,\n      overrideLock,\n      req,\n    })\n\n    // /////////////////////////////////////\n    // beforeValidate - Fields\n    // /////////////////////////////////////\n\n    data = await beforeValidate({\n      collection: null,\n      context: req.context,\n      data,\n      doc: originalDoc,\n      global: globalConfig,\n      operation: 'update',\n      overrideAccess,\n      req,\n    })\n\n    // /////////////////////////////////////\n    // beforeValidate - Global\n    // /////////////////////////////////////\n\n    await globalConfig.hooks.beforeValidate.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      data =\n        (await hook({\n          context: req.context,\n          data,\n          global: globalConfig,\n          originalDoc,\n          req,\n        })) || data\n    }, Promise.resolve())\n\n    // /////////////////////////////////////\n    // beforeChange - Global\n    // /////////////////////////////////////\n\n    await globalConfig.hooks.beforeChange.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      data =\n        (await hook({\n          context: req.context,\n          data,\n          global: globalConfig,\n          originalDoc,\n          req,\n        })) || data\n    }, Promise.resolve())\n\n    // /////////////////////////////////////\n    // beforeChange - Fields\n    // /////////////////////////////////////\n    let publishedDocWithLocales = globalJSON\n    let versionSnapshotResult\n\n    const beforeChangeArgs = {\n      collection: null,\n      context: req.context,\n      data,\n      doc: originalDoc,\n      docWithLocales: undefined,\n      global: globalConfig,\n      operation: 'update' as Operation,\n      req,\n      skipValidation:\n        shouldSaveDraft && globalConfig.versions.drafts && !globalConfig.versions.drafts.validate,\n    }\n\n    if (publishSpecificLocale) {\n      const latestVersion = await getLatestGlobalVersion({\n        slug,\n        config: globalConfig,\n        payload,\n        published: true,\n        req,\n        where: query,\n      })\n\n      publishedDocWithLocales = latestVersion?.global || {}\n\n      versionSnapshotResult = await beforeChange({\n        ...beforeChangeArgs,\n        docWithLocales: globalJSON,\n      })\n    }\n\n    let result = await beforeChange({\n      ...beforeChangeArgs,\n      docWithLocales: publishedDocWithLocales,\n    })\n\n    // /////////////////////////////////////\n    // Update\n    // /////////////////////////////////////\n\n    if (!shouldSaveDraft) {\n      // Ensure global has createdAt\n      if (!result.createdAt) {\n        result.createdAt = new Date().toISOString()\n      }\n\n      if (globalExists) {\n        result = await payload.db.updateGlobal({\n          slug,\n          data: result,\n          req,\n          select,\n        })\n      } else {\n        result = await payload.db.createGlobal({\n          slug,\n          data: result,\n          req,\n        })\n      }\n    }\n\n    // /////////////////////////////////////\n    // Create version\n    // /////////////////////////////////////\n    if (globalConfig.versions) {\n      const { globalType } = result\n      result = await saveVersion({\n        autosave,\n        docWithLocales: result,\n        draft: shouldSaveDraft,\n        global: globalConfig,\n        payload,\n        publishSpecificLocale,\n        req,\n        select,\n        snapshot: versionSnapshotResult,\n      })\n\n      result = {\n        ...result,\n        globalType,\n      }\n    }\n\n    // /////////////////////////////////////\n    // Execute globalType field if not selected\n    // /////////////////////////////////////\n    if (select && result.globalType) {\n      const selectMode = getSelectMode(select)\n      if (\n        (selectMode === 'include' && !select['globalType']) ||\n        (selectMode === 'exclude' && select['globalType'] === false)\n      ) {\n        delete result['globalType']\n      }\n    }\n\n    // /////////////////////////////////////\n    // afterRead - Fields\n    // /////////////////////////////////////\n\n    result = await afterRead({\n      collection: null,\n      context: req.context,\n      depth,\n      doc: result,\n      draft: draftArg,\n      fallbackLocale: null,\n      global: globalConfig,\n      locale,\n      overrideAccess,\n      populate,\n      req,\n      select,\n      showHiddenFields,\n    })\n\n    // /////////////////////////////////////\n    // afterRead - Global\n    // /////////////////////////////////////\n\n    await globalConfig.hooks.afterRead.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      result =\n        (await hook({\n          context: req.context,\n          doc: result,\n          global: globalConfig,\n          req,\n        })) || result\n    }, Promise.resolve())\n\n    // /////////////////////////////////////\n    // afterChange - Fields\n    // /////////////////////////////////////\n\n    result = await afterChange({\n      collection: null,\n      context: req.context,\n      data,\n      doc: result,\n      global: globalConfig,\n      operation: 'update',\n      previousDoc: originalDoc,\n      req,\n    })\n\n    // /////////////////////////////////////\n    // afterChange - Global\n    // /////////////////////////////////////\n\n    await globalConfig.hooks.afterChange.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      result =\n        (await hook({\n          context: req.context,\n          doc: result,\n          global: globalConfig,\n          previousDoc: originalDoc,\n          req,\n        })) || result\n    }, Promise.resolve())\n\n    // /////////////////////////////////////\n    // Return results\n    // /////////////////////////////////////\n\n    if (shouldCommit) {\n      await commitTransaction(req)\n    }\n\n    return result as TransformGlobalWithSelect<TSlug, TSelect>\n  } catch (error: unknown) {\n    await killTransaction(req)\n    throw error\n  }\n}\n"],"names":["executeAccess","afterChange","afterRead","beforeChange","beforeValidate","deepCopyObjectSimple","checkDocumentLockStatus","commitTransaction","getSelectMode","initTransaction","killTransaction","getLatestGlobalVersion","saveVersion","updateOperation","args","publishSpecificLocale","req","locale","slug","autosave","depth","disableTransaction","draft","draftArg","globalConfig","overrideAccess","overrideLock","populate","fallbackLocale","payload","select","showHiddenFields","shouldCommit","data","shouldSaveDraft","Boolean","versions","drafts","accessResults","access","update","query","undefined","globalVersion","config","where","global","globalExists","globalJSON","_id","originalDoc","collection","context","doc","globalSlug","lockErrorMessage","operation","hooks","reduce","priorHook","hook","Promise","resolve","publishedDocWithLocales","versionSnapshotResult","beforeChangeArgs","docWithLocales","skipValidation","validate","latestVersion","published","result","createdAt","Date","toISOString","db","updateGlobal","createGlobal","globalType","snapshot","selectMode","previousDoc","error"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1187, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1193, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/globals/endpoints/update.ts"],"sourcesContent":["import { status as httpStatus } from 'http-status'\n\nimport type { PayloadHandler } from '../../config/types.js'\n\nimport { getRequestGlobal } from '../../utilities/getRequestEntity.js'\nimport { headersWithCors } from '../../utilities/headersWithCors.js'\nimport { isNumber } from '../../utilities/isNumber.js'\nimport { sanitizePopulateParam } from '../../utilities/sanitizePopulateParam.js'\nimport { sanitizeSelectParam } from '../../utilities/sanitizeSelectParam.js'\nimport { updateOperation } from '../operations/update.js'\n\nexport const updateHandler: PayloadHandler = async (req) => {\n  const globalConfig = getRequestGlobal(req)\n  const { searchParams } = req\n  const depth = searchParams.get('depth')\n  const draft = searchParams.get('draft') === 'true'\n  const autosave = searchParams.get('autosave') === 'true'\n  const publishSpecificLocale = req.query.publishSpecificLocale as string | undefined\n\n  const result = await updateOperation({\n    slug: globalConfig.slug,\n    autosave,\n    data: req.data,\n    depth: isNumber(depth) ? Number(depth) : undefined,\n    draft,\n    globalConfig,\n    populate: sanitizePopulateParam(req.query.populate),\n    publishSpecificLocale,\n    req,\n    select: sanitizeSelectParam(req.query.select),\n  })\n\n  let message = req.t('general:updatedSuccessfully')\n\n  if (draft) {\n    message = req.t('version:draftSavedSuccessfully')\n  }\n  if (autosave) {\n    message = req.t('version:autosavedSuccessfully')\n  }\n\n  return Response.json(\n    {\n      message,\n      result,\n    },\n    {\n      headers: headersWithCors({\n        headers: new Headers(),\n        req,\n      }),\n      status: httpStatus.OK,\n    },\n  )\n}\n"],"names":["status","httpStatus","getRequestGlobal","headersWithCors","isNumber","sanitizePopulateParam","sanitizeSelectParam","updateOperation","updateHandler","req","globalConfig","searchParams","depth","get","draft","autosave","publishSpecificLocale","query","result","slug","data","Number","undefined","populate","select","message","t","Response","json","headers","Headers","OK"],"mappings":";;;AAAA,SAASA,UAAUC,UAAU,QAAQ,cAAa;AAIlD,SAASC,gBAAgB,QAAQ,sCAAqC;AAKtE,SAASK,eAAe,QAAQ,0BAAyB;AAHzD,SAASH,QAAQ,QAAQ,8BAA6B;AACtD,SAASC,qBAAqB,QAAQ,2CAA0C;AAChF,SAASC,mBAAmB,QAAQ,yCAAwC;AAH5E,SAASH,eAAe,QAAQ,qCAAoC;;;;;;;;;AAM7D,MAAMK,gBAAgC,OAAOC;IAClD,MAAMC,4YAAeR,mBAAAA,EAAiBO;IACtC,MAAM,EAAEE,YAAY,EAAE,GAAGF;IACzB,MAAMG,QAAQD,aAAaE,GAAG,CAAC;IAC/B,MAAMC,QAAQH,aAAaE,GAAG,CAAC,aAAa;IAC5C,MAAME,WAAWJ,aAAaE,GAAG,CAAC,gBAAgB;IAClD,MAAMG,wBAAwBP,IAAIQ,KAAK,CAACD,qBAAqB;IAE7D,MAAME,SAAS,qYAAMX,kBAAAA,EAAgB;QACnCY,MAAMT,aAAaS,IAAI;QACvBJ;QACAK,MAAMX,IAAIW,IAAI;QACdR,4XAAOR,WAAAA,EAASQ,SAASS,OAAOT,SAASU;QACzCR;QACAJ;QACAa,4YAAUlB,wBAAAA,EAAsBI,IAAIQ,KAAK,CAACM,QAAQ;QAClDP;QACAP;QACAe,wYAAQlB,sBAAAA,EAAoBG,IAAIQ,KAAK,CAACO,MAAM;IAC9C;IAEA,IAAIC,UAAUhB,IAAIiB,CAAC,CAAC;IAEpB,IAAIZ,OAAO;QACTW,UAAUhB,IAAIiB,CAAC,CAAC;IAClB;IACA,IAAIX,UAAU;QACZU,UAAUhB,IAAIiB,CAAC,CAAC;IAClB;IAEA,OAAOC,SAASC,IAAI,CAClB;QACEH;QACAP;IACF,GACA;QACEW,qYAAS1B,kBAAAA,EAAgB;YACvB0B,SAAS,IAAIC;YACbrB;QACF;QACAT,gQAAQC,SAAAA,CAAW8B,EAAE;IACvB;AAEJ,EAAC","ignoreList":[0]}},
    {"offset": {"line": 1248, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1254, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/globals/endpoints/index.ts"],"sourcesContent":["import type { Endpoint } from '../../config/types.js'\n\nimport { wrapInternalEndpoints } from '../../utilities/wrapInternalEndpoints.js'\nimport { docAccessHandler } from './docAccess.js'\nimport { findOneHandler } from './findOne.js'\nimport { findVersionByIDHandler } from './findVersionByID.js'\nimport { findVersionsHandler } from './findVersions.js'\nimport { previewHandler } from './preview.js'\nimport { restoreVersionHandler } from './restoreVersion.js'\nimport { updateHandler } from './update.js'\n\nexport const defaultGlobalEndpoints: Endpoint[] = wrapInternalEndpoints([\n  {\n    handler: docAccessHandler,\n    method: 'post',\n    path: '/access',\n  },\n  {\n    handler: findOneHandler,\n    method: 'get',\n    path: '/',\n  },\n  {\n    handler: findVersionByIDHandler,\n    method: 'get',\n    path: '/versions/:id',\n  },\n  {\n    handler: findVersionsHandler,\n    method: 'get',\n    path: '/versions',\n  },\n  {\n    handler: previewHandler,\n    method: 'get',\n    path: '/preview',\n  },\n  {\n    handler: restoreVersionHandler,\n    method: 'post',\n    path: '/versions/:id',\n  },\n  {\n    handler: updateHandler,\n    method: 'post',\n    path: '/',\n  },\n])\n"],"names":["wrapInternalEndpoints","docAccessHandler","findOneHandler","findVersionByIDHandler","findVersionsHandler","previewHandler","restoreVersionHandler","updateHandler","defaultGlobalEndpoints","handler","method","path"],"mappings":";;;AAEA,SAASA,qBAAqB,QAAQ,2CAA0C;AAChF,SAASC,gBAAgB,QAAQ,iBAAgB;AACjD,SAASC,cAAc,QAAQ,eAAc;AAC7C,SAASC,sBAAsB,QAAQ,uBAAsB;AAC7D,SAASC,mBAAmB,QAAQ,oBAAmB;AACvD,SAASC,cAAc,QAAQ,eAAc;AAC7C,SAASC,qBAAqB,QAAQ,sBAAqB;AAC3D,SAASC,aAAa,QAAQ,cAAa;;;;;;;;;AAEpC,MAAMC,2ZAAqCR,wBAAAA,EAAsB;IACtE;QACES,sYAASR,mBAAAA;QACTS,QAAQ;QACRC,MAAM;IACR;IACA;QACEF,oYAASP,iBAAAA;QACTQ,QAAQ;QACRC,MAAM;IACR;IACA;QACEF,4YAASN,yBAAAA;QACTO,QAAQ;QACRC,MAAM;IACR;IACA;QACEF,SAASL,sZAAAA;QACTM,QAAQ;QACRC,MAAM;IACR;IACA;QACEF,oYAASJ,iBAAAA;QACTK,QAAQ;QACRC,MAAM;IACR;IACA;QACEF,2YAASH,wBAAAA;QACTI,QAAQ;QACRC,MAAM;IACR;IACA;QACEF,mYAASF,gBAAAA;QACTG,QAAQ;QACRC,MAAM;IACR;CACD,EAAC","ignoreList":[0]}},
    {"offset": {"line": 1310, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1316, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/globals/config/sanitize.ts"],"sourcesContent":["import type { Config, SanitizedConfig } from '../../config/types.js'\nimport type { GlobalConfig, SanitizedGlobalConfig } from './types.js'\n\nimport defaultAccess from '../../auth/defaultAccess.js'\nimport { sanitizeFields } from '../../fields/config/sanitize.js'\nimport { fieldAffectsData } from '../../fields/config/types.js'\nimport mergeBaseFields from '../../fields/mergeBaseFields.js'\nimport { flattenAllFields } from '../../utilities/flattenAllFields.js'\nimport { toWords } from '../../utilities/formatLabels.js'\nimport baseVersionFields from '../../versions/baseFields.js'\nimport { versionDefaults } from '../../versions/defaults.js'\nimport { defaultGlobalEndpoints } from '../endpoints/index.js'\n\nexport const sanitizeGlobal = async (\n  config: Config,\n  global: GlobalConfig,\n  /**\n   * If this property is set, RichText fields won't be sanitized immediately. Instead, they will be added to this array as promises\n   * so that you can sanitize them together, after the config has been sanitized.\n   */\n  richTextSanitizationPromises?: Array<(config: SanitizedConfig) => Promise<void>>,\n): Promise<SanitizedGlobalConfig> => {\n  const { collections } = config\n\n  global.label = global.label || toWords(global.slug)\n\n  // /////////////////////////////////\n  // Ensure that collection has required object structure\n  // /////////////////////////////////\n\n  global.endpoints = global.endpoints ?? []\n  if (!global.hooks) {\n    global.hooks = {}\n  }\n  if (!global.access) {\n    global.access = {}\n  }\n  if (!global.admin) {\n    global.admin = {}\n  }\n\n  if (!global.access.read) {\n    global.access.read = defaultAccess\n  }\n  if (!global.access.update) {\n    global.access.update = defaultAccess\n  }\n\n  if (!global.hooks.beforeValidate) {\n    global.hooks.beforeValidate = []\n  }\n  if (!global.hooks.beforeChange) {\n    global.hooks.beforeChange = []\n  }\n  if (!global.hooks.afterChange) {\n    global.hooks.afterChange = []\n  }\n  if (!global.hooks.beforeRead) {\n    global.hooks.beforeRead = []\n  }\n  if (!global.hooks.afterRead) {\n    global.hooks.afterRead = []\n  }\n\n  // Sanitize fields\n  const validRelationships = collections.map((c) => c.slug) || []\n  global.fields = await sanitizeFields({\n    config,\n    fields: global.fields,\n    parentIsLocalized: false,\n    richTextSanitizationPromises,\n    validRelationships,\n  })\n\n  if (global.endpoints !== false) {\n    if (!global.endpoints) {\n      global.endpoints = []\n    }\n\n    for (const endpoint of defaultGlobalEndpoints) {\n      global.endpoints.push(endpoint)\n    }\n  }\n\n  if (global.versions) {\n    if (global.versions === true) {\n      global.versions = { drafts: false, max: 100 }\n    }\n\n    global.versions.max = typeof global.versions.max === 'number' ? global.versions.max : 100\n\n    if (global.versions.drafts) {\n      if (global.versions.drafts === true) {\n        global.versions.drafts = {\n          autosave: false,\n          validate: false,\n        }\n      }\n\n      if (global.versions.drafts.autosave === true) {\n        global.versions.drafts.autosave = {\n          interval: versionDefaults.autosaveInterval,\n        }\n      }\n\n      if (global.versions.drafts.validate === undefined) {\n        global.versions.drafts.validate = false\n      }\n\n      global.fields = mergeBaseFields(global.fields, baseVersionFields)\n    }\n  }\n\n  if (!global.custom) {\n    global.custom = {}\n  }\n\n  // /////////////////////////////////\n  // Sanitize fields\n  // /////////////////////////////////\n  let hasUpdatedAt = null\n  let hasCreatedAt = null\n  global.fields.some((field) => {\n    if (fieldAffectsData(field)) {\n      if (field.name === 'updatedAt') {\n        hasUpdatedAt = true\n      }\n      if (field.name === 'createdAt') {\n        hasCreatedAt = true\n      }\n    }\n    return hasCreatedAt && hasUpdatedAt\n  })\n  if (!hasUpdatedAt) {\n    global.fields.push({\n      name: 'updatedAt',\n      type: 'date',\n      admin: {\n        disableBulkEdit: true,\n        hidden: true,\n      },\n      label: ({ t }) => t('general:updatedAt'),\n    })\n  }\n  if (!hasCreatedAt) {\n    global.fields.push({\n      name: 'createdAt',\n      type: 'date',\n      admin: {\n        disableBulkEdit: true,\n        hidden: true,\n      },\n      label: ({ t }) => t('general:createdAt'),\n    })\n  }\n\n  ;(global as SanitizedGlobalConfig).flattenedFields = flattenAllFields({ fields: global.fields })\n\n  return global as SanitizedGlobalConfig\n}\n"],"names":["defaultAccess","sanitizeFields","fieldAffectsData","mergeBaseFields","flattenAllFields","toWords","baseVersionFields","versionDefaults","defaultGlobalEndpoints","sanitizeGlobal","config","global","richTextSanitizationPromises","collections","label","slug","endpoints","hooks","access","admin","read","update","beforeValidate","beforeChange","afterChange","beforeRead","afterRead","validRelationships","map","c","fields","parentIsLocalized","endpoint","push","versions","drafts","max","autosave","validate","interval","autosaveInterval","undefined","custom","hasUpdatedAt","hasCreatedAt","some","field","name","type","disableBulkEdit","hidden","t","flattenedFields"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1467, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1513, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/globals/operations/countGlobalVersions.ts"],"sourcesContent":["import type { AccessResult } from '../../config/types.js'\nimport type { PayloadRequest, Where } from '../../types/index.js'\n\nimport executeAccess from '../../auth/executeAccess.js'\nimport { combineQueries } from '../../database/combineQueries.js'\nimport { validateQueryPaths } from '../../database/queryValidation/validateQueryPaths.js'\nimport {\n  buildVersionGlobalFields,\n  type GlobalSlug,\n  type SanitizedGlobalConfig,\n} from '../../index.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\n\nexport type Arguments = {\n  disableErrors?: boolean\n  global: SanitizedGlobalConfig\n  overrideAccess?: boolean\n  req?: PayloadRequest\n  where?: Where\n}\n\nexport const countGlobalVersionsOperation = async <TSlug extends GlobalSlug>(\n  args: Arguments,\n): Promise<{ totalDocs: number }> => {\n  try {\n    const {\n      disableErrors,\n      global,\n      overrideAccess,\n      req: { payload },\n      req,\n      where,\n    } = args\n\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    let accessResult: AccessResult\n\n    if (!overrideAccess) {\n      accessResult = await executeAccess({ disableErrors, req }, global.access.readVersions)\n\n      // If errors are disabled, and access returns false, return empty results\n      if (accessResult === false) {\n        return {\n          totalDocs: 0,\n        }\n      }\n    }\n\n    const fullWhere = combineQueries(where, accessResult)\n\n    const versionFields = buildVersionGlobalFields(payload.config, global, true)\n\n    await validateQueryPaths({\n      globalConfig: global,\n      overrideAccess,\n      req,\n      versionFields,\n      where,\n    })\n\n    const result = await payload.db.countGlobalVersions({\n      global: global.slug,\n      req,\n      where: fullWhere,\n    })\n\n    // /////////////////////////////////////\n    // Return results\n    // /////////////////////////////////////\n\n    return result\n  } catch (error: unknown) {\n    await killTransaction(args.req)\n    throw error\n  }\n}\n"],"names":["executeAccess","combineQueries","validateQueryPaths","buildVersionGlobalFields","killTransaction","countGlobalVersionsOperation","args","disableErrors","global","overrideAccess","req","payload","where","accessResult","access","readVersions","totalDocs","fullWhere","versionFields","config","globalConfig","result","db","countGlobalVersions","slug","error"],"mappings":";;;AAGA,OAAOA,mBAAmB,8BAA6B;AACvD,SAASC,cAAc,QAAQ,mCAAkC;AAEjE,SACEE,wBAAwB,QAGnB,iBAAgB;AALvB,SAASD,kBAAkB,QAAQ,uDAAsD;AAMzF,SAASE,eAAe,QAAQ,qCAAoC;;;;;;AAU7D,MAAMC,+BAA+B,OAC1CC;IAEA,IAAI;QACF,MAAM,EACJC,aAAa,EACbC,MAAM,EACNC,cAAc,EACdC,KAAK,EAAEC,OAAO,EAAE,EAChBD,GAAG,EACHE,KAAK,EACN,GAAGN;QAEJ,wCAAwC;QACxC,SAAS;QACT,wCAAwC;QAExC,IAAIO;QAEJ,IAAI,CAACJ,gBAAgB;YACnBI,eAAe,OAAMb,8XAAAA,EAAc;gBAAEO;gBAAeG;YAAI,GAAGF,OAAOM,MAAM,CAACC,YAAY;YAErF,yEAAyE;YACzE,IAAIF,iBAAiB,OAAO;gBAC1B,OAAO;oBACLG,WAAW;gBACb;YACF;QACF;QAEA,MAAMC,sYAAYhB,iBAAAA,EAAeW,OAAOC;QAExC,MAAMK,iBAAgBf,uZAAAA,EAAyBQ,QAAQQ,MAAM,EAAEX,QAAQ;QAEvE,uZAAMN,qBAAAA,EAAmB;YACvBkB,cAAcZ;YACdC;YACAC;YACAQ;YACAN;QACF;QAEA,MAAMS,SAAS,MAAMV,QAAQW,EAAE,CAACC,mBAAmB,CAAC;YAClDf,QAAQA,OAAOgB,IAAI;YACnBd;YACAE,OAAOK;QACT;QAEA,wCAAwC;QACxC,iBAAiB;QACjB,wCAAwC;QAExC,OAAOI;IACT,EAAE,OAAOI,OAAgB;QACvB,kYAAMrB,kBAAAA,EAAgBE,KAAKI,GAAG;QAC9B,MAAMe;IACR;AACF,EAAC","ignoreList":[0]}},
    {"offset": {"line": 1568, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1574, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/globals/operations/local/countGlobalVersions.ts"],"sourcesContent":["import type { GlobalSlug, Payload, RequestContext, TypedLocale } from '../../../index.js'\nimport type { Document, PayloadRequest, Where } from '../../../types/index.js'\n\nimport { APIError } from '../../../errors/index.js'\nimport { createLocalReq } from '../../../utilities/createLocalReq.js'\nimport { countGlobalVersionsOperation } from '../countGlobalVersions.js'\n\nexport type CountGlobalVersionsOptions<TSlug extends GlobalSlug> = {\n  /**\n   * context, which will then be passed to req.context, which can be read by hooks\n   */\n  context?: RequestContext\n  depth?: number\n  disableErrors?: boolean\n  global: TSlug\n  locale?: TypedLocale\n  overrideAccess?: boolean\n  req?: Partial<PayloadRequest>\n  user?: Document\n  where?: Where\n}\n\n// eslint-disable-next-line no-restricted-exports\nexport default async function countGlobalVersionsLocal<TSlug extends GlobalSlug>(\n  payload: Payload,\n  options: CountGlobalVersionsOptions<TSlug>,\n): Promise<{ totalDocs: number }> {\n  const { disableErrors, global: globalSlug, overrideAccess = true, where } = options\n\n  const global = payload.globals.config.find(({ slug }) => slug === globalSlug)\n\n  if (!global) {\n    throw new APIError(\n      `The global with slug ${String(globalSlug)} can't be found. Count Global Versions Operation.`,\n    )\n  }\n\n  return countGlobalVersionsOperation<TSlug>({\n    disableErrors,\n    global,\n    overrideAccess,\n    req: await createLocalReq(options, payload),\n    where,\n  })\n}\n"],"names":["APIError","createLocalReq","countGlobalVersionsOperation","countGlobalVersionsLocal","payload","options","disableErrors","global","globalSlug","overrideAccess","where","globals","config","find","slug","String","req"],"mappings":";;;AAGA,SAASA,QAAQ,QAAQ,2BAA0B;AAEnD,SAASE,4BAA4B,QAAQ,4BAA2B;AADxE,SAASD,cAAc,QAAQ,uCAAsC;;;;AAmBtD,eAAeE,yBAC5BC,OAAgB,EAChBC,OAA0C;IAE1C,MAAM,EAAEC,aAAa,EAAEC,QAAQC,UAAU,EAAEC,iBAAiB,IAAI,EAAEC,KAAK,EAAE,GAAGL;IAE5E,MAAME,SAASH,QAAQO,OAAO,CAACC,MAAM,CAACC,IAAI,CAAC,CAAC,EAAEC,IAAI,EAAE,GAAKA,SAASN;IAElE,IAAI,CAACD,QAAQ;QACX,MAAM,IAAIP,yXAAAA,CACR,CAAC,qBAAqB,EAAEe,OAAOP,YAAY,iDAAiD,CAAC;IAEjG;IAEA,mZAAON,+BAAAA,EAAoC;QACzCI;QACAC;QACAE;QACAO,KAAK,iYAAMf,iBAAAA,EAAeI,SAASD;QACnCM;IACF;AACF","ignoreList":[0]}},
    {"offset": {"line": 1597, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1603, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/globals/operations/local/findOne.ts"],"sourcesContent":["import type { GlobalSlug, Payload, RequestContext, TypedLocale } from '../../../index.js'\nimport type {\n  Document,\n  PayloadRequest,\n  PopulateType,\n  SelectType,\n  TransformGlobalWithSelect,\n} from '../../../types/index.js'\nimport type { SelectFromGlobalSlug } from '../../config/types.js'\n\nimport { APIError } from '../../../errors/index.js'\nimport { createLocalReq } from '../../../utilities/createLocalReq.js'\nimport { findOneOperation } from '../findOne.js'\n\nexport type Options<TSlug extends GlobalSlug, TSelect extends SelectType> = {\n  context?: RequestContext\n  depth?: number\n  draft?: boolean\n  fallbackLocale?: false | TypedLocale\n  includeLockStatus?: boolean\n  locale?: 'all' | TypedLocale\n  overrideAccess?: boolean\n  populate?: PopulateType\n  req?: Partial<PayloadRequest>\n  select?: TSelect\n  showHiddenFields?: boolean\n  slug: TSlug\n  user?: Document\n}\n\nexport default async function findOneLocal<\n  TSlug extends GlobalSlug,\n  TSelect extends SelectFromGlobalSlug<TSlug>,\n>(\n  payload: Payload,\n  options: Options<TSlug, TSelect>,\n): Promise<TransformGlobalWithSelect<TSlug, TSelect>> {\n  const {\n    slug: globalSlug,\n    depth,\n    draft = false,\n    includeLockStatus,\n    overrideAccess = true,\n    populate,\n    select,\n    showHiddenFields,\n  } = options\n\n  const globalConfig = payload.globals.config.find((config) => config.slug === globalSlug)\n\n  if (!globalConfig) {\n    throw new APIError(`The global with slug ${String(globalSlug)} can't be found.`)\n  }\n\n  return findOneOperation({\n    slug: globalSlug as string,\n    depth,\n    draft,\n    globalConfig,\n    includeLockStatus,\n    overrideAccess,\n    populate,\n    req: await createLocalReq(options, payload),\n    select,\n    showHiddenFields,\n  })\n}\n"],"names":["APIError","createLocalReq","findOneOperation","findOneLocal","payload","options","slug","globalSlug","depth","draft","includeLockStatus","overrideAccess","populate","select","showHiddenFields","globalConfig","globals","config","find","String","req"],"mappings":";;;AAUA,SAASA,QAAQ,QAAQ,2BAA0B;AAEnD,SAASE,gBAAgB,QAAQ,gBAAe;AADhD,SAASD,cAAc,QAAQ,uCAAsC;;;;AAmBtD,eAAeE,aAI5BC,OAAgB,EAChBC,OAAgC;IAEhC,MAAM,EACJC,MAAMC,UAAU,EAChBC,KAAK,EACLC,QAAQ,KAAK,EACbC,iBAAiB,EACjBC,iBAAiB,IAAI,EACrBC,QAAQ,EACRC,MAAM,EACNC,gBAAgB,EACjB,GAAGT;IAEJ,MAAMU,eAAeX,QAAQY,OAAO,CAACC,MAAM,CAACC,IAAI,CAAC,CAACD,SAAWA,OAAOX,IAAI,KAAKC;IAE7E,IAAI,CAACQ,cAAc;QACjB,MAAM,IAAIf,yXAAAA,CAAS,CAAC,qBAAqB,EAAEmB,OAAOZ,YAAY,gBAAgB,CAAC;IACjF;IAEA,uYAAOL,mBAAAA,EAAiB;QACtBI,MAAMC;QACNC;QACAC;QACAM;QACAL;QACAC;QACAC;QACAQ,KAAK,iYAAMnB,iBAAAA,EAAeI,SAASD;QACnCS;QACAC;IACF;AACF","ignoreList":[0]}},
    {"offset": {"line": 1631, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1637, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/globals/operations/local/findVersionByID.ts"],"sourcesContent":["import type { GlobalSlug, Payload, RequestContext, TypedLocale } from '../../../index.js'\nimport type { Document, PayloadRequest, PopulateType, SelectType } from '../../../types/index.js'\nimport type { TypeWithVersion } from '../../../versions/types.js'\nimport type { DataFromGlobalSlug } from '../../config/types.js'\n\nimport { APIError } from '../../../errors/index.js'\nimport { createLocalReq } from '../../../utilities/createLocalReq.js'\nimport { findVersionByIDOperation } from '../findVersionByID.js'\n\nexport type Options<TSlug extends GlobalSlug> = {\n  context?: RequestContext\n  depth?: number\n  disableErrors?: boolean\n  fallbackLocale?: false | TypedLocale\n  id: string\n  locale?: 'all' | TypedLocale\n  overrideAccess?: boolean\n  populate?: PopulateType\n  req?: Partial<PayloadRequest>\n  select?: SelectType\n  showHiddenFields?: boolean\n  slug: TSlug\n  user?: Document\n}\n\n// eslint-disable-next-line no-restricted-exports\nexport default async function findVersionByIDLocal<TSlug extends GlobalSlug>(\n  payload: Payload,\n  options: Options<TSlug>,\n): Promise<TypeWithVersion<DataFromGlobalSlug<TSlug>>> {\n  const {\n    id,\n    slug: globalSlug,\n    depth,\n    disableErrors = false,\n    overrideAccess = true,\n    populate,\n    select,\n    showHiddenFields,\n  } = options\n\n  const globalConfig = payload.globals.config.find((config) => config.slug === globalSlug)\n\n  if (!globalConfig) {\n    throw new APIError(`The global with slug ${String(globalSlug)} can't be found.`)\n  }\n\n  return findVersionByIDOperation({\n    id,\n    depth,\n    disableErrors,\n    globalConfig,\n    overrideAccess,\n    populate,\n    req: await createLocalReq(options, payload),\n    select,\n    showHiddenFields,\n  })\n}\n"],"names":["APIError","createLocalReq","findVersionByIDOperation","findVersionByIDLocal","payload","options","id","slug","globalSlug","depth","disableErrors","overrideAccess","populate","select","showHiddenFields","globalConfig","globals","config","find","String","req"],"mappings":";;;AAKA,SAASA,QAAQ,QAAQ,2BAA0B;AAEnD,SAASE,wBAAwB,QAAQ,wBAAuB;AADhE,SAASD,cAAc,QAAQ,uCAAsC;;;;AAoBtD,eAAeE,qBAC5BC,OAAgB,EAChBC,OAAuB;IAEvB,MAAM,EACJC,EAAE,EACFC,MAAMC,UAAU,EAChBC,KAAK,EACLC,gBAAgB,KAAK,EACrBC,iBAAiB,IAAI,EACrBC,QAAQ,EACRC,MAAM,EACNC,gBAAgB,EACjB,GAAGT;IAEJ,MAAMU,eAAeX,QAAQY,OAAO,CAACC,MAAM,CAACC,IAAI,CAAC,CAACD,SAAWA,OAAOV,IAAI,KAAKC;IAE7E,IAAI,CAACO,cAAc;QACjB,MAAM,IAAIf,yXAAAA,CAAS,CAAC,qBAAqB,EAAEmB,OAAOX,YAAY,gBAAgB,CAAC;IACjF;IAEA,+YAAON,2BAAAA,EAAyB;QAC9BI;QACAG;QACAC;QACAK;QACAJ;QACAC;QACAQ,KAAK,iYAAMnB,iBAAAA,EAAeI,SAASD;QACnCS;QACAC;IACF;AACF","ignoreList":[0]}},
    {"offset": {"line": 1664, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1670, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/globals/operations/local/findVersions.ts"],"sourcesContent":["/* eslint-disable no-restricted-exports */\nimport type { PaginatedDocs } from '../../../database/types.js'\nimport type { GlobalSlug, Payload, RequestContext, TypedLocale } from '../../../index.js'\nimport type {\n  Document,\n  PayloadRequest,\n  PopulateType,\n  SelectType,\n  Sort,\n  Where,\n} from '../../../types/index.js'\nimport type { TypeWithVersion } from '../../../versions/types.js'\nimport type { DataFromGlobalSlug } from '../../config/types.js'\n\nimport { APIError } from '../../../errors/index.js'\nimport { createLocalReq } from '../../../utilities/createLocalReq.js'\nimport { findVersionsOperation } from '../findVersions.js'\n\nexport type Options<TSlug extends GlobalSlug> = {\n  context?: RequestContext\n  depth?: number\n  fallbackLocale?: false | TypedLocale\n  limit?: number\n  locale?: 'all' | TypedLocale\n  overrideAccess?: boolean\n  page?: number\n  populate?: PopulateType\n  req?: Partial<PayloadRequest>\n  select?: SelectType\n  showHiddenFields?: boolean\n  slug: TSlug\n  sort?: Sort\n  user?: Document\n  where?: Where\n}\n\nexport default async function findVersionsLocal<TSlug extends GlobalSlug>(\n  payload: Payload,\n  options: Options<TSlug>,\n): Promise<PaginatedDocs<TypeWithVersion<DataFromGlobalSlug<TSlug>>>> {\n  const {\n    slug: globalSlug,\n    depth,\n    limit,\n    overrideAccess = true,\n    page,\n    populate,\n    select,\n    showHiddenFields,\n    sort,\n    where,\n  } = options\n\n  const globalConfig = payload.globals.config.find((config) => config.slug === globalSlug)\n\n  if (!globalConfig) {\n    throw new APIError(`The global with slug ${String(globalSlug)} can't be found.`)\n  }\n\n  return findVersionsOperation({\n    depth,\n    globalConfig,\n    limit,\n    overrideAccess,\n    page,\n    populate,\n    req: await createLocalReq(options, payload),\n    select,\n    showHiddenFields,\n    sort,\n    where,\n  })\n}\n"],"names":["APIError","createLocalReq","findVersionsOperation","findVersionsLocal","payload","options","slug","globalSlug","depth","limit","overrideAccess","page","populate","select","showHiddenFields","sort","where","globalConfig","globals","config","find","String","req"],"mappings":"AAAA,wCAAwC;;;AAcxC,SAASA,QAAQ,QAAQ,2BAA0B;AAEnD,SAASE,qBAAqB,QAAQ,qBAAoB;AAD1D,SAASD,cAAc,QAAQ,uCAAsC;;;;AAqBtD,eAAeE,kBAC5BC,OAAgB,EAChBC,OAAuB;IAEvB,MAAM,EACJC,MAAMC,UAAU,EAChBC,KAAK,EACLC,KAAK,EACLC,iBAAiB,IAAI,EACrBC,IAAI,EACJC,QAAQ,EACRC,MAAM,EACNC,gBAAgB,EAChBC,IAAI,EACJC,KAAK,EACN,GAAGX;IAEJ,MAAMY,eAAeb,QAAQc,OAAO,CAACC,MAAM,CAACC,IAAI,CAAC,CAACD,SAAWA,OAAOb,IAAI,KAAKC;IAE7E,IAAI,CAACU,cAAc;QACjB,MAAM,kXAAIjB,WAAAA,CAAS,CAAC,qBAAqB,EAAEqB,OAAOd,YAAY,gBAAgB,CAAC;IACjF;IAEA,4YAAOL,wBAAAA,EAAsB;QAC3BM;QACAS;QACAR;QACAC;QACAC;QACAC;QACAU,KAAK,iYAAMrB,iBAAAA,EAAeI,SAASD;QACnCS;QACAC;QACAC;QACAC;IACF;AACF","ignoreList":[0]}},
    {"offset": {"line": 1699, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1705, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/globals/operations/local/restoreVersion.ts"],"sourcesContent":["/* eslint-disable no-restricted-exports */\nimport type { GlobalSlug, Payload, RequestContext, TypedLocale } from '../../../index.js'\nimport type { Document, PayloadRequest, PopulateType } from '../../../types/index.js'\nimport type { DataFromGlobalSlug } from '../../config/types.js'\n\nimport { APIError } from '../../../errors/index.js'\nimport { createLocalReq } from '../../../utilities/createLocalReq.js'\nimport { restoreVersionOperation } from '../restoreVersion.js'\n\nexport type Options<TSlug extends GlobalSlug> = {\n  context?: RequestContext\n  depth?: number\n  fallbackLocale?: false | TypedLocale\n  id: string\n  locale?: TypedLocale\n  overrideAccess?: boolean\n  populate?: PopulateType\n  req?: Partial<PayloadRequest>\n  showHiddenFields?: boolean\n  slug: TSlug\n  user?: Document\n}\n\nexport default async function restoreVersionLocal<TSlug extends GlobalSlug>(\n  payload: Payload,\n  options: Options<TSlug>,\n): Promise<DataFromGlobalSlug<TSlug>> {\n  const { id, slug: globalSlug, depth, overrideAccess = true, populate, showHiddenFields } = options\n\n  const globalConfig = payload.globals.config.find((config) => config.slug === globalSlug)\n\n  if (!globalConfig) {\n    throw new APIError(`The global with slug ${String(globalSlug)} can't be found.`)\n  }\n\n  return restoreVersionOperation({\n    id,\n    depth,\n    globalConfig,\n    overrideAccess,\n    populate,\n    req: await createLocalReq(options, payload),\n    showHiddenFields,\n  })\n}\n"],"names":["APIError","createLocalReq","restoreVersionOperation","restoreVersionLocal","payload","options","id","slug","globalSlug","depth","overrideAccess","populate","showHiddenFields","globalConfig","globals","config","find","String","req"],"mappings":"AAAA,wCAAwC;;;AAKxC,SAASA,QAAQ,QAAQ,2BAA0B;AAEnD,SAASE,uBAAuB,QAAQ,uBAAsB;AAD9D,SAASD,cAAc,QAAQ,uCAAsC;;;;AAiBtD,eAAeE,oBAC5BC,OAAgB,EAChBC,OAAuB;IAEvB,MAAM,EAAEC,EAAE,EAAEC,MAAMC,UAAU,EAAEC,KAAK,EAAEC,iBAAiB,IAAI,EAAEC,QAAQ,EAAEC,gBAAgB,EAAE,GAAGP;IAE3F,MAAMQ,eAAeT,QAAQU,OAAO,CAACC,MAAM,CAACC,IAAI,CAAC,CAACD,SAAWA,OAAOR,IAAI,KAAKC;IAE7E,IAAI,CAACK,cAAc;QACjB,MAAM,kXAAIb,WAAAA,CAAS,CAAC,qBAAqB,EAAEiB,OAAOT,YAAY,gBAAgB,CAAC;IACjF;IAEA,8YAAON,0BAAAA,EAAwB;QAC7BI;QACAG;QACAI;QACAH;QACAC;QACAO,KAAK,iYAAMjB,iBAAAA,EAAeI,SAASD;QACnCQ;IACF;AACF","ignoreList":[0]}},
    {"offset": {"line": 1730, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1736, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/globals/operations/local/update.ts"],"sourcesContent":["import type { DeepPartial } from 'ts-essentials'\n\nimport type {\n  Document,\n  PayloadRequest,\n  PopulateType,\n  SelectType,\n  TransformGlobalWithSelect,\n} from '../../../types/index.js'\nimport type { DataFromGlobalSlug, SelectFromGlobalSlug } from '../../config/types.js'\n\nimport { APIError } from '../../../errors/index.js'\nimport {\n  deepCopyObjectSimple,\n  type GlobalSlug,\n  type Payload,\n  type RequestContext,\n  type TypedLocale,\n} from '../../../index.js'\nimport { createLocalReq } from '../../../utilities/createLocalReq.js'\nimport { updateOperation } from '../update.js'\n\nexport type Options<TSlug extends GlobalSlug, TSelect extends SelectType> = {\n  context?: RequestContext\n  data: DeepPartial<Omit<DataFromGlobalSlug<TSlug>, 'id'>>\n  depth?: number\n  draft?: boolean\n  fallbackLocale?: false | TypedLocale\n  locale?: 'all' | TypedLocale\n  overrideAccess?: boolean\n  overrideLock?: boolean\n  populate?: PopulateType\n  publishSpecificLocale?: TypedLocale\n  req?: Partial<PayloadRequest>\n  select?: TSelect\n  showHiddenFields?: boolean\n  slug: TSlug\n  user?: Document\n}\n\nexport default async function updateLocal<\n  TSlug extends GlobalSlug,\n  TSelect extends SelectFromGlobalSlug<TSlug>,\n>(\n  payload: Payload,\n  options: Options<TSlug, TSelect>,\n): Promise<TransformGlobalWithSelect<TSlug, TSelect>> {\n  const {\n    slug: globalSlug,\n    data,\n    depth,\n    draft,\n    overrideAccess = true,\n    overrideLock,\n    populate,\n    publishSpecificLocale,\n    select,\n    showHiddenFields,\n  } = options\n\n  const globalConfig = payload.globals.config.find((config) => config.slug === globalSlug)\n\n  if (!globalConfig) {\n    throw new APIError(`The global with slug ${String(globalSlug)} can't be found.`)\n  }\n\n  return updateOperation<TSlug, TSelect>({\n    slug: globalSlug as string,\n    data: deepCopyObjectSimple(data), // Ensure mutation of data in create operation hooks doesn't affect the original data\n    depth,\n    draft,\n    globalConfig,\n    overrideAccess,\n    overrideLock,\n    populate,\n    publishSpecificLocale,\n    req: await createLocalReq(options, payload),\n    select,\n    showHiddenFields,\n  })\n}\n"],"names":["APIError","deepCopyObjectSimple","createLocalReq","updateOperation","updateLocal","payload","options","slug","globalSlug","data","depth","draft","overrideAccess","overrideLock","populate","publishSpecificLocale","select","showHiddenFields","globalConfig","globals","config","find","String","req"],"mappings":";;;AAWA,SAASA,QAAQ,QAAQ,2BAA0B;AASnD,SAASG,eAAe,QAAQ,eAAc;AAR9C,SACEF,oBAAoB,QAKf,oBAAmB;AAC1B,SAASC,cAAc,QAAQ,uCAAsC;;;;;AAqBtD,eAAeE,YAI5BC,OAAgB,EAChBC,OAAgC;IAEhC,MAAM,EACJC,MAAMC,UAAU,EAChBC,IAAI,EACJC,KAAK,EACLC,KAAK,EACLC,iBAAiB,IAAI,EACrBC,YAAY,EACZC,QAAQ,EACRC,qBAAqB,EACrBC,MAAM,EACNC,gBAAgB,EACjB,GAAGX;IAEJ,MAAMY,eAAeb,QAAQc,OAAO,CAACC,MAAM,CAACC,IAAI,CAAC,CAACD,SAAWA,OAAOb,IAAI,KAAKC;IAE7E,IAAI,CAACU,cAAc;QACjB,MAAM,kXAAIlB,WAAAA,CAAS,CAAC,qBAAqB,EAAEsB,OAAOd,YAAY,gBAAgB,CAAC;IACjF;IAEA,sYAAOL,kBAAAA,EAAgC;QACrCI,MAAMC;QACNC,iYAAMR,uBAAAA,EAAqBQ;QAC3BC;QACAC;QACAO;QACAN;QACAC;QACAC;QACAC;QACAQ,KAAK,iYAAMrB,iBAAAA,EAAeI,SAASD;QACnCW;QACAC;IACF;AACF","ignoreList":[0]}},
    {"offset": {"line": 1768, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1774, "column": 0}, "map": {"version":3,"sources":["file:///home/eric/Documents/GitHub/astro-payload-mono/apps/payload/node_modules/.pnpm/payload%403.23.0_graphql%4016.10.0_monaco-editor%400.52.2_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0_typescript%405.7.2/node_modules/payload/src/globals/operations/local/index.ts"],"sourcesContent":["import countGlobalVersions from './countGlobalVersions.js'\nimport findOne from './findOne.js'\nimport findVersionByID from './findVersionByID.js'\nimport findVersions from './findVersions.js'\nimport restoreVersion from './restoreVersion.js'\nimport update from './update.js'\n\nexport default {\n  countGlobalVersions,\n  findOne,\n  findVersionByID,\n  findVersions,\n  restoreVersion,\n  update,\n}\n"],"names":["countGlobalVersions","findOne","findVersionByID","findVersions","restoreVersion","update"],"mappings":";;;AAAA,OAAOA,yBAAyB,2BAA0B;AAC1D,OAAOC,aAAa,eAAc;AAClC,OAAOC,qBAAqB,uBAAsB;AAClD,OAAOC,kBAAkB,oBAAmB;AAC5C,OAAOC,oBAAoB,sBAAqB;AAChD,OAAOC,YAAY,cAAa;;;;;;;uCAEjB;0aACbL,UAAAA;kZACAC,UAAAA;kaACAC,UAAAA;4ZACAC,UAAAA;gaACAC,UAAAA;gZACAC,UAAAA;AACF,EAAC","ignoreList":[0]}},
    {"offset": {"line": 1798, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}